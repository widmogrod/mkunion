name: Daily Team Digest

on:
  schedule:
    # Run every weekday at 9 AM UTC
    - cron: '0 9 * * 1-5'
  workflow_dispatch:

jobs:
  generate-digest:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: read
    steps:
      - name: Generate daily digest
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date();
            const yesterday = new Date(now.getTime() - (24 * 60 * 60 * 1000));
            
            // Fetch various metrics
            const [issues, prs, closedIssues, mergedPRs] = await Promise.all([
              // New issues
              github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                since: yesterday.toISOString(),
                per_page: 100
              }),
              // New PRs
              github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'created',
                direction: 'desc',
                per_page: 100
              }),
              // Closed issues
              github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                since: yesterday.toISOString(),
                per_page: 100
              }),
              // Merged PRs
              github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                sort: 'updated',
                direction: 'desc',
                per_page: 100
              })
            ]);
            
            // Filter data for last 24 hours
            const newIssues = issues.data.filter(i => 
              new Date(i.created_at) > yesterday && !i.pull_request
            );
            const newPRs = prs.data.filter(pr => 
              new Date(pr.created_at) > yesterday
            );
            const recentlyClosedIssues = closedIssues.data.filter(i => 
              new Date(i.closed_at) > yesterday && !i.pull_request
            );
            const recentlyMergedPRs = mergedPRs.data.filter(pr => 
              pr.merged_at && new Date(pr.merged_at) > yesterday
            );
            
            // Get current sprint info
            const sprintNumber = Math.floor((now.getTime() - new Date('2024-01-01').getTime()) / (14 * 24 * 60 * 60 * 1000)) + 1;
            
            // Count in-progress work
            const { data: inProgressIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'in-progress',
              state: 'open',
              per_page: 100
            });
            
            const { data: blockedIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'blocked',
              state: 'open',
              per_page: 100
            });
            
            const { data: reviewPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            const prsNeedingReview = reviewPRs.data.filter(pr => {
              const hoursSinceCreated = (now - new Date(pr.created_at)) / (1000 * 60 * 60);
              return hoursSinceCreated > 4 && pr.requested_reviewers.length > 0;
            });
            
            // Generate digest
            let digest = `# 📰 Daily Team Digest\n\n`;
            digest += `**Date**: ${now.toLocaleDateString()}\n`;
            digest += `**Sprint**: ${sprintNumber} (Day ${((now.getTime() - new Date('2024-01-01').getTime()) % (14 * 24 * 60 * 60 * 1000)) / (24 * 60 * 60 * 1000) + 1}/14)\n\n`;
            
            // Summary section
            digest += '## 📊 24-Hour Summary\n\n';
            digest += `- **New Issues**: ${newIssues.length}\n`;
            digest += `- **Issues Closed**: ${recentlyClosedIssues.length}\n`;
            digest += `- **New PRs**: ${newPRs.length}\n`;
            digest += `- **PRs Merged**: ${recentlyMergedPRs.length}\n`;
            digest += `- **Currently In Progress**: ${inProgressIssues.data.length}\n`;
            digest += `- **Blocked Items**: ${blockedIssues.data.length}\n\n`;
            
            // Alerts section
            if (blockedIssues.data.length > 0 || prsNeedingReview.length > 0) {
              digest += '## 🚨 Requires Attention\n\n';
              
              if (blockedIssues.data.length > 0) {
                digest += '### Blocked Issues\n';
                for (const issue of blockedIssues.data.slice(0, 5)) {
                  const assignee = issue.assignees.length > 0 ? `@${issue.assignees[0].login}` : 'Unassigned';
                  digest += `- #${issue.number}: ${issue.title} (${assignee})\n`;
                }
                if (blockedIssues.data.length > 5) {
                  digest += `- ...and ${blockedIssues.data.length - 5} more\n`;
                }
                digest += '\n';
              }
              
              if (prsNeedingReview.length > 0) {
                digest += '### PRs Awaiting Review (>4 hours)\n';
                for (const pr of prsNeedingReview.slice(0, 5)) {
                  const hoursSince = Math.round((now - new Date(pr.created_at)) / (1000 * 60 * 60));
                  const reviewers = pr.requested_reviewers.map(r => `@${r.login}`).join(', ');
                  digest += `- #${pr.number}: ${pr.title} (${hoursSince}h old) - Needs: ${reviewers}\n`;
                }
                digest += '\n';
              }
            }
            
            // New work section
            if (newIssues.length > 0 || newPRs.length > 0) {
              digest += '## 🆕 New Work\n\n';
              
              if (newIssues.length > 0) {
                digest += '### New Issues\n';
                for (const issue of newIssues.slice(0, 10)) {
                  const priority = issue.labels.find(l => l.name.startsWith('priority:'))?.name || 'priority:medium';
                  const type = issue.labels.find(l => ['feature', 'bug'].includes(l.name))?.name || 'task';
                  digest += `- #${issue.number}: ${issue.title} [${type}] [${priority}]\n`;
                }
                if (newIssues.length > 10) {
                  digest += `- ...and ${newIssues.length - 10} more\n`;
                }
                digest += '\n';
              }
              
              if (newPRs.length > 0) {
                digest += '### New Pull Requests\n';
                for (const pr of newPRs.slice(0, 10)) {
                  const author = `@${pr.user.login}`;
                  digest += `- #${pr.number}: ${pr.title} by ${author}\n`;
                }
                digest += '\n';
              }
            }
            
            // Completed work
            if (recentlyClosedIssues.length > 0 || recentlyMergedPRs.length > 0) {
              digest += '## ✅ Completed Work\n\n';
              
              if (recentlyClosedIssues.length > 0) {
                digest += '### Closed Issues\n';
                for (const issue of recentlyClosedIssues.slice(0, 10)) {
                  const closedBy = issue.closed_by ? `@${issue.closed_by.login}` : 'System';
                  digest += `- #${issue.number}: ${issue.title} (by ${closedBy})\n`;
                }
                digest += '\n';
              }
              
              if (recentlyMergedPRs.length > 0) {
                digest += '### Merged PRs\n';
                for (const pr of recentlyMergedPRs.slice(0, 10)) {
                  const author = `@${pr.user.login}`;
                  digest += `- #${pr.number}: ${pr.title} by ${author}\n`;
                }
                digest += '\n';
              }
            }
            
            // Team activity
            const contributors = new Set();
            const activityMap = {};
            
            // Count activities per person
            [...newIssues, ...recentlyClosedIssues].forEach(issue => {
              if (issue.user) {
                contributors.add(issue.user.login);
                activityMap[issue.user.login] = (activityMap[issue.user.login] || 0) + 1;
              }
            });
            
            [...newPRs, ...recentlyMergedPRs].forEach(pr => {
              if (pr.user) {
                contributors.add(pr.user.login);
                activityMap[pr.user.login] = (activityMap[pr.user.login] || 0) + 1;
              }
            });
            
            if (contributors.size > 0) {
              digest += '## 👥 Team Activity\n\n';
              digest += `**Active Contributors**: ${contributors.size}\n\n`;
              
              const topContributors = Object.entries(activityMap)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5);
              
              digest += '### Most Active\n';
              for (const [user, count] of topContributors) {
                digest += `- @${user}: ${count} activities\n`;
              }
              digest += '\n';
            }
            
            // Today's focus
            digest += '## 🎯 Today\'s Focus\n\n';
            digest += '1. **Clear Blockers**: Address any blocked issues immediately\n';
            digest += '2. **Review PRs**: Ensure timely reviews (within 4 hours)\n';
            digest += '3. **Sprint Progress**: Check burndown chart and adjust if needed\n';
            
            // Add tips
            const tips = [
              'Remember to update issue status when starting/completing work',
              'Keep PRs small and focused for faster reviews',
              'Document any blockers immediately with context',
              'Check the sprint burndown chart for progress',
              'Pair on complex issues to unblock faster'
            ];
            
            const todaysTip = tips[now.getDate() % tips.length];
            digest += `\n## 💡 Tip of the Day\n\n${todaysTip}\n`;
            
            // Create digest issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Daily Digest - ${now.toLocaleDateString()}`,
              body: digest,
              labels: ['daily-digest', 'automated']
            });
            
            // If there are critical items, create an alert
            if (blockedIssues.data.length > 3 || prsNeedingReview.length > 5) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `⚠️ Daily Alert - ${blockedIssues.data.length} Blocked Issues, ${prsNeedingReview.length} PRs Need Review`,
                body: `## Immediate Action Required\n\n${blockedIssues.data.length} issues are blocked and ${prsNeedingReview.length} PRs have been waiting for review for over 4 hours.\n\nPlease check the [daily digest](${digest}) for details.`,
                labels: ['urgent', 'daily-alert'],
                assignees: process.env.TEAM_LEAD ? [process.env.TEAM_LEAD] : []
              });
            }
            
            console.log('Daily digest generated:', {
              date: now.toISOString(),
              newIssues: newIssues.length,
              closedIssues: recentlyClosedIssues.length,
              blockedIssues: blockedIssues.data.length,
              contributors: contributors.size
            });