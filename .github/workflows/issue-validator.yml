name: Issue Quality Validator

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  validate-issue-quality:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Validate issue completeness
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const isAIGenerated = issue.labels.some(l => l.name === 'ai-generated');
            
            // Define validation rules
            const validationRules = {
              standard: {
                minBodyLength: 50,
                requiredSections: [],
                requiredLabels: ['inbox'],
                checkAcceptanceCriteria: false
              },
              feature: {
                minBodyLength: 100,
                requiredSections: ['Problem Description', 'Proposed Solution'],
                requiredLabels: ['feature', 'inbox'],
                checkAcceptanceCriteria: true
              },
              bug: {
                minBodyLength: 100,
                requiredSections: ['Steps to Reproduce', 'Expected Behavior', 'Actual Behavior'],
                requiredLabels: ['bug', 'inbox'],
                checkAcceptanceCriteria: false
              },
              aiGenerated: {
                minBodyLength: 200,
                requiredSections: ['Problem Statement', 'Proposed Solution', 'Acceptance Criteria', 'Technical Implementation Details'],
                requiredLabels: ['ai-generated', 'needs-human-review', 'inbox'],
                checkAcceptanceCriteria: true
              }
            };
            
            // Determine which rules to apply
            let rules = validationRules.standard;
            if (isAIGenerated) {
              rules = validationRules.aiGenerated;
            } else if (issue.labels.some(l => l.name === 'feature')) {
              rules = validationRules.feature;
            } else if (issue.labels.some(l => l.name === 'bug')) {
              rules = validationRules.bug;
            }
            
            const body = issue.body || '';
            const validationErrors = [];
            const validationWarnings = [];
            
            // Check body length
            if (body.length < rules.minBodyLength) {
              validationErrors.push(`Issue description is too short (${body.length}/${rules.minBodyLength} characters)`);
            }
            
            // Check required sections
            for (const section of rules.requiredSections) {
              if (!body.toLowerCase().includes(section.toLowerCase())) {
                validationErrors.push(`Missing required section: "${section}"`);
              }
            }
            
            // Check acceptance criteria
            if (rules.checkAcceptanceCriteria) {
              const hasCriteria = body.match(/\[[ x]\]/g);
              if (!hasCriteria || hasCriteria.length < 2) {
                validationErrors.push('Missing or insufficient acceptance criteria (need at least 2 checkboxes)');
              }
            }
            
            // Check for missing labels
            const missingLabels = rules.requiredLabels.filter(label => 
              !issue.labels.some(l => l.name === label)
            );
            if (missingLabels.length > 0) {
              validationWarnings.push(`Missing labels: ${missingLabels.join(', ')}`);
            }
            
            // Additional quality checks
            if (!issue.title || issue.title.length < 10) {
              validationErrors.push('Issue title is too short or missing');
            }
            
            if (issue.title && issue.title.length > 100) {
              validationWarnings.push('Issue title is very long (>100 chars), consider making it more concise');
            }
            
            // Check for placeholder text (common in templates)
            const placeholderPatterns = [
              'lorem ipsum',
              'todo:',
              'fill in',
              'replace this',
              'your text here'
            ];
            
            for (const pattern of placeholderPatterns) {
              if (body.toLowerCase().includes(pattern)) {
                validationErrors.push(`Found placeholder text: "${pattern}"`);
              }
            }
            
            // Generate validation report
            const isValid = validationErrors.length === 0;
            let comment = isValid ? '## ✅ Issue Validation Passed\n\n' : '## ❌ Issue Validation Failed\n\n';
            
            if (validationErrors.length > 0) {
              comment += '### Errors (must fix):\n';
              for (const error of validationErrors) {
                comment += `- ❌ ${error}\n`;
              }
              comment += '\n';
            }
            
            if (validationWarnings.length > 0) {
              comment += '### Warnings (should fix):\n';
              for (const warning of validationWarnings) {
                comment += `- ⚠️ ${warning}\n`;
              }
              comment += '\n';
            }
            
            if (isValid) {
              comment += 'This issue meets all quality requirements. Great job! 🎉\n';
            } else {
              comment += '**Please edit the issue to fix the errors above.**\n\n';
              comment += 'Quality gates help ensure issues are actionable and well-defined. ';
              comment += 'This reduces back-and-forth communication and speeds up development.\n';
            }
            
            // Add or update validation label
            if (isValid) {
              // Remove invalid label if exists
              if (issue.labels.some(l => l.name === 'needs-improvement')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'needs-improvement'
                });
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['quality-validated']
              });
            } else {
              // Remove validated label if exists
              if (issue.labels.some(l => l.name === 'quality-validated')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'quality-validated'
                });
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['needs-improvement']
              });
            }
            
            // Post validation comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: comment
            });
            
            // Log validation metrics
            console.log('Issue Validation:', {
              issue: issue.number,
              type: isAIGenerated ? 'ai-generated' : issue.labels.find(l => ['feature', 'bug'].includes(l.name))?.name || 'standard',
              valid: isValid,
              errors: validationErrors.length,
              warnings: validationWarnings.length
            });

      - name: Validate AI refinement response
        if: github.event_name == 'issue_comment' && contains(github.event.issue.labels.*.name, 'needs-ai-refinement')
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment;
            const issue = context.payload.issue;
            
            // Check if this is an AI response (could be from Claude Code or similar)
            const isAIResponse = comment.body.includes('AI Refinement Complete') || 
                               comment.user.type === 'Bot' ||
                               comment.body.includes('<!-- AI_RESPONSE -->');
            
            if (isAIResponse) {
              // Validate the refinement addressed the requested changes
              const validationChecks = {
                hasUpdatedDescription: comment.body.length > 200,
                hasAcceptanceCriteria: comment.body.match(/\[[ x]\]/g)?.length >= 2,
                hasTechnicalDetails: comment.body.includes('Files to modify') || comment.body.includes('Implementation'),
                addressedFeedback: true // Would need more sophisticated check
              };
              
              const allChecksPassed = Object.values(validationChecks).every(v => v);
              
              if (allChecksPassed) {
                // Remove needs-ai-refinement label
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'needs-ai-refinement'
                });
                
                // Add refined label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['ai-refined', 'needs-human-review']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ **AI Refinement Validated**
                  
                  The AI has successfully refined this issue. Human review is now required to:
                  - Verify the technical approach aligns with architecture
                  - Confirm acceptance criteria are complete
                  - Approve for backlog inclusion
                  
                  @${issue.assignees[0]?.login || 'team'} - Please review the refined issue.`
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `⚠️ **AI Refinement Incomplete**
                  
                  The AI refinement appears incomplete. Missing:
                  ${!validationChecks.hasUpdatedDescription ? '\n- Detailed description' : ''}
                  ${!validationChecks.hasAcceptanceCriteria ? '\n- Clear acceptance criteria' : ''}
                  ${!validationChecks.hasTechnicalDetails ? '\n- Technical implementation details' : ''}
                  
                  Please request another refinement with more specific instructions.`
                });
              }
            }