// Code generated by mkunion. DO NOT EDIT.
package f

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(EitherUnionJSONShape())
	shape.Register(OptionUnionJSONShape())
	shape.Register(ResultUnionJSONShape())
}

//shape:shape
func EitherUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "EitherUnionJSON",
		PkgName:       "f",
		PkgImportName: "github.com/widmogrod/mkunion/f",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "B",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Left",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.Left",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Right",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.Right",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func OptionUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OptionUnionJSON",
		PkgName:       "f",
		PkgImportName: "github.com/widmogrod/mkunion/f",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Some",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.Some",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "None",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.None",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ResultUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ResultUnionJSON",
		PkgName:       "f",
		PkgImportName: "github.com/widmogrod/mkunion/f",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "E",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Ok",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.Ok",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Err",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "f.Err",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
