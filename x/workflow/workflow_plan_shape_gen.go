// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AssignStepShape())
	shape.Register(ExecuteStepShape())
	shape.Register(ExecutionPlanShape())
	shape.Register(PlanStepShape())
	shape.Register(ReturnStepShape())
	shape.Register(planExecutorShape())
	shape.Register(planGeneratorShape())
	shape.Register(stepResultShape())
}

//shape:shape

func PlanStepShape() shape.Shape {
	return &shape.UnionLike{
		Name: "PlanStep",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Variant: []shape.Shape{
			ExecuteStepShape(),
			AssignStepShape(),
			ReturnStepShape(),
		},
	}
}

func ExecuteStepShape() shape.Shape {
	return &shape.StructLike{
		Name: "ExecuteStep",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "StepID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Expr",
				Type: &shape.RefName{
					Name: "Expr",
					PkgName: "workflow",
					PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
				},
			},
			{
				Name: "DependsOn",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "PlanStep",
			},
		},
	}
}

func AssignStepShape() shape.Shape {
	return &shape.StructLike{
		Name: "AssignStep",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "StepID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "VarName",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "FromStep",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "PlanStep",
			},
		},
	}
}

func ReturnStepShape() shape.Shape {
	return &shape.StructLike{
		Name: "ReturnStep",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "StepID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "FromStep",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "PlanStep",
			},
		},
	}
}
//shape:shape
func ExecutionPlanShape() shape.Shape {
	return &shape.StructLike{
		Name: "ExecutionPlan",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Fields: []*shape.FieldLike{
			{
				Name: "Steps",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name: "PlanStep",
						PkgName: "workflow",
						PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
					},
				},
			},
			{
				Name: "Queue",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
			},
			{
				Name: "Completed",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
				},
			},
			{
				Name: "Results",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name: "Schema",
						PkgName: "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "Variables",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name: "Schema",
						PkgName: "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "ExecutedSteps",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
			},
			{
				Name: "SkippedSteps",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
//shape:shape
func planExecutorShape() shape.Shape {
	return &shape.StructLike{
		Name: "planExecutor",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
	}
}
//shape:shape
func planGeneratorShape() shape.Shape {
	return &shape.StructLike{
		Name: "planGenerator",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
	}
}
//shape:shape
func stepResultShape() shape.Shape {
	return &shape.StructLike{
		Name: "stepResult",
		PkgName: "workflow",
		PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
