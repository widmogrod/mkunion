// Code generated by mkunion. DO NOT EDIT.
package workflow

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*ExecutionPlan)(nil)
	_ json.Marshaler   = (*ExecutionPlan)(nil)
)

func (r *ExecutionPlan) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExecutionPlan(*r)
}
func (r *ExecutionPlan) _marshalJSONExecutionPlan(x ExecutionPlan) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldSteps []byte
	fieldSteps, err = r._marshalJSONSlicePlanStep(x.Steps)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name Steps; %w", err)
	}
	partial["Steps"] = fieldSteps
	var fieldQueue []byte
	fieldQueue, err = r._marshalJSONSlicestring(x.Queue)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name Queue; %w", err)
	}
	partial["Queue"] = fieldQueue
	var fieldCompleted []byte
	fieldCompleted, err = r._marshalJSONmapLb_string_bLbool(x.Completed)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name Completed; %w", err)
	}
	partial["Completed"] = fieldCompleted
	var fieldResults []byte
	fieldResults, err = r._marshalJSONmapLb_string_bLschema_Schema(x.Results)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name Results; %w", err)
	}
	partial["Results"] = fieldResults
	var fieldVariables []byte
	fieldVariables, err = r._marshalJSONmapLb_string_bLschema_Schema(x.Variables)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name Variables; %w", err)
	}
	partial["Variables"] = fieldVariables
	var fieldExecutedSteps []byte
	fieldExecutedSteps, err = r._marshalJSONSlicestring(x.ExecutedSteps)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name ExecutedSteps; %w", err)
	}
	partial["ExecutedSteps"] = fieldExecutedSteps
	var fieldSkippedSteps []byte
	fieldSkippedSteps, err = r._marshalJSONSlicestring(x.SkippedSteps)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: field name SkippedSteps; %w", err)
	}
	partial["SkippedSteps"] = fieldSkippedSteps
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONExecutionPlan: struct; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONSlicePlanStep(x []PlanStep) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONPlanStep(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONSlicePlanStep: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONSlicePlanStep:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONPlanStep(x PlanStep) ([]byte, error) {
	result, err := shared.JSONMarshal[PlanStep](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONPlanStep:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONSlicestring(x []string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONSlicestring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONSlicestring:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONmapLb_string_bLbool(x map[string]bool) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONbool(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONmapLb_string_bLbool: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONmapLb_string_bLbool:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONmapLb_string_bLschema_Schema(x map[string]schema.Schema) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONmapLb_string_bLschema_Schema: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONmapLb_string_bLschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExecutionPlan(data)
	if err != nil {
		return fmt.Errorf("workflow: ExecutionPlan.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ExecutionPlan) _unmarshalJSONExecutionPlan(data []byte) (ExecutionPlan, error) {
	result := ExecutionPlan{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: native struct unwrap; %w", err)
	}
	if fieldSteps, ok := partial["Steps"]; ok {
		result.Steps, err = r._unmarshalJSONSlicePlanStep(fieldSteps)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field Steps; %w", err)
		}
	}
	if fieldQueue, ok := partial["Queue"]; ok {
		result.Queue, err = r._unmarshalJSONSlicestring(fieldQueue)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field Queue; %w", err)
		}
	}
	if fieldCompleted, ok := partial["Completed"]; ok {
		result.Completed, err = r._unmarshalJSONmapLb_string_bLbool(fieldCompleted)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field Completed; %w", err)
		}
	}
	if fieldResults, ok := partial["Results"]; ok {
		result.Results, err = r._unmarshalJSONmapLb_string_bLschema_Schema(fieldResults)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field Results; %w", err)
		}
	}
	if fieldVariables, ok := partial["Variables"]; ok {
		result.Variables, err = r._unmarshalJSONmapLb_string_bLschema_Schema(fieldVariables)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field Variables; %w", err)
		}
	}
	if fieldExecutedSteps, ok := partial["ExecutedSteps"]; ok {
		result.ExecutedSteps, err = r._unmarshalJSONSlicestring(fieldExecutedSteps)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field ExecutedSteps; %w", err)
		}
	}
	if fieldSkippedSteps, ok := partial["SkippedSteps"]; ok {
		result.SkippedSteps, err = r._unmarshalJSONSlicestring(fieldSkippedSteps)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONExecutionPlan: field SkippedSteps; %w", err)
		}
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONSlicePlanStep(data []byte) ([]PlanStep, error) {
	result := make([]PlanStep, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONSlicePlanStep: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONPlanStep(v)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONSlicePlanStep: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONPlanStep(data []byte) (PlanStep, error) {
	result, err := shared.JSONUnmarshal[PlanStep](data)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONPlanStep: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONSlicestring(data []byte) ([]string, error) {
	result := make([]string, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONSlicestring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONSlicestring: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONmapLb_string_bLbool(data []byte) (map[string]bool, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONmapLb_string_bLbool: native map unwrap; %w", err)
	}
	result := make(map[string]bool)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONbool(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONmapLb_string_bLbool: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONmapLb_string_bLschema_Schema(data []byte) (map[string]schema.Schema, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONmapLb_string_bLschema_Schema: native map unwrap; %w", err)
	}
	result := make(map[string]schema.Schema)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONmapLb_string_bLschema_Schema: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *ExecutionPlan) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("workflow: ExecutionPlan._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*stepResult)(nil)
	_ json.Marshaler   = (*stepResult)(nil)
)

func (r *stepResult) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONstepResult(*r)
}
func (r *stepResult) _marshalJSONstepResult(x stepResult) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("workflow: stepResult._marshalJSONstepResult: struct; %w", err)
	}
	return result, nil
}
func (r *stepResult) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONstepResult(data)
	if err != nil {
		return fmt.Errorf("workflow: stepResult.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *stepResult) _unmarshalJSONstepResult(data []byte) (stepResult, error) {
	result := stepResult{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("workflow: stepResult._unmarshalJSONstepResult: native struct unwrap; %w", err)
	}
	return result, nil
}
