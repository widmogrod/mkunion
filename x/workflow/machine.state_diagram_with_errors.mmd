stateDiagram
	workflow_Await: *workflow.Await
	workflow_Done: *workflow.Done
	workflow_Error: *workflow.Error
	workflow_ScheduleStopped: *workflow.ScheduleStopped
	workflow_Scheduled: *workflow.Scheduled

	%% error=callback expired 
	workflow_Await --> workflow_Await: ❌*workflow.Callback
	%% error=callback not match 
	workflow_Await --> workflow_Await: ❌*workflow.Callback
	workflow_Await --> workflow_Done: *workflow.Callback
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.Callback
	%% error=invalid state transition 
	workflow_Error --> workflow_Error: ❌*workflow.Callback
	%% error=invalid state transition 
	workflow_ScheduleStopped --> workflow_ScheduleStopped: ❌*workflow.Callback
	%% error=invalid state transition 
	workflow_Scheduled --> workflow_Scheduled: ❌*workflow.Callback
	%% error=invalid state transition 
	[*] --> [*]: ❌*workflow.Callback
	%% error=cannot expire async, timeout valid 
	workflow_Await --> workflow_Await: ❌*workflow.ExpireAsync
	workflow_Await --> workflow_Error: *workflow.ExpireAsync
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.ExpireAsync
	%% error=invalid state transition 
	workflow_Error --> workflow_Error: ❌*workflow.ExpireAsync
	%% error=invalid state transition 
	workflow_ScheduleStopped --> workflow_ScheduleStopped: ❌*workflow.ExpireAsync
	%% error=invalid state transition 
	workflow_Scheduled --> workflow_Scheduled: ❌*workflow.ExpireAsync
	%% error=invalid state transition 
	[*] --> [*]: ❌*workflow.ExpireAsync
	%% error=invalid state transition 
	workflow_Await --> workflow_Await: ❌*workflow.ResumeSchedule
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.ResumeSchedule
	%% error=invalid state transition 
	workflow_Error --> workflow_Error: ❌*workflow.ResumeSchedule
	workflow_ScheduleStopped --> workflow_Scheduled: *workflow.ResumeSchedule
	%% error=invalid state transition 
	workflow_Scheduled --> workflow_Scheduled: ❌*workflow.ResumeSchedule
	%% error=invalid state transition 
	[*] --> [*]: ❌*workflow.ResumeSchedule
	%% error=invalid state transition 
	workflow_Await --> workflow_Await: ❌*workflow.Run
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.Run
	%% error=invalid state transition 
	workflow_Error --> workflow_Error: ❌*workflow.Run
	%% error=invalid state transition 
	workflow_ScheduleStopped --> workflow_ScheduleStopped: ❌*workflow.Run
	workflow_Scheduled --> workflow_Done: *workflow.Run
	[*] --> workflow_Await: *workflow.Run
	[*] --> workflow_Done: *workflow.Run
	[*] --> workflow_Error: *workflow.Run
	[*] --> workflow_Scheduled: *workflow.Run
	%% error=failed to find workflow hello_world_flow_non_existing: flow hello_world_flow_non_existing not found; flow not found 
	[*] --> [*]: ❌*workflow.Run
	%% error=invalid state transition 
	workflow_Await --> workflow_Await: ❌*workflow.StopSchedule
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.StopSchedule
	%% error=invalid state transition 
	workflow_Error --> workflow_Error: ❌*workflow.StopSchedule
	%% error=invalid state transition 
	workflow_ScheduleStopped --> workflow_ScheduleStopped: ❌*workflow.StopSchedule
	workflow_Scheduled --> workflow_ScheduleStopped: *workflow.StopSchedule
	%% error=invalid state transition 
	[*] --> [*]: ❌*workflow.StopSchedule
	%% error=invalid state transition 
	workflow_Await --> workflow_Await: ❌*workflow.TryRecover
	%% error=cannot apply commands, when workflow is completed 
	workflow_Done --> workflow_Done: ❌*workflow.TryRecover
	workflow_Error --> workflow_Done: *workflow.TryRecover
	workflow_Error --> workflow_Error: *workflow.TryRecover
	%% error=max retries reached 
	workflow_Error --> workflow_Error: ❌*workflow.TryRecover
	%% error=invalid state transition 
	workflow_ScheduleStopped --> workflow_ScheduleStopped: ❌*workflow.TryRecover
	%% error=invalid state transition 
	workflow_Scheduled --> workflow_Scheduled: ❌*workflow.TryRecover
	%% error=invalid state transition 
	[*] --> [*]: ❌*workflow.TryRecover
