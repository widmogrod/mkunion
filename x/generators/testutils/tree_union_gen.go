// Code generated by mkunion. DO NOT EDIT.
package testutils

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
	"time"
)

type ForestVisitor interface {
	VisitTree2(v *Tree2) any
	VisitLeaf2(v *Leaf2) any
}

type Forest interface {
	AcceptForest(g ForestVisitor) any
}

var (
	_ Forest = (*Tree2)(nil)
	_ Forest = (*Leaf2)(nil)
)

func (r *Tree2) AcceptForest(v ForestVisitor) any { return v.VisitTree2(r) }
func (r *Leaf2) AcceptForest(v ForestVisitor) any { return v.VisitLeaf2(r) }

func MatchForestR3[T0, T1, T2 any](
	x Forest,
	f1 func(x *Tree2) (T0, T1, T2),
	f2 func(x *Leaf2) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Tree2:
		return f1(v)
	case *Leaf2:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchForestR2[T0, T1 any](
	x Forest,
	f1 func(x *Tree2) (T0, T1),
	f2 func(x *Leaf2) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Tree2:
		return f1(v)
	case *Leaf2:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchForestR1[T0 any](
	x Forest,
	f1 func(x *Tree2) T0,
	f2 func(x *Leaf2) T0,
) T0 {
	switch v := x.(type) {
	case *Tree2:
		return f1(v)
	case *Leaf2:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchForestR0(
	x Forest,
	f1 func(x *Tree2),
	f2 func(x *Leaf2),
) {
	switch v := x.(type) {
	case *Tree2:
		f1(v)
	case *Leaf2:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Forest", ForestFromJSON, ForestToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Leaf2", Leaf2FromJSON, Leaf2ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Tree2", Tree2FromJSON, Tree2ToJSON)
}

type ForestUnionJSON struct {
	Type  string          `json:"$type,omitempty"`
	Tree2 json.RawMessage `json:"testutils.Tree2,omitempty"`
	Leaf2 json.RawMessage `json:"testutils.Leaf2,omitempty"`
}

func ForestFromJSON(x []byte) (Forest, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data ForestUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testutils.ForestFromJSON: %w", err)
	}

	switch data.Type {
	case "testutils.Tree2":
		return Tree2FromJSON(data.Tree2)
	case "testutils.Leaf2":
		return Leaf2FromJSON(data.Leaf2)
	}

	if data.Tree2 != nil {
		return Tree2FromJSON(data.Tree2)
	} else if data.Leaf2 != nil {
		return Leaf2FromJSON(data.Leaf2)
	}
	return nil, fmt.Errorf("testutils.ForestFromJSON: unknown type: %s", data.Type)
}

func ForestToJSON(x Forest) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchForestR2(
		x,
		func(y *Tree2) ([]byte, error) {
			body, err := Tree2ToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.ForestToJSON: %w", err)
			}
			return json.Marshal(ForestUnionJSON{
				Type:  "testutils.Tree2",
				Tree2: body,
			})
		},
		func(y *Leaf2) ([]byte, error) {
			body, err := Leaf2ToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.ForestToJSON: %w", err)
			}
			return json.Marshal(ForestUnionJSON{
				Type:  "testutils.Leaf2",
				Leaf2: body,
			})
		},
	)
}

func Tree2FromJSON(x []byte) (*Tree2, error) {
	result := new(Tree2)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.Tree2FromJSON: %w", err)
	}
	return result, nil
}

func Tree2ToJSON(x *Tree2) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Tree2)(nil)
	_ json.Marshaler   = (*Tree2)(nil)
)

func Leaf2FromJSON(x []byte) (*Leaf2, error) {
	result := new(Leaf2)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.Leaf2FromJSON: %w", err)
	}
	return result, nil
}

func Leaf2ToJSON(x *Leaf2) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Leaf2)(nil)
	_ json.Marshaler   = (*Leaf2)(nil)
)

type TreeVisitor interface {
	VisitBranch(v *Branch) any
	VisitLeaf(v *Leaf) any
	VisitK(v *K) any
	VisitP(v *P) any
	VisitMa(v *Ma) any
	VisitLa(v *La) any
	VisitKa(v *Ka) any
}

type Tree interface {
	AcceptTree(g TreeVisitor) any
}

var (
	_ Tree = (*Branch)(nil)
	_ Tree = (*Leaf)(nil)
	_ Tree = (*K)(nil)
	_ Tree = (*P)(nil)
	_ Tree = (*Ma)(nil)
	_ Tree = (*La)(nil)
	_ Tree = (*Ka)(nil)
)

func (r *Branch) AcceptTree(v TreeVisitor) any { return v.VisitBranch(r) }
func (r *Leaf) AcceptTree(v TreeVisitor) any   { return v.VisitLeaf(r) }
func (r *K) AcceptTree(v TreeVisitor) any      { return v.VisitK(r) }
func (r *P) AcceptTree(v TreeVisitor) any      { return v.VisitP(r) }
func (r *Ma) AcceptTree(v TreeVisitor) any     { return v.VisitMa(r) }
func (r *La) AcceptTree(v TreeVisitor) any     { return v.VisitLa(r) }
func (r *Ka) AcceptTree(v TreeVisitor) any     { return v.VisitKa(r) }

func MatchTreeR3[T0, T1, T2 any](
	x Tree,
	f1 func(x *Branch) (T0, T1, T2),
	f2 func(x *Leaf) (T0, T1, T2),
	f3 func(x *K) (T0, T1, T2),
	f4 func(x *P) (T0, T1, T2),
	f5 func(x *Ma) (T0, T1, T2),
	f6 func(x *La) (T0, T1, T2),
	f7 func(x *Ka) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Branch:
		return f1(v)
	case *Leaf:
		return f2(v)
	case *K:
		return f3(v)
	case *P:
		return f4(v)
	case *Ma:
		return f5(v)
	case *La:
		return f6(v)
	case *Ka:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTreeR2[T0, T1 any](
	x Tree,
	f1 func(x *Branch) (T0, T1),
	f2 func(x *Leaf) (T0, T1),
	f3 func(x *K) (T0, T1),
	f4 func(x *P) (T0, T1),
	f5 func(x *Ma) (T0, T1),
	f6 func(x *La) (T0, T1),
	f7 func(x *Ka) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Branch:
		return f1(v)
	case *Leaf:
		return f2(v)
	case *K:
		return f3(v)
	case *P:
		return f4(v)
	case *Ma:
		return f5(v)
	case *La:
		return f6(v)
	case *Ka:
		return f7(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTreeR1[T0 any](
	x Tree,
	f1 func(x *Branch) T0,
	f2 func(x *Leaf) T0,
	f3 func(x *K) T0,
	f4 func(x *P) T0,
	f5 func(x *Ma) T0,
	f6 func(x *La) T0,
	f7 func(x *Ka) T0,
) T0 {
	switch v := x.(type) {
	case *Branch:
		return f1(v)
	case *Leaf:
		return f2(v)
	case *K:
		return f3(v)
	case *P:
		return f4(v)
	case *Ma:
		return f5(v)
	case *La:
		return f6(v)
	case *Ka:
		return f7(v)
	}
	var result1 T0
	return result1
}

func MatchTreeR0(
	x Tree,
	f1 func(x *Branch),
	f2 func(x *Leaf),
	f3 func(x *K),
	f4 func(x *P),
	f5 func(x *Ma),
	f6 func(x *La),
	f7 func(x *Ka),
) {
	switch v := x.(type) {
	case *Branch:
		f1(v)
	case *Leaf:
		f2(v)
	case *K:
		f3(v)
	case *P:
		f4(v)
	case *Ma:
		f5(v)
	case *La:
		f6(v)
	case *Ka:
		f7(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Branch", BranchFromJSON, BranchToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.K", KFromJSON, KToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Ka", KaFromJSON, KaToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.La", LaFromJSON, LaToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Leaf", LeafFromJSON, LeafToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Ma", MaFromJSON, MaToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.P", PFromJSON, PToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/generators/testutils.Tree", TreeFromJSON, TreeToJSON)
}

type TreeUnionJSON struct {
	Type   string          `json:"$type,omitempty"`
	Branch json.RawMessage `json:"testutils.Branch,omitempty"`
	Leaf   json.RawMessage `json:"testutils.Leaf,omitempty"`
	K      json.RawMessage `json:"testutils.K,omitempty"`
	P      json.RawMessage `json:"testutils.P,omitempty"`
	Ma     json.RawMessage `json:"testutils.Ma,omitempty"`
	La     json.RawMessage `json:"testutils.La,omitempty"`
	Ka     json.RawMessage `json:"testutils.Ka,omitempty"`
}

func TreeFromJSON(x []byte) (Tree, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TreeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testutils.TreeFromJSON: %w", err)
	}

	switch data.Type {
	case "testutils.Branch":
		return BranchFromJSON(data.Branch)
	case "testutils.Leaf":
		return LeafFromJSON(data.Leaf)
	case "testutils.K":
		return KFromJSON(data.K)
	case "testutils.P":
		return PFromJSON(data.P)
	case "testutils.Ma":
		return MaFromJSON(data.Ma)
	case "testutils.La":
		return LaFromJSON(data.La)
	case "testutils.Ka":
		return KaFromJSON(data.Ka)
	}

	if data.Branch != nil {
		return BranchFromJSON(data.Branch)
	} else if data.Leaf != nil {
		return LeafFromJSON(data.Leaf)
	} else if data.K != nil {
		return KFromJSON(data.K)
	} else if data.P != nil {
		return PFromJSON(data.P)
	} else if data.Ma != nil {
		return MaFromJSON(data.Ma)
	} else if data.La != nil {
		return LaFromJSON(data.La)
	} else if data.Ka != nil {
		return KaFromJSON(data.Ka)
	}
	return nil, fmt.Errorf("testutils.TreeFromJSON: unknown type: %s", data.Type)
}

func TreeToJSON(x Tree) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTreeR2(
		x,
		func(y *Branch) ([]byte, error) {
			body, err := BranchToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type:   "testutils.Branch",
				Branch: body,
			})
		},
		func(y *Leaf) ([]byte, error) {
			body, err := LeafToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Leaf",
				Leaf: body,
			})
		},
		func(y *K) ([]byte, error) {
			body, err := KToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.K",
				K:    body,
			})
		},
		func(y *P) ([]byte, error) {
			body, err := PToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.P",
				P:    body,
			})
		},
		func(y *Ma) ([]byte, error) {
			body, err := MaToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Ma",
				Ma:   body,
			})
		},
		func(y *La) ([]byte, error) {
			body, err := LaToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.La",
				La:   body,
			})
		},
		func(y *Ka) ([]byte, error) {
			body, err := KaToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutils.TreeToJSON: %w", err)
			}
			return json.Marshal(TreeUnionJSON{
				Type: "testutils.Ka",
				Ka:   body,
			})
		},
	)
}

func BranchFromJSON(x []byte) (*Branch, error) {
	result := new(Branch)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.BranchFromJSON: %w", err)
	}
	return result, nil
}

func BranchToJSON(x *Branch) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Branch)(nil)
	_ json.Marshaler   = (*Branch)(nil)
)

func (r *Branch) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONBranch(*r)
}
func (r *Branch) _marshalJSONBranch(x Branch) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldLit []byte
	fieldLit, err = r._marshalJSONTree(x.Lit)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name Lit; %w", err)
	}
	partial["Lit"] = fieldLit
	var fieldList []byte
	fieldList, err = r._marshalJSONSliceTree(x.List)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name List; %w", err)
	}
	partial["List"] = fieldList
	var fieldMap []byte
	fieldMap, err = r._marshalJSONmapLb_string_bLTree(x.Map)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name Map; %w", err)
	}
	partial["Map"] = fieldMap
	var fieldOf []byte
	fieldOf, err = r._marshalJSONPtrListOfLb_Tree_bL(x.Of)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name Of; %w", err)
	}
	if fieldOf != nil {
		partial["just_of"] = fieldOf
	}
	var fieldL []byte
	fieldL, err = r._marshalJSONPtrLeaf(x.L)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name L; %w", err)
	}
	if fieldL != nil {
		partial["L"] = fieldL
	}
	var fieldKattr []byte
	fieldKattr, err = r._marshalJSONLb_2_bLPtrLeaf(x.Kattr)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name Kattr; %w", err)
	}
	partial["Kattr"] = fieldKattr
	var fieldIntPtr []byte
	fieldIntPtr, err = r._marshalJSONPtrint64(x.IntPtr)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: field name IntPtr; %w", err)
	}
	if fieldIntPtr != nil {
		partial["IntPtr"] = fieldIntPtr
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONBranch: struct; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONTree(x Tree) ([]byte, error) {
	result, err := shared.JSONMarshal[Tree](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONTree:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONSliceTree(x []Tree) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Branch._marshalJSONSliceTree: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONSliceTree:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONmapLb_string_bLTree(x map[string]Tree) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Branch._marshalJSONmapLb_string_bLTree: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONmapLb_string_bLTree:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONPtrListOfLb_Tree_bL(x *ListOf[Tree]) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONListOfLb_Tree_bL(*x)
}
func (r *Branch) _marshalJSONListOfLb_Tree_bL(x ListOf[Tree]) ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf[Tree]](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONListOfLb_Tree_bL:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONPtrLeaf(x *Leaf) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONLeaf(*x)
}
func (r *Branch) _marshalJSONLeaf(x Leaf) ([]byte, error) {
	result, err := shared.JSONMarshal[Leaf](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONLeaf:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONLb_2_bLPtrLeaf(x [2]*Leaf) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONPtrLeaf(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Branch._marshalJSONLb_2_bLPtrLeaf: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONLb_2_bLPtrLeaf:; %w", err)
	}
	return result, nil
}
func (r *Branch) _marshalJSONPtrint64(x *int64) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONint64(*x)
}
func (r *Branch) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Branch) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONBranch(data)
	if err != nil {
		return fmt.Errorf("testutils: Branch.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Branch) _unmarshalJSONBranch(data []byte) (Branch, error) {
	result := Branch{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: native struct unwrap; %w", err)
	}
	if fieldLit, ok := partial["Lit"]; ok {
		result.Lit, err = r._unmarshalJSONTree(fieldLit)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field Lit; %w", err)
		}
	}
	if fieldList, ok := partial["List"]; ok {
		result.List, err = r._unmarshalJSONSliceTree(fieldList)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field List; %w", err)
		}
	}
	if fieldMap, ok := partial["Map"]; ok {
		result.Map, err = r._unmarshalJSONmapLb_string_bLTree(fieldMap)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field Map; %w", err)
		}
	}
	if fieldOf, ok := partial["just_of"]; ok {
		result.Of, err = r._unmarshalJSONPtrListOfLb_Tree_bL(fieldOf)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field Of; %w", err)
		}
	}
	if fieldL, ok := partial["L"]; ok {
		result.L, err = r._unmarshalJSONPtrLeaf(fieldL)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field L; %w", err)
		}
	}
	if fieldKattr, ok := partial["Kattr"]; ok {
		result.Kattr, err = r._unmarshalJSONLb_2_bLPtrLeaf(fieldKattr)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field Kattr; %w", err)
		}
	}
	if fieldIntPtr, ok := partial["IntPtr"]; ok {
		result.IntPtr, err = r._unmarshalJSONPtrint64(fieldIntPtr)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONBranch: field IntPtr; %w", err)
		}
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONTree(data []byte) (Tree, error) {
	result, err := shared.JSONUnmarshal[Tree](data)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONTree: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONSliceTree(data []byte) ([]Tree, error) {
	result := make([]Tree, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONSliceTree: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONTree(v)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONSliceTree: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONmapLb_string_bLTree(data []byte) (map[string]Tree, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._unmarshalJSONmapLb_string_bLTree: native map unwrap; %w", err)
	}
	result := make(map[string]Tree)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Branch._unmarshalJSONmapLb_string_bLTree: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONPtrListOfLb_Tree_bL(data []byte) (*ListOf[Tree], error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONListOfLb_Tree_bL(data)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._unmarshalJSONPtrListOfLb_Tree_bL: pointer; %w", err)
	}
	return &result, nil
}
func (r *Branch) _unmarshalJSONListOfLb_Tree_bL(data []byte) (ListOf[Tree], error) {
	result, err := shared.JSONUnmarshal[ListOf[Tree]](data)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONListOfLb_Tree_bL: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONPtrLeaf(data []byte) (*Leaf, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONLeaf(data)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._unmarshalJSONPtrLeaf: pointer; %w", err)
	}
	return &result, nil
}
func (r *Branch) _unmarshalJSONLeaf(data []byte) (Leaf, error) {
	result, err := shared.JSONUnmarshal[Leaf](data)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONLeaf: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONLb_2_bLPtrLeaf(data []byte) ([2]*Leaf, error) {
	result := [2]*Leaf{}
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONLb_2_bLPtrLeaf: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONPtrLeaf(v)
		if err != nil {
			return result, fmt.Errorf("testutils: Branch._unmarshalJSONLb_2_bLPtrLeaf: at index %d; %w", i, err)
		}
		result[i] = item
	}
	return result, nil
}
func (r *Branch) _unmarshalJSONPtrint64(data []byte) (*int64, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONint64(data)
	if err != nil {
		return nil, fmt.Errorf("testutils: Branch._unmarshalJSONPtrint64: pointer; %w", err)
	}
	return &result, nil
}
func (r *Branch) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: Branch._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func LeafFromJSON(x []byte) (*Leaf, error) {
	result := new(Leaf)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.LeafFromJSON: %w", err)
	}
	return result, nil
}

func LeafToJSON(x *Leaf) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Leaf)(nil)
	_ json.Marshaler   = (*Leaf)(nil)
)

func (r *Leaf) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONLeaf(*r)
}
func (r *Leaf) _marshalJSONLeaf(x Leaf) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldValue []byte
	fieldValue, err = r._marshalJSONint64(x.Value)
	if err != nil {
		return nil, fmt.Errorf("testutils: Leaf._marshalJSONLeaf: field name Value; %w", err)
	}
	partial["Value"] = fieldValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Leaf._marshalJSONLeaf: struct; %w", err)
	}
	return result, nil
}
func (r *Leaf) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Leaf._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Leaf) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONLeaf(data)
	if err != nil {
		return fmt.Errorf("testutils: Leaf.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Leaf) _unmarshalJSONLeaf(data []byte) (Leaf, error) {
	result := Leaf{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: Leaf._unmarshalJSONLeaf: native struct unwrap; %w", err)
	}
	if fieldValue, ok := partial["Value"]; ok {
		result.Value, err = r._unmarshalJSONint64(fieldValue)
		if err != nil {
			return result, fmt.Errorf("testutils: Leaf._unmarshalJSONLeaf: field Value; %w", err)
		}
	}
	return result, nil
}
func (r *Leaf) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: Leaf._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func KFromJSON(x []byte) (*K, error) {
	result := new(K)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.KFromJSON: %w", err)
	}
	return result, nil
}

func KToJSON(x *K) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*K)(nil)
	_ json.Marshaler   = (*K)(nil)
)

func (r *K) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONK(*r)
}
func (r *K) _marshalJSONK(x K) ([]byte, error) {
	return r._marshalJSONstring(string(x))
}
func (r *K) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: K._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *K) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONK(data)
	if err != nil {
		return fmt.Errorf("testutils: K.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *K) _unmarshalJSONK(data []byte) (K, error) {
	var result K
	intermidiary, err := r._unmarshalJSONstring(data)
	if err != nil {
		return result, fmt.Errorf("testutils: K._unmarshalJSONK: alias; %w", err)
	}
	result = K(intermidiary)
	return result, nil
}
func (r *K) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: K._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func PFromJSON(x []byte) (*P, error) {
	result := new(P)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.PFromJSON: %w", err)
	}
	return result, nil
}

func PToJSON(x *P) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*P)(nil)
	_ json.Marshaler   = (*P)(nil)
)

func (r *P) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONP(*r)
}
func (r *P) _marshalJSONP(x P) ([]byte, error) {
	return r._marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]](x))
}
func (r *P) _marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(x ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]) ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: P._marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL:; %w", err)
	}
	return result, nil
}
func (r *P) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONP(data)
	if err != nil {
		return fmt.Errorf("testutils: P.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *P) _unmarshalJSONP(data []byte) (P, error) {
	var result P
	intermidiary, err := r._unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(data)
	if err != nil {
		return result, fmt.Errorf("testutils: P._unmarshalJSONP: alias; %w", err)
	}
	result = P(intermidiary)
	return result, nil
}
func (r *P) _unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(data []byte) (ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]], error) {
	result, err := shared.JSONUnmarshal[ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]](data)
	if err != nil {
		return result, fmt.Errorf("testutils: P._unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL: native ref unwrap; %w", err)
	}
	return result, nil
}

func MaFromJSON(x []byte) (*Ma, error) {
	result := new(Ma)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.MaFromJSON: %w", err)
	}
	return result, nil
}

func MaToJSON(x *Ma) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Ma)(nil)
	_ json.Marshaler   = (*Ma)(nil)
)

func (r *Ma) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMa(*r)
}
func (r *Ma) _marshalJSONMa(x Ma) ([]byte, error) {
	return r._marshalJSONmapLb_string_bLTree(map[string]Tree(x))
}
func (r *Ma) _marshalJSONmapLb_string_bLTree(x map[string]Tree) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Ma._marshalJSONmapLb_string_bLTree: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ma._marshalJSONmapLb_string_bLTree:; %w", err)
	}
	return result, nil
}
func (r *Ma) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ma._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Ma) _marshalJSONTree(x Tree) ([]byte, error) {
	result, err := shared.JSONMarshal[Tree](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ma._marshalJSONTree:; %w", err)
	}
	return result, nil
}
func (r *Ma) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMa(data)
	if err != nil {
		return fmt.Errorf("testutils: Ma.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Ma) _unmarshalJSONMa(data []byte) (Ma, error) {
	var result Ma
	intermidiary, err := r._unmarshalJSONmapLb_string_bLTree(data)
	if err != nil {
		return result, fmt.Errorf("testutils: Ma._unmarshalJSONMa: alias; %w", err)
	}
	result = Ma(intermidiary)
	return result, nil
}
func (r *Ma) _unmarshalJSONmapLb_string_bLTree(data []byte) (map[string]Tree, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ma._unmarshalJSONmapLb_string_bLTree: native map unwrap; %w", err)
	}
	result := make(map[string]Tree)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Ma._unmarshalJSONmapLb_string_bLTree: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *Ma) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: Ma._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Ma) _unmarshalJSONTree(data []byte) (Tree, error) {
	result, err := shared.JSONUnmarshal[Tree](data)
	if err != nil {
		return result, fmt.Errorf("testutils: Ma._unmarshalJSONTree: native ref unwrap; %w", err)
	}
	return result, nil
}

func LaFromJSON(x []byte) (*La, error) {
	result := new(La)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.LaFromJSON: %w", err)
	}
	return result, nil
}

func LaToJSON(x *La) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*La)(nil)
	_ json.Marshaler   = (*La)(nil)
)

func (r *La) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONLa(*r)
}
func (r *La) _marshalJSONLa(x La) ([]byte, error) {
	return r._marshalJSONSliceTree([]Tree(x))
}
func (r *La) _marshalJSONSliceTree(x []Tree) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: La._marshalJSONSliceTree: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: La._marshalJSONSliceTree:; %w", err)
	}
	return result, nil
}
func (r *La) _marshalJSONTree(x Tree) ([]byte, error) {
	result, err := shared.JSONMarshal[Tree](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: La._marshalJSONTree:; %w", err)
	}
	return result, nil
}
func (r *La) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONLa(data)
	if err != nil {
		return fmt.Errorf("testutils: La.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *La) _unmarshalJSONLa(data []byte) (La, error) {
	var result La
	intermidiary, err := r._unmarshalJSONSliceTree(data)
	if err != nil {
		return result, fmt.Errorf("testutils: La._unmarshalJSONLa: alias; %w", err)
	}
	result = La(intermidiary)
	return result, nil
}
func (r *La) _unmarshalJSONSliceTree(data []byte) ([]Tree, error) {
	result := make([]Tree, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: La._unmarshalJSONSliceTree: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONTree(v)
		if err != nil {
			return result, fmt.Errorf("testutils: La._unmarshalJSONSliceTree: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *La) _unmarshalJSONTree(data []byte) (Tree, error) {
	result, err := shared.JSONUnmarshal[Tree](data)
	if err != nil {
		return result, fmt.Errorf("testutils: La._unmarshalJSONTree: native ref unwrap; %w", err)
	}
	return result, nil
}

func KaFromJSON(x []byte) (*Ka, error) {
	result := new(Ka)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutils.KaFromJSON: %w", err)
	}
	return result, nil
}

func KaToJSON(x *Ka) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Ka)(nil)
	_ json.Marshaler   = (*Ka)(nil)
)

func (r *Ka) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONKa(*r)
}
func (r *Ka) _marshalJSONKa(x Ka) ([]byte, error) {
	return r._marshalJSONSlicemapLb_string_bLTree([]map[string]Tree(x))
}
func (r *Ka) _marshalJSONSlicemapLb_string_bLTree(x []map[string]Tree) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONmapLb_string_bLTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Ka._marshalJSONSlicemapLb_string_bLTree: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ka._marshalJSONSlicemapLb_string_bLTree:; %w", err)
	}
	return result, nil
}
func (r *Ka) _marshalJSONmapLb_string_bLTree(x map[string]Tree) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Ka._marshalJSONmapLb_string_bLTree: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ka._marshalJSONmapLb_string_bLTree:; %w", err)
	}
	return result, nil
}
func (r *Ka) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ka._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Ka) _marshalJSONTree(x Tree) ([]byte, error) {
	result, err := shared.JSONMarshal[Tree](x)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ka._marshalJSONTree:; %w", err)
	}
	return result, nil
}
func (r *Ka) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONKa(data)
	if err != nil {
		return fmt.Errorf("testutils: Ka.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Ka) _unmarshalJSONKa(data []byte) (Ka, error) {
	var result Ka
	intermidiary, err := r._unmarshalJSONSlicemapLb_string_bLTree(data)
	if err != nil {
		return result, fmt.Errorf("testutils: Ka._unmarshalJSONKa: alias; %w", err)
	}
	result = Ka(intermidiary)
	return result, nil
}
func (r *Ka) _unmarshalJSONSlicemapLb_string_bLTree(data []byte) ([]map[string]Tree, error) {
	result := make([]map[string]Tree, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutils: Ka._unmarshalJSONSlicemapLb_string_bLTree: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONmapLb_string_bLTree(v)
		if err != nil {
			return result, fmt.Errorf("testutils: Ka._unmarshalJSONSlicemapLb_string_bLTree: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *Ka) _unmarshalJSONmapLb_string_bLTree(data []byte) (map[string]Tree, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("testutils: Ka._unmarshalJSONmapLb_string_bLTree: native map unwrap; %w", err)
	}
	result := make(map[string]Tree)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONTree(v)
		if err != nil {
			return nil, fmt.Errorf("testutils: Ka._unmarshalJSONmapLb_string_bLTree: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *Ka) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutils: Ka._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Ka) _unmarshalJSONTree(data []byte) (Tree, error) {
	result, err := shared.JSONUnmarshal[Tree](data)
	if err != nil {
		return result, fmt.Errorf("testutils: Ka._unmarshalJSONTree: native ref unwrap; %w", err)
	}
	return result, nil
}
