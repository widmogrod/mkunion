// Code generated by mkunion. DO NOT EDIT.
package testutils

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(ItemShape())
	shape.Register(OtherShape())
	shape.Register(RecordShape())
	shape.Register(SomeShape())
}

//shape:shape

func RecordShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Record",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Variant: []shape.Shape{
			ItemShape(),
			OtherShape(),
		},
	}
}

func ItemShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Item",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Key",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "A",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Record",
			},
		},
	}
}

func OtherShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Other",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "A",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Record",
			},
		},
		Type: &shape.RefName{
			Name:          "Some",
			PkgName:       "testutils",
			PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "A",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
				},
			},
		},
	}
}

//shape:shape
func SomeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Some",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "B",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "ValueOf",
				Type: &shape.RefName{
					Name:          "B",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
	}
}
