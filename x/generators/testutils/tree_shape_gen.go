// Code generated by mkunion. DO NOT EDIT.
package testutils

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(BranchShape())
	shape.Register(ForestShape())
	shape.Register(KShape())
	shape.Register(KaShape())
	shape.Register(LaShape())
	shape.Register(Leaf2Shape())
	shape.Register(LeafShape())
	shape.Register(ListOf2Shape())
	shape.Register(ListOfAliasAnyShape())
	shape.Register(ListOfShape())
	shape.Register(MaShape())
	shape.Register(PShape())
	shape.Register(Tree2Shape())
	shape.Register(TreeShape())
}

//shape:shape

func ForestShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Forest",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Variant: []shape.Shape{
			Tree2Shape(),
			Leaf2Shape(),
		},
	}
}

func Tree2Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Tree2",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Forest",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "Branch",
			PkgName:       "testutils",
			PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		},
	}
}

func Leaf2Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Leaf2",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Forest",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "Leaf",
			PkgName:       "testutils",
			PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		},
	}
}

//shape:shape

func TreeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Tree",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Variant: []shape.Shape{
			BranchShape(),
			LeafShape(),
			KShape(),
			PShape(),
			MaShape(),
			LaShape(),
			KaShape(),
		},
	}
}

func BranchShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Branch",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Fields: []*shape.FieldLike{
			{
				Name: "Lit",
				Type: &shape.RefName{
					Name:          "Tree",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
				},
			},
			{
				Name: "List",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Tree",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
					},
				},
			},
			{
				Name: "Map",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "Tree",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
					},
				},
			},
			{
				Name: "Of",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ListOf",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "Tree",
								PkgName:       "testutils",
								PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
							},
						},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "just_of",
					},
				},
			},
			{
				Name: "L",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Leaf",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
					},
				},
			},
			{
				Name: "Kattr",
				Type: &shape.ListLike{
					Element: &shape.PointerLike{
						Type: &shape.RefName{
							Name:          "Leaf",
							PkgName:       "testutils",
							PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
						},
					},
					ArrayLen: shape.Ptr(2),
				},
			},
			{
				Name: "IntPtr",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Int64{},
						},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
	}
}

func LeafShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Leaf",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
	}
}

func KShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "K",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
		Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

func PShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "P",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
		Type: &shape.RefName{
			Name:          "ListOf2",
			PkgName:       "testutils",
			PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "ListOf",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
					Indexed: []shape.Shape{
						&shape.Any{},
					},
				},
				&shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ListOf2",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
						Indexed: []shape.Shape{
							&shape.PrimitiveLike{
								Kind: &shape.NumberLike{
									Kind: &shape.Int64{},
								},
							},
							&shape.PointerLike{
								Type: &shape.RefName{
									Name:          "Duration",
									PkgName:       "time",
									PkgImportName: "time",
								},
							},
						},
					},
				},
			},
		},
	}
}

func MaShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Ma",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
		Type: &shape.MapLike{
			Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			Val: &shape.RefName{
				Name:          "Tree",
				PkgName:       "testutils",
				PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
			},
		},
	}
}

func LaShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "La",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
		Type: &shape.ListLike{
			Element: &shape.RefName{
				Name:          "Tree",
				PkgName:       "testutils",
				PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
			},
		},
	}
}

func KaShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Ka",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Tree",
			},
		},
		Type: &shape.ListLike{
			Element: &shape.MapLike{
				Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Val: &shape.RefName{
					Name:          "Tree",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
				},
			},
		},
	}
}

//shape:shape
func ListOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ListOf",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "T",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func ListOf2Shape() shape.Shape {
	return &shape.StructLike{
		Name:          "ListOf2",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T1",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "T2",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "T1",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "List",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "T2",
						PkgName:       "",
						PkgImportName: "",
					},
				},
			},
			{
				Name: "Map",
				Type: &shape.MapLike{
					Key: &shape.RefName{
						Name:          "T1",
						PkgName:       "",
						PkgImportName: "",
					},
					Val: &shape.RefName{
						Name:          "T2",
						PkgName:       "",
						PkgImportName: "",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "map_of_tree",
					},
				},
			},
			{
				Name: "ListOf",
				Type: &shape.RefName{
					Name:          "ListOf",
					PkgName:       "testutils",
					PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
					Indexed: []shape.Shape{
						&shape.RefName{
							Name:          "T1",
							PkgName:       "",
							PkgImportName: "",
						},
					},
				},
			},
			{
				Name: "ListOfPtr",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ListOf",
						PkgName:       "testutils",
						PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "T2",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
			},
			{
				Name: "Time",
				Type: &shape.RefName{
					Name:          "Time",
					PkgName:       "time",
					PkgImportName: "time",
				},
			},
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func ListOfAliasAnyShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ListOfAliasAny",
		PkgName:       "testutils",
		PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "ListOf",
			PkgName:       "testutils",
			PkgImportName: "github.com/widmogrod/mkunion/x/generators/testutils",
			Indexed: []shape.Shape{
				&shape.Any{},
			},
		},
	}
}
