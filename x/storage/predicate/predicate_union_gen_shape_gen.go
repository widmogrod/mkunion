// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(BindableUnionJSONShape())
	shape.Register(PredicateUnionJSONShape())
}

//shape:shape
func BindableUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "BindableUnionJSON",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "BindValue",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.BindValue",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Literal",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.Literal",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Locatable",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.Locatable",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func PredicateUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "PredicateUnionJSON",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "And",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.And",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Or",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.Or",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Not",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.Not",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Compare",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "predicate.Compare",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
