// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AndShape())
	shape.Register(BindNameShape())
	shape.Register(BindValueShape())
	shape.Register(BindableShape())
	shape.Register(CompareShape())
	shape.Register(LiteralShape())
	shape.Register(LocatableShape())
	shape.Register(NotShape())
	shape.Register(OrShape())
	shape.Register(ParamBindsShape())
	shape.Register(PredicateShape())
}

//shape:shape

func BindableShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Bindable",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Variant: []shape.Shape{
			BindValueShape(),
			LiteralShape(),
			LocatableShape(),
		},
	}
}

func BindValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "BindValue",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "BindName",
				Type: &shape.RefName{
					Name:          "BindName",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Bindable",
			},
		},
	}
}

func LiteralShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Literal",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Bindable",
			},
		},
	}
}

func LocatableShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Locatable",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Location",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Bindable",
			},
		},
	}
}

//shape:shape
func BindNameShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "BindName",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape

func PredicateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Predicate",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Variant: []shape.Shape{
			AndShape(),
			OrShape(),
			NotShape(),
			CompareShape(),
		},
	}
}

func AndShape() shape.Shape {
	return &shape.StructLike{
		Name:          "And",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Predicate",
						PkgName:       "predicate",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func OrShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Or",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Predicate",
						PkgName:       "predicate",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func NotShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Not",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "P",
				Type: &shape.RefName{
					Name:          "Predicate",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

func CompareShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Compare",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Location",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Operation",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "BindValue",
				Type: &shape.RefName{
					Name:          "Bindable",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Predicate",
			},
		},
	}
}

//shape:shape
func ParamBindsShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ParamBinds",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
		Type: &shape.MapLike{
			Key: &shape.RefName{
				Name:          "BindName",
				PkgName:       "predicate",
				PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
			},
			Val: &shape.RefName{
				Name:          "Schema",
				PkgName:       "schema",
				PkgImportName: "github.com/widmogrod/mkunion/x/schema",
			},
		},
	}
}
