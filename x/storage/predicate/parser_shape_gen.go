// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(ComparableShape())
	shape.Register(ConditionShape())
	shape.Register(ExpressionShape())
	shape.Register(OrConditionShape())
	shape.Register(ValueShape())
}

//shape:shape
func ComparableShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Comparable",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Location",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"( @Location": {
						Value: "",
					},
				},
			},
			{
				Name: "Operator",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"@Operator": {
						Value: "",
					},
				},
			},
			{
				Name: "BindName",
				Type: &shape.RefName{
					Name:          "Value",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
				Tags: map[string]shape.Tag{
					"@@)": {
						Value: "",
					},
				},
			},
		},
	}
}

//shape:shape
func ValueShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Value",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "BindName",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Tags: map[string]shape.Tag{
					"(  @Bind": {
						Value: "",
					},
				},
			},
			{
				Name: "Number",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Float64{},
						},
					},
				},
				Tags: map[string]shape.Tag{
					"| @Number": {
						Value: "",
					},
				},
			},
			{
				Name: "String",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Tags: map[string]shape.Tag{
					"| @String": {
						Value: "",
					},
				},
			},
			{
				Name: "Bool",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Tags: map[string]shape.Tag{
					"| @(\"TRUE\" | \"FALSE\" | \"true\" | \"false\")": {
						Value: "",
					},
				},
			},
			{
				Name: "Location",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Tags: map[string]shape.Tag{
					"| @Location )": {
						Value: "",
					},
				},
			},
		},
	}
}

//shape:shape
func ConditionShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Condition",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Operand",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Comparable",
						PkgName:       "predicate",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
					},
				},
				Tags: map[string]shape.Tag{
					"@@": {
						Value: "",
					},
				},
			},
			{
				Name: "Not",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Condition",
						PkgName:       "predicate",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
					},
				},
				Tags: map[string]shape.Tag{
					"| \"NOT\" @@": {
						Value: "",
					},
				},
			},
		},
	}
}

//shape:shape
func ExpressionShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Expression",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Or",
				Type: &shape.ListLike{
					Element: &shape.PointerLike{
						Type: &shape.RefName{
							Name:          "OrCondition",
							PkgName:       "predicate",
							PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
						},
					},
				},
				Tags: map[string]shape.Tag{
					"@@ ( \"OR\" @@ )*": {
						Value: "",
					},
				},
			},
		},
	}
}

//shape:shape
func OrConditionShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrCondition",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "And",
				Type: &shape.ListLike{
					Element: &shape.PointerLike{
						Type: &shape.RefName{
							Name:          "Condition",
							PkgName:       "predicate",
							PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
						},
					},
				},
				Tags: map[string]shape.Tag{
					"@@ ( \"AND\" @@ )*": {
						Value: "",
					},
				},
			},
		},
	}
}
