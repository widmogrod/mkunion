// Code generated by mkunion. DO NOT EDIT.
package predicate

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(WhereOptShape())
	shape.Register(WherePredicatesShape())
}

//shape:shape
func WhereOptShape() shape.Shape {
	return &shape.StructLike{
		Name:          "WhereOpt",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "AllowExtraParams",
				Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
			},
			{
				Name: "WithShapeDef",
				Type: &shape.RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
	}
}

//shape:shape
func WherePredicatesShape() shape.Shape {
	return &shape.StructLike{
		Name:          "WherePredicates",
		PkgName:       "predicate",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
		Fields: []*shape.FieldLike{
			{
				Name: "Predicate",
				Type: &shape.RefName{
					Name:          "Predicate",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
			},
			{
				Name: "Params",
				Type: &shape.RefName{
					Name:          "ParamBinds",
					PkgName:       "predicate",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate",
				},
			},
			{
				Name: "Shape",
				Type: &shape.RefName{
					Name:          "Shape",
					PkgName:       "shape",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
