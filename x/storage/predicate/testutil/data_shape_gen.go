// Code generated by mkunion. DO NOT EDIT.
package testutil

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(BranchShape())
	shape.Register(LeafShape())
	shape.Register(SampleStructShape())
	shape.Register(TreeishShape())
}

//shape:shape

func TreeishShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Treeish",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
		Variant: []shape.Shape{
			BranchShape(),
			LeafShape(),
		},
	}
}

func BranchShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Branch",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Left",
				Type: &shape.RefName{
					Name:          "Treeish",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
				},
			},
			{
				Name: "Right",
				Type: &shape.RefName{
					Name:          "Treeish",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Treeish",
			},
		},
	}
}

func LeafShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Leaf",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Treeish",
			},
		},
	}
}

//shape:shape
func SampleStructShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SampleStruct",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Age",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
			{
				Name: "Friends",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "SampleStruct",
						PkgName:       "testutil",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
					},
				},
			},
			{
				Name: "Tree",
				Type: &shape.RefName{
					Name:          "Treeish",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/predicate/testutil",
				},
			},
			{
				Name: "Visible",
				Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
		},
	}
}
