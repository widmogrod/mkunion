// Code generated by mkunion. DO NOT EDIT.
package testutil

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*SampleStruct)(nil)
	_ json.Marshaler   = (*SampleStruct)(nil)
)

func (r *SampleStruct) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSampleStruct(*r)
}
func (r *SampleStruct) _marshalJSONSampleStruct(x SampleStruct) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	var fieldAge []byte
	fieldAge, err = r._marshalJSONint(x.Age)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: field name Age; %w", err)
	}
	partial["Age"] = fieldAge
	var fieldFriends []byte
	fieldFriends, err = r._marshalJSONSliceSampleStruct(x.Friends)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: field name Friends; %w", err)
	}
	partial["Friends"] = fieldFriends
	var fieldTree []byte
	fieldTree, err = r._marshalJSONTreeish(x.Tree)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: field name Tree; %w", err)
	}
	partial["Tree"] = fieldTree
	var fieldVisible []byte
	fieldVisible, err = r._marshalJSONbool(x.Visible)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: field name Visible; %w", err)
	}
	partial["Visible"] = fieldVisible
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSampleStruct: struct; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _marshalJSONSliceSampleStruct(x []SampleStruct) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONSampleStruct(v)
		if err != nil {
			return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSliceSampleStruct: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONSliceSampleStruct:; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _marshalJSONTreeish(x Treeish) ([]byte, error) {
	result, err := shared.JSONMarshal[Treeish](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONTreeish:; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: SampleStruct._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSampleStruct(data)
	if err != nil {
		return fmt.Errorf("testutil: SampleStruct.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *SampleStruct) _unmarshalJSONSampleStruct(data []byte) (SampleStruct, error) {
	result := SampleStruct{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: field ID; %w", err)
		}
	}
	if fieldAge, ok := partial["Age"]; ok {
		result.Age, err = r._unmarshalJSONint(fieldAge)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: field Age; %w", err)
		}
	}
	if fieldFriends, ok := partial["Friends"]; ok {
		result.Friends, err = r._unmarshalJSONSliceSampleStruct(fieldFriends)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: field Friends; %w", err)
		}
	}
	if fieldTree, ok := partial["Tree"]; ok {
		result.Tree, err = r._unmarshalJSONTreeish(fieldTree)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: field Tree; %w", err)
		}
	}
	if fieldVisible, ok := partial["Visible"]; ok {
		result.Visible, err = r._unmarshalJSONbool(fieldVisible)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSampleStruct: field Visible; %w", err)
		}
	}
	return result, nil
}
func (r *SampleStruct) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _unmarshalJSONSliceSampleStruct(data []byte) ([]SampleStruct, error) {
	result := make([]SampleStruct, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSliceSampleStruct: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONSampleStruct(v)
		if err != nil {
			return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONSliceSampleStruct: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *SampleStruct) _unmarshalJSONTreeish(data []byte) (Treeish, error) {
	result, err := shared.JSONUnmarshal[Treeish](data)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONTreeish: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *SampleStruct) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: SampleStruct._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}
