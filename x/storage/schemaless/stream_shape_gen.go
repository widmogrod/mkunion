// Code generated by mkunion. DO NOT EDIT.
package schemaless

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AppendLogShape())
	shape.Register(ChangeShape())
}

//shape:shape
func AppendLogShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AppendLog",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func ChangeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Change",
		PkgName:       "schemaless",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Before",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Record",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "T",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
			},
			{
				Name: "After",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Record",
						PkgName:       "schemaless",
						PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
						Indexed: []shape.Shape{
							&shape.RefName{
								Name:          "T",
								PkgName:       "",
								PkgImportName: "",
							},
						},
					},
				},
			},
			{
				Name: "Deleted",
				Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
			},
			{
				Name: "Offset",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
		},
	}
}
