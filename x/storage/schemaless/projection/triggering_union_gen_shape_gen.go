// Code generated by mkunion. DO NOT EDIT.
package projection

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(TriggerDescriptionUnionJSONShape())
	shape.Register(TriggerTypeUnionJSONShape())
	shape.Register(WindowFlushModeUnionJSONShape())
}

//shape:shape
func TriggerDescriptionUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TriggerDescriptionUnionJSON",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtPeriod",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtPeriod",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtWindowItemSize",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtWindowItemSize",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtWatermark",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtWatermark",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AnyOf",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AnyOf",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AllOf",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AllOf",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func TriggerTypeUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TriggerTypeUnionJSON",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtPeriod1",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtPeriod1",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtWindowItemSize1",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtWindowItemSize1",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AtWatermark1",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AtWatermark1",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func WindowFlushModeUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "WindowFlushModeUnionJSON",
		PkgName:       "projection",
		PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless/projection",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Accumulate",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.Accumulate",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Discard",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.Discard",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AccumulatingAndRetracting",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "projection.AccumulatingAndRetracting",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
