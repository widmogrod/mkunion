// Code generated by mkunion. DO NOT EDIT.
package schemaless

import (
	"container/list"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/kinesis"
	"github.com/aws/aws-sdk-go-v2/service/kinesis/types"
	"github.com/opensearch-project/opensearch-go/v2"
	"github.com/opensearch-project/opensearch-go/v2/opensearchapi"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
	"github.com/widmogrod/mkunion/x/storage/predicate"
	"testing"
)

func init() {
	shared.TypeRegistryStore[dynamodb.Client]("github.com/aws/aws-sdk-go-v2/service/dynamodb.Client")
	shared.TypeRegistryStore[kinesis.Client]("github.com/aws/aws-sdk-go-v2/service/kinesis.Client")
	shared.TypeRegistryStore[list.Element]("container/list.Element")
	shared.TypeRegistryStore[opensearch.Client]("github.com/opensearch-project/opensearch-go/v2.Client")
	shared.TypeRegistryStore[opensearchapi.IndexRequest]("github.com/opensearch-project/opensearch-go/v2/opensearchapi.IndexRequest")
	shared.TypeRegistryStore[opensearchapi.SearchRequest]("github.com/opensearch-project/opensearch-go/v2/opensearchapi.SearchRequest")
	shared.TypeRegistryStore[predicate.And]("github.com/widmogrod/mkunion/x/storage/predicate.And")
	shared.TypeRegistryStore[predicate.BindValue]("github.com/widmogrod/mkunion/x/storage/predicate.BindValue")
	shared.TypeRegistryStore[predicate.Compare]("github.com/widmogrod/mkunion/x/storage/predicate.Compare")
	shared.TypeRegistryStore[predicate.Literal]("github.com/widmogrod/mkunion/x/storage/predicate.Literal")
	shared.TypeRegistryStore[predicate.Locatable]("github.com/widmogrod/mkunion/x/storage/predicate.Locatable")
	shared.TypeRegistryStore[predicate.Not]("github.com/widmogrod/mkunion/x/storage/predicate.Not")
	shared.TypeRegistryStore[predicate.Or]("github.com/widmogrod/mkunion/x/storage/predicate.Or")
	shared.TypeRegistryStore[predicate.WherePredicates]("github.com/widmogrod/mkunion/x/storage/predicate.WherePredicates")
	shared.TypeRegistryStore[schema.LocationAnything]("github.com/widmogrod/mkunion/x/schema.LocationAnything")
	shared.TypeRegistryStore[schema.LocationField]("github.com/widmogrod/mkunion/x/schema.LocationField")
	shared.TypeRegistryStore[schema.LocationIndex]("github.com/widmogrod/mkunion/x/schema.LocationIndex")
	shared.TypeRegistryStore[Aggregator[any, any]]("github.com/widmogrod/mkunion/x/storage/schemaless.Aggregator[any,any]")
	shared.TypeRegistryStore[AppendLoger[any]]("github.com/widmogrod/mkunion/x/storage/schemaless.AppendLoger[any]")
	shared.TypeRegistryStore[Change[int]]("github.com/widmogrod/mkunion/x/storage/schemaless.Change[int]")
	shared.TypeRegistryStore[Change[schema.Schema]]("github.com/widmogrod/mkunion/x/storage/schemaless.Change[github.com/widmogrod/mkunion/x/schema.Schema]")
	shared.TypeRegistryStore[ExampleRecord]("github.com/widmogrod/mkunion/x/storage/schemaless.ExampleRecord")
	shared.TypeRegistryStore[FindingRecords[Record[ExampleRecord]]]("github.com/widmogrod/mkunion/x/storage/schemaless.FindingRecords[Record[ExampleRecord]]")
	shared.TypeRegistryStore[KinesisStream]("github.com/widmogrod/mkunion/x/storage/schemaless.KinesisStream")
	shared.TypeRegistryStore[Record[ExampleRecord]]("github.com/widmogrod/mkunion/x/storage/schemaless.Record[ExampleRecord]")
	shared.TypeRegistryStore[Record[int]]("github.com/widmogrod/mkunion/x/storage/schemaless.Record[int]")
	shared.TypeRegistryStore[Record[schema.Schema]]("github.com/widmogrod/mkunion/x/storage/schemaless.Record[github.com/widmogrod/mkunion/x/schema.Schema]")
	shared.TypeRegistryStore[Repository[any]]("github.com/widmogrod/mkunion/x/storage/schemaless.Repository[any]")
	shared.TypeRegistryStore[Repository[schema.Schema]]("github.com/widmogrod/mkunion/x/storage/schemaless.Repository[github.com/widmogrod/mkunion/x/schema.Schema]")
	shared.TypeRegistryStore[SortField]("github.com/widmogrod/mkunion/x/storage/schemaless.SortField")
	shared.TypeRegistryStore[UpdateRecords[Record[ExampleRecord]]]("github.com/widmogrod/mkunion/x/storage/schemaless.UpdateRecords[Record[ExampleRecord]]")
	shared.TypeRegistryStore[UpdateRecords[Record[schema.Schema]]]("github.com/widmogrod/mkunion/x/storage/schemaless.UpdateRecords[Record[github.com/widmogrod/mkunion/x/schema.Schema]]")
	shared.TypeRegistryStore[string]("string")
	shared.TypeRegistryStore[testing.T]("testing.T")
	shared.TypeRegistryStore[types.ProvisionedThroughputExceededException]("github.com/aws/aws-sdk-go-v2/service/kinesis/types.ProvisionedThroughputExceededException")
}
