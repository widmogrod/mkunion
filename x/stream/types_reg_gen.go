// Code generated by mkunion. DO NOT EDIT.
package stream

import (
	"github.com/confluentinc/confluent-kafka-go/v2/kafka"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
	"testing"
)

func init() {
	shared.TypeRegistryStore[kafka.Consumer]("github.com/confluentinc/confluent-kafka-go/v2/kafka.Consumer")
	shared.TypeRegistryStore[kafka.Message]("github.com/confluentinc/confluent-kafka-go/v2/kafka.Message")
	shared.TypeRegistryStore[EventTime]("github.com/widmogrod/mkunion/x/stream.EventTime")
	shared.TypeRegistryStore[FromBeginning]("github.com/widmogrod/mkunion/x/stream.FromBeginning")
	shared.TypeRegistryStore[FromOffset]("github.com/widmogrod/mkunion/x/stream.FromOffset")
	shared.TypeRegistryStore[InMemoryStream[schema.Schema]]("github.com/widmogrod/mkunion/x/stream.InMemoryStream[github.com/widmogrod/mkunion/x/schema.Schema]")
	shared.TypeRegistryStore[Item[int]]("github.com/widmogrod/mkunion/x/stream.Item[int]")
	shared.TypeRegistryStore[Item[schema.Schema]]("github.com/widmogrod/mkunion/x/stream.Item[github.com/widmogrod/mkunion/x/schema.Schema]")
	shared.TypeRegistryStore[Item[string]]("github.com/widmogrod/mkunion/x/stream.Item[string]")
	shared.TypeRegistryStore[Offset]("github.com/widmogrod/mkunion/x/stream.Offset")
	shared.TypeRegistryStore[SimulateProblem]("github.com/widmogrod/mkunion/x/stream.SimulateProblem")
	shared.TypeRegistryStore[Stream[any]]("github.com/widmogrod/mkunion/x/stream.Stream[any]")
	shared.TypeRegistryStore[testing.T]("testing.T")
}
