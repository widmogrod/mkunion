// Code generated by mkunion. DO NOT EDIT.
package machine

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CaseShape())
	shape.Register(StepShape())
	shape.Register(SuiteShape())
}

//shape:shape
func CaseShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Case",
		PkgName:       "machine",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "D",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "C",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "S",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func StepShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Step",
		PkgName:       "machine",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "D",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "C",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "S",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "InitState",
				Type: &shape.RefName{
					Name:          "S",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "GivenCommand",
				Type: &shape.RefName{
					Name:          "C",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "BeforeCommand",
				Type: &shape.Any{},
			},
			{
				Name: "AfterCommand",
				Type: &shape.Any{},
			},
			{
				Name: "ExpectedState",
				Type: &shape.RefName{
					Name:          "S",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "ExpectedErr",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func SuiteShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Suite",
		PkgName:       "machine",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "D",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "C",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "S",
				Type: &shape.Any{},
			},
		},
	}
}
