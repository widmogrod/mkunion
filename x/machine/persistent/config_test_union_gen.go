// Code generated by mkunion. DO NOT EDIT.
package persistent

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type TestCommandVisitor interface {
	VisitCreateTestCommand(v *CreateTestCommand) any
	VisitUpdateTestCommand(v *UpdateTestCommand) any
	VisitDeleteTestCommand(v *DeleteTestCommand) any
}

type TestCommand interface {
	AcceptTestCommand(g TestCommandVisitor) any
}

var (
	_ TestCommand = (*CreateTestCommand)(nil)
	_ TestCommand = (*UpdateTestCommand)(nil)
	_ TestCommand = (*DeleteTestCommand)(nil)
)

func (r *CreateTestCommand) AcceptTestCommand(v TestCommandVisitor) any {
	return v.VisitCreateTestCommand(r)
}
func (r *UpdateTestCommand) AcceptTestCommand(v TestCommandVisitor) any {
	return v.VisitUpdateTestCommand(r)
}
func (r *DeleteTestCommand) AcceptTestCommand(v TestCommandVisitor) any {
	return v.VisitDeleteTestCommand(r)
}

func MatchTestCommandR3[T0, T1, T2 any](
	x TestCommand,
	f1 func(x *CreateTestCommand) (T0, T1, T2),
	f2 func(x *UpdateTestCommand) (T0, T1, T2),
	f3 func(x *DeleteTestCommand) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *CreateTestCommand:
		return f1(v)
	case *UpdateTestCommand:
		return f2(v)
	case *DeleteTestCommand:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTestCommandR2[T0, T1 any](
	x TestCommand,
	f1 func(x *CreateTestCommand) (T0, T1),
	f2 func(x *UpdateTestCommand) (T0, T1),
	f3 func(x *DeleteTestCommand) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *CreateTestCommand:
		return f1(v)
	case *UpdateTestCommand:
		return f2(v)
	case *DeleteTestCommand:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTestCommandR1[T0 any](
	x TestCommand,
	f1 func(x *CreateTestCommand) T0,
	f2 func(x *UpdateTestCommand) T0,
	f3 func(x *DeleteTestCommand) T0,
) T0 {
	switch v := x.(type) {
	case *CreateTestCommand:
		return f1(v)
	case *UpdateTestCommand:
		return f2(v)
	case *DeleteTestCommand:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchTestCommandR0(
	x TestCommand,
	f1 func(x *CreateTestCommand),
	f2 func(x *UpdateTestCommand),
	f3 func(x *DeleteTestCommand),
) {
	switch v := x.(type) {
	case *CreateTestCommand:
		f1(v)
	case *UpdateTestCommand:
		f2(v)
	case *DeleteTestCommand:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.CreateTestCommand", CreateTestCommandFromJSON, CreateTestCommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.DeleteTestCommand", DeleteTestCommandFromJSON, DeleteTestCommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.TestCommand", TestCommandFromJSON, TestCommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.UpdateTestCommand", UpdateTestCommandFromJSON, UpdateTestCommandToJSON)
}

type TestCommandUnionJSON struct {
	Type              string          `json:"$type,omitempty"`
	CreateTestCommand json.RawMessage `json:"persistent.CreateTestCommand,omitempty"`
	UpdateTestCommand json.RawMessage `json:"persistent.UpdateTestCommand,omitempty"`
	DeleteTestCommand json.RawMessage `json:"persistent.DeleteTestCommand,omitempty"`
}

func TestCommandFromJSON(x []byte) (TestCommand, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TestCommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("persistent.TestCommandFromJSON: %w", err)
	}

	switch data.Type {
	case "persistent.CreateTestCommand":
		return CreateTestCommandFromJSON(data.CreateTestCommand)
	case "persistent.UpdateTestCommand":
		return UpdateTestCommandFromJSON(data.UpdateTestCommand)
	case "persistent.DeleteTestCommand":
		return DeleteTestCommandFromJSON(data.DeleteTestCommand)
	}

	if data.CreateTestCommand != nil {
		return CreateTestCommandFromJSON(data.CreateTestCommand)
	} else if data.UpdateTestCommand != nil {
		return UpdateTestCommandFromJSON(data.UpdateTestCommand)
	} else if data.DeleteTestCommand != nil {
		return DeleteTestCommandFromJSON(data.DeleteTestCommand)
	}
	return nil, fmt.Errorf("persistent.TestCommandFromJSON: unknown type: %s", data.Type)
}

func TestCommandToJSON(x TestCommand) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTestCommandR2(
		x,
		func(y *CreateTestCommand) ([]byte, error) {
			body, err := CreateTestCommandToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestCommandToJSON: %w", err)
			}
			return json.Marshal(TestCommandUnionJSON{
				Type:              "persistent.CreateTestCommand",
				CreateTestCommand: body,
			})
		},
		func(y *UpdateTestCommand) ([]byte, error) {
			body, err := UpdateTestCommandToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestCommandToJSON: %w", err)
			}
			return json.Marshal(TestCommandUnionJSON{
				Type:              "persistent.UpdateTestCommand",
				UpdateTestCommand: body,
			})
		},
		func(y *DeleteTestCommand) ([]byte, error) {
			body, err := DeleteTestCommandToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestCommandToJSON: %w", err)
			}
			return json.Marshal(TestCommandUnionJSON{
				Type:              "persistent.DeleteTestCommand",
				DeleteTestCommand: body,
			})
		},
	)
}

func CreateTestCommandFromJSON(x []byte) (*CreateTestCommand, error) {
	result := new(CreateTestCommand)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.CreateTestCommandFromJSON: %w", err)
	}
	return result, nil
}

func CreateTestCommandToJSON(x *CreateTestCommand) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CreateTestCommand)(nil)
	_ json.Marshaler   = (*CreateTestCommand)(nil)
)

func (r *CreateTestCommand) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCreateTestCommand(*r)
}
func (r *CreateTestCommand) _marshalJSONCreateTestCommand(x CreateTestCommand) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("persistent: CreateTestCommand._marshalJSONCreateTestCommand: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("persistent: CreateTestCommand._marshalJSONCreateTestCommand: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: CreateTestCommand._marshalJSONCreateTestCommand: struct; %w", err)
	}
	return result, nil
}
func (r *CreateTestCommand) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("persistent: CreateTestCommand._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *CreateTestCommand) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCreateTestCommand(data)
	if err != nil {
		return fmt.Errorf("persistent: CreateTestCommand.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CreateTestCommand) _unmarshalJSONCreateTestCommand(data []byte) (CreateTestCommand, error) {
	result := CreateTestCommand{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: CreateTestCommand._unmarshalJSONCreateTestCommand: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("persistent: CreateTestCommand._unmarshalJSONCreateTestCommand: field ID; %w", err)
		}
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("persistent: CreateTestCommand._unmarshalJSONCreateTestCommand: field Name; %w", err)
		}
	}
	return result, nil
}
func (r *CreateTestCommand) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("persistent: CreateTestCommand._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func UpdateTestCommandFromJSON(x []byte) (*UpdateTestCommand, error) {
	result := new(UpdateTestCommand)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.UpdateTestCommandFromJSON: %w", err)
	}
	return result, nil
}

func UpdateTestCommandToJSON(x *UpdateTestCommand) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*UpdateTestCommand)(nil)
	_ json.Marshaler   = (*UpdateTestCommand)(nil)
)

func (r *UpdateTestCommand) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONUpdateTestCommand(*r)
}
func (r *UpdateTestCommand) _marshalJSONUpdateTestCommand(x UpdateTestCommand) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("persistent: UpdateTestCommand._marshalJSONUpdateTestCommand: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	var fieldNewName []byte
	fieldNewName, err = r._marshalJSONstring(x.NewName)
	if err != nil {
		return nil, fmt.Errorf("persistent: UpdateTestCommand._marshalJSONUpdateTestCommand: field name NewName; %w", err)
	}
	partial["NewName"] = fieldNewName
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: UpdateTestCommand._marshalJSONUpdateTestCommand: struct; %w", err)
	}
	return result, nil
}
func (r *UpdateTestCommand) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("persistent: UpdateTestCommand._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *UpdateTestCommand) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONUpdateTestCommand(data)
	if err != nil {
		return fmt.Errorf("persistent: UpdateTestCommand.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *UpdateTestCommand) _unmarshalJSONUpdateTestCommand(data []byte) (UpdateTestCommand, error) {
	result := UpdateTestCommand{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: UpdateTestCommand._unmarshalJSONUpdateTestCommand: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("persistent: UpdateTestCommand._unmarshalJSONUpdateTestCommand: field ID; %w", err)
		}
	}
	if fieldNewName, ok := partial["NewName"]; ok {
		result.NewName, err = r._unmarshalJSONstring(fieldNewName)
		if err != nil {
			return result, fmt.Errorf("persistent: UpdateTestCommand._unmarshalJSONUpdateTestCommand: field NewName; %w", err)
		}
	}
	return result, nil
}
func (r *UpdateTestCommand) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("persistent: UpdateTestCommand._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func DeleteTestCommandFromJSON(x []byte) (*DeleteTestCommand, error) {
	result := new(DeleteTestCommand)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.DeleteTestCommandFromJSON: %w", err)
	}
	return result, nil
}

func DeleteTestCommandToJSON(x *DeleteTestCommand) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*DeleteTestCommand)(nil)
	_ json.Marshaler   = (*DeleteTestCommand)(nil)
)

func (r *DeleteTestCommand) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONDeleteTestCommand(*r)
}
func (r *DeleteTestCommand) _marshalJSONDeleteTestCommand(x DeleteTestCommand) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("persistent: DeleteTestCommand._marshalJSONDeleteTestCommand: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: DeleteTestCommand._marshalJSONDeleteTestCommand: struct; %w", err)
	}
	return result, nil
}
func (r *DeleteTestCommand) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("persistent: DeleteTestCommand._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *DeleteTestCommand) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONDeleteTestCommand(data)
	if err != nil {
		return fmt.Errorf("persistent: DeleteTestCommand.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *DeleteTestCommand) _unmarshalJSONDeleteTestCommand(data []byte) (DeleteTestCommand, error) {
	result := DeleteTestCommand{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: DeleteTestCommand._unmarshalJSONDeleteTestCommand: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("persistent: DeleteTestCommand._unmarshalJSONDeleteTestCommand: field ID; %w", err)
		}
	}
	return result, nil
}
func (r *DeleteTestCommand) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("persistent: DeleteTestCommand._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

type TestStateVisitor interface {
	VisitTestInitialState(v *TestInitialState) any
	VisitTestActiveState(v *TestActiveState) any
	VisitTestDeletedState(v *TestDeletedState) any
}

type TestState interface {
	AcceptTestState(g TestStateVisitor) any
}

var (
	_ TestState = (*TestInitialState)(nil)
	_ TestState = (*TestActiveState)(nil)
	_ TestState = (*TestDeletedState)(nil)
)

func (r *TestInitialState) AcceptTestState(v TestStateVisitor) any { return v.VisitTestInitialState(r) }
func (r *TestActiveState) AcceptTestState(v TestStateVisitor) any  { return v.VisitTestActiveState(r) }
func (r *TestDeletedState) AcceptTestState(v TestStateVisitor) any { return v.VisitTestDeletedState(r) }

func MatchTestStateR3[T0, T1, T2 any](
	x TestState,
	f1 func(x *TestInitialState) (T0, T1, T2),
	f2 func(x *TestActiveState) (T0, T1, T2),
	f3 func(x *TestDeletedState) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *TestInitialState:
		return f1(v)
	case *TestActiveState:
		return f2(v)
	case *TestDeletedState:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTestStateR2[T0, T1 any](
	x TestState,
	f1 func(x *TestInitialState) (T0, T1),
	f2 func(x *TestActiveState) (T0, T1),
	f3 func(x *TestDeletedState) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *TestInitialState:
		return f1(v)
	case *TestActiveState:
		return f2(v)
	case *TestDeletedState:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTestStateR1[T0 any](
	x TestState,
	f1 func(x *TestInitialState) T0,
	f2 func(x *TestActiveState) T0,
	f3 func(x *TestDeletedState) T0,
) T0 {
	switch v := x.(type) {
	case *TestInitialState:
		return f1(v)
	case *TestActiveState:
		return f2(v)
	case *TestDeletedState:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchTestStateR0(
	x TestState,
	f1 func(x *TestInitialState),
	f2 func(x *TestActiveState),
	f3 func(x *TestDeletedState),
) {
	switch v := x.(type) {
	case *TestInitialState:
		f1(v)
	case *TestActiveState:
		f2(v)
	case *TestDeletedState:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.TestActiveState", TestActiveStateFromJSON, TestActiveStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.TestDeletedState", TestDeletedStateFromJSON, TestDeletedStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.TestInitialState", TestInitialStateFromJSON, TestInitialStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/machine/persistent.TestState", TestStateFromJSON, TestStateToJSON)
}

type TestStateUnionJSON struct {
	Type             string          `json:"$type,omitempty"`
	TestInitialState json.RawMessage `json:"persistent.TestInitialState,omitempty"`
	TestActiveState  json.RawMessage `json:"persistent.TestActiveState,omitempty"`
	TestDeletedState json.RawMessage `json:"persistent.TestDeletedState,omitempty"`
}

func TestStateFromJSON(x []byte) (TestState, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TestStateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("persistent.TestStateFromJSON: %w", err)
	}

	switch data.Type {
	case "persistent.TestInitialState":
		return TestInitialStateFromJSON(data.TestInitialState)
	case "persistent.TestActiveState":
		return TestActiveStateFromJSON(data.TestActiveState)
	case "persistent.TestDeletedState":
		return TestDeletedStateFromJSON(data.TestDeletedState)
	}

	if data.TestInitialState != nil {
		return TestInitialStateFromJSON(data.TestInitialState)
	} else if data.TestActiveState != nil {
		return TestActiveStateFromJSON(data.TestActiveState)
	} else if data.TestDeletedState != nil {
		return TestDeletedStateFromJSON(data.TestDeletedState)
	}
	return nil, fmt.Errorf("persistent.TestStateFromJSON: unknown type: %s", data.Type)
}

func TestStateToJSON(x TestState) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTestStateR2(
		x,
		func(y *TestInitialState) ([]byte, error) {
			body, err := TestInitialStateToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestStateToJSON: %w", err)
			}
			return json.Marshal(TestStateUnionJSON{
				Type:             "persistent.TestInitialState",
				TestInitialState: body,
			})
		},
		func(y *TestActiveState) ([]byte, error) {
			body, err := TestActiveStateToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestStateToJSON: %w", err)
			}
			return json.Marshal(TestStateUnionJSON{
				Type:            "persistent.TestActiveState",
				TestActiveState: body,
			})
		},
		func(y *TestDeletedState) ([]byte, error) {
			body, err := TestDeletedStateToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("persistent.TestStateToJSON: %w", err)
			}
			return json.Marshal(TestStateUnionJSON{
				Type:             "persistent.TestDeletedState",
				TestDeletedState: body,
			})
		},
	)
}

func TestInitialStateFromJSON(x []byte) (*TestInitialState, error) {
	result := new(TestInitialState)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.TestInitialStateFromJSON: %w", err)
	}
	return result, nil
}

func TestInitialStateToJSON(x *TestInitialState) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TestInitialState)(nil)
	_ json.Marshaler   = (*TestInitialState)(nil)
)

func (r *TestInitialState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTestInitialState(*r)
}
func (r *TestInitialState) _marshalJSONTestInitialState(x TestInitialState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestInitialState._marshalJSONTestInitialState: struct; %w", err)
	}
	return result, nil
}
func (r *TestInitialState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTestInitialState(data)
	if err != nil {
		return fmt.Errorf("persistent: TestInitialState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TestInitialState) _unmarshalJSONTestInitialState(data []byte) (TestInitialState, error) {
	result := TestInitialState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: TestInitialState._unmarshalJSONTestInitialState: native struct unwrap; %w", err)
	}
	return result, nil
}

func TestActiveStateFromJSON(x []byte) (*TestActiveState, error) {
	result := new(TestActiveState)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.TestActiveStateFromJSON: %w", err)
	}
	return result, nil
}

func TestActiveStateToJSON(x *TestActiveState) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TestActiveState)(nil)
	_ json.Marshaler   = (*TestActiveState)(nil)
)

func (r *TestActiveState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTestActiveState(*r)
}
func (r *TestActiveState) _marshalJSONTestActiveState(x TestActiveState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestActiveState._marshalJSONTestActiveState: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestActiveState._marshalJSONTestActiveState: field name Name; %w", err)
	}
	partial["Name"] = fieldName
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestActiveState._marshalJSONTestActiveState: struct; %w", err)
	}
	return result, nil
}
func (r *TestActiveState) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestActiveState._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TestActiveState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTestActiveState(data)
	if err != nil {
		return fmt.Errorf("persistent: TestActiveState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TestActiveState) _unmarshalJSONTestActiveState(data []byte) (TestActiveState, error) {
	result := TestActiveState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: TestActiveState._unmarshalJSONTestActiveState: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("persistent: TestActiveState._unmarshalJSONTestActiveState: field ID; %w", err)
		}
	}
	if fieldName, ok := partial["Name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("persistent: TestActiveState._unmarshalJSONTestActiveState: field Name; %w", err)
		}
	}
	return result, nil
}
func (r *TestActiveState) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("persistent: TestActiveState._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func TestDeletedStateFromJSON(x []byte) (*TestDeletedState, error) {
	result := new(TestDeletedState)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("persistent.TestDeletedStateFromJSON: %w", err)
	}
	return result, nil
}

func TestDeletedStateToJSON(x *TestDeletedState) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TestDeletedState)(nil)
	_ json.Marshaler   = (*TestDeletedState)(nil)
)

func (r *TestDeletedState) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTestDeletedState(*r)
}
func (r *TestDeletedState) _marshalJSONTestDeletedState(x TestDeletedState) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestDeletedState._marshalJSONTestDeletedState: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestDeletedState._marshalJSONTestDeletedState: struct; %w", err)
	}
	return result, nil
}
func (r *TestDeletedState) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("persistent: TestDeletedState._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *TestDeletedState) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTestDeletedState(data)
	if err != nil {
		return fmt.Errorf("persistent: TestDeletedState.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TestDeletedState) _unmarshalJSONTestDeletedState(data []byte) (TestDeletedState, error) {
	result := TestDeletedState{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("persistent: TestDeletedState._unmarshalJSONTestDeletedState: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("persistent: TestDeletedState._unmarshalJSONTestDeletedState: field ID; %w", err)
		}
	}
	return result, nil
}
func (r *TestDeletedState) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("persistent: TestDeletedState._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
