// Code generated by mkunion. DO NOT EDIT.
package persistent

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CreateTestCommandShape())
	shape.Register(DeleteTestCommandShape())
	shape.Register(TestActiveStateShape())
	shape.Register(TestCommandShape())
	shape.Register(TestDeletedStateShape())
	shape.Register(TestInitialStateShape())
	shape.Register(TestStateShape())
	shape.Register(UpdateTestCommandShape())
}

//shape:shape

func TestCommandShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "TestCommand",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Variant: []shape.Shape{
			CreateTestCommandShape(),
			UpdateTestCommandShape(),
			DeleteTestCommandShape(),
		},
	}
}

func CreateTestCommandShape() shape.Shape {
	return &shape.StructLike{
		Name:          "CreateTestCommand",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestCommand",
			},
		},
	}
}

func UpdateTestCommandShape() shape.Shape {
	return &shape.StructLike{
		Name:          "UpdateTestCommand",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "NewName",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestCommand",
			},
		},
	}
}

func DeleteTestCommandShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DeleteTestCommand",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestCommand",
			},
		},
	}
}

//shape:shape

func TestStateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "TestState",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Variant: []shape.Shape{
			TestInitialStateShape(),
			TestActiveStateShape(),
			TestDeletedStateShape(),
		},
	}
}

func TestInitialStateShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TestInitialState",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestState",
			},
		},
	}
}

func TestActiveStateShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TestActiveState",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestState",
			},
		},
	}
}

func TestDeletedStateShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TestDeletedState",
		PkgName:       "persistent",
		PkgImportName: "github.com/widmogrod/mkunion/x/machine/persistent",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "TestState",
			},
		},
	}
}
