// Code generated by mkunion. DO NOT EDIT.
package schema

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func MatchDifferenceR0[T0 shape.Shape, T1 shape.Shape](
	t0 T0,
	t1 T1,
	f0 func(x0 *shape.StructLike, x1 *shape.StructLike),
	f1 func(x0 *shape.UnionLike, x1 *shape.UnionLike),
	f2 func(x0 shape.Shape, x1 *shape.RefName),
	f3 func(x0 *shape.RefName, x1 shape.Shape),
	f4 func(x0 shape.Shape, x1 shape.Shape),
) {
	c0t0, c0t0ok := any(t0).(*shape.StructLike)
	c0t1, c0t1ok := any(t1).(*shape.StructLike)
	if c0t0ok && c0t1ok {
		f0(c0t0, c0t1)
		return
	}
	c1t0, c1t0ok := any(t0).(*shape.UnionLike)
	c1t1, c1t1ok := any(t1).(*shape.UnionLike)
	if c1t0ok && c1t1ok {
		f1(c1t0, c1t1)
		return
	}
	c2t0, c2t0ok := any(t0).(shape.Shape)
	c2t1, c2t1ok := any(t1).(*shape.RefName)
	if c2t0ok && c2t1ok {
		f2(c2t0, c2t1)
		return
	}
	c3t0, c3t0ok := any(t0).(*shape.RefName)
	c3t1, c3t1ok := any(t1).(shape.Shape)
	if c3t0ok && c3t1ok {
		f3(c3t0, c3t1)
		return
	}
	c4t0, c4t0ok := any(t0).(shape.Shape)
	c4t1, c4t1ok := any(t1).(shape.Shape)
	if c4t0ok && c4t1ok {
		f4(c4t0, c4t1)
		return
	}
	panic("MatchDifferenceR0 is not exhaustive")
}

func MatchDifferenceR1[T0 shape.Shape, T1 shape.Shape, TOut1 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *shape.StructLike, x1 *shape.StructLike) TOut1,
	f1 func(x0 *shape.UnionLike, x1 *shape.UnionLike) TOut1,
	f2 func(x0 shape.Shape, x1 *shape.RefName) TOut1,
	f3 func(x0 *shape.RefName, x1 shape.Shape) TOut1,
	f4 func(x0 shape.Shape, x1 shape.Shape) TOut1,
) TOut1 {
	c0t0, c0t0ok := any(t0).(*shape.StructLike)
	c0t1, c0t1ok := any(t1).(*shape.StructLike)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*shape.UnionLike)
	c1t1, c1t1ok := any(t1).(*shape.UnionLike)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(shape.Shape)
	c2t1, c2t1ok := any(t1).(*shape.RefName)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(*shape.RefName)
	c3t1, c3t1ok := any(t1).(shape.Shape)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	c4t0, c4t0ok := any(t0).(shape.Shape)
	c4t1, c4t1ok := any(t1).(shape.Shape)
	if c4t0ok && c4t1ok {
		return f4(c4t0, c4t1)
	}
	panic("MatchDifferenceR1 is not exhaustive")
}

func MatchDifferenceR2[T0 shape.Shape, T1 shape.Shape, TOut1 any, TOut2 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *shape.StructLike, x1 *shape.StructLike) (TOut1, TOut2),
	f1 func(x0 *shape.UnionLike, x1 *shape.UnionLike) (TOut1, TOut2),
	f2 func(x0 shape.Shape, x1 *shape.RefName) (TOut1, TOut2),
	f3 func(x0 *shape.RefName, x1 shape.Shape) (TOut1, TOut2),
	f4 func(x0 shape.Shape, x1 shape.Shape) (TOut1, TOut2),
) (TOut1, TOut2) {
	c0t0, c0t0ok := any(t0).(*shape.StructLike)
	c0t1, c0t1ok := any(t1).(*shape.StructLike)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*shape.UnionLike)
	c1t1, c1t1ok := any(t1).(*shape.UnionLike)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(shape.Shape)
	c2t1, c2t1ok := any(t1).(*shape.RefName)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(*shape.RefName)
	c3t1, c3t1ok := any(t1).(shape.Shape)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	c4t0, c4t0ok := any(t0).(shape.Shape)
	c4t1, c4t1ok := any(t1).(shape.Shape)
	if c4t0ok && c4t1ok {
		return f4(c4t0, c4t1)
	}
	panic("MatchDifferenceR2 is not exhaustive")
}

func MatchDifferenceR3[T0 shape.Shape, T1 shape.Shape, TOut1 any, TOut2 any, TOut3 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *shape.StructLike, x1 *shape.StructLike) (TOut1, TOut2, TOut3),
	f1 func(x0 *shape.UnionLike, x1 *shape.UnionLike) (TOut1, TOut2, TOut3),
	f2 func(x0 shape.Shape, x1 *shape.RefName) (TOut1, TOut2, TOut3),
	f3 func(x0 *shape.RefName, x1 shape.Shape) (TOut1, TOut2, TOut3),
	f4 func(x0 shape.Shape, x1 shape.Shape) (TOut1, TOut2, TOut3),
) (TOut1, TOut2, TOut3) {
	c0t0, c0t0ok := any(t0).(*shape.StructLike)
	c0t1, c0t1ok := any(t1).(*shape.StructLike)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*shape.UnionLike)
	c1t1, c1t1ok := any(t1).(*shape.UnionLike)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(shape.Shape)
	c2t1, c2t1ok := any(t1).(*shape.RefName)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(*shape.RefName)
	c3t1, c3t1ok := any(t1).(shape.Shape)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	c4t0, c4t0ok := any(t0).(shape.Shape)
	c4t1, c4t1ok := any(t1).(shape.Shape)
	if c4t0ok && c4t1ok {
		return f4(c4t0, c4t1)
	}
	panic("MatchDifferenceR3 is not exhaustive")
}
