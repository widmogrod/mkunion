// Code generated by mkunion. DO NOT EDIT.
package testutil

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/schema"
	"github.com/widmogrod/mkunion/x/shared"
)

type ExampleVisitor interface {
	VisitExampleOne(v *ExampleOne) any
	VisitExampleTwo(v *ExampleTwo) any
	VisitExampleTree(v *ExampleTree) any
}

type Example interface {
	AcceptExample(g ExampleVisitor) any
}

var (
	_ Example = (*ExampleOne)(nil)
	_ Example = (*ExampleTwo)(nil)
	_ Example = (*ExampleTree)(nil)
)

func (r *ExampleOne) AcceptExample(v ExampleVisitor) any  { return v.VisitExampleOne(r) }
func (r *ExampleTwo) AcceptExample(v ExampleVisitor) any  { return v.VisitExampleTwo(r) }
func (r *ExampleTree) AcceptExample(v ExampleVisitor) any { return v.VisitExampleTree(r) }

func MatchExampleR3[T0, T1, T2 any](
	x Example,
	f1 func(x *ExampleOne) (T0, T1, T2),
	f2 func(x *ExampleTwo) (T0, T1, T2),
	f3 func(x *ExampleTree) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *ExampleOne:
		return f1(v)
	case *ExampleTwo:
		return f2(v)
	case *ExampleTree:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchExampleR2[T0, T1 any](
	x Example,
	f1 func(x *ExampleOne) (T0, T1),
	f2 func(x *ExampleTwo) (T0, T1),
	f3 func(x *ExampleTree) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *ExampleOne:
		return f1(v)
	case *ExampleTwo:
		return f2(v)
	case *ExampleTree:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchExampleR1[T0 any](
	x Example,
	f1 func(x *ExampleOne) T0,
	f2 func(x *ExampleTwo) T0,
	f3 func(x *ExampleTree) T0,
) T0 {
	switch v := x.(type) {
	case *ExampleOne:
		return f1(v)
	case *ExampleTwo:
		return f2(v)
	case *ExampleTree:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchExampleR0(
	x Example,
	f1 func(x *ExampleOne),
	f2 func(x *ExampleTwo),
	f3 func(x *ExampleTree),
) {
	switch v := x.(type) {
	case *ExampleOne:
		f1(v)
	case *ExampleTwo:
		f2(v)
	case *ExampleTree:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema/testutil.Example", ExampleFromJSON, ExampleToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema/testutil.ExampleOne", ExampleOneFromJSON, ExampleOneToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema/testutil.ExampleTree", ExampleTreeFromJSON, ExampleTreeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/schema/testutil.ExampleTwo", ExampleTwoFromJSON, ExampleTwoToJSON)
}

type ExampleUnionJSON struct {
	Type        string          `json:"$type,omitempty"`
	ExampleOne  json.RawMessage `json:"testutil.ExampleOne,omitempty"`
	ExampleTwo  json.RawMessage `json:"testutil.ExampleTwo,omitempty"`
	ExampleTree json.RawMessage `json:"testutil.ExampleTree,omitempty"`
}

func ExampleFromJSON(x []byte) (Example, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data ExampleUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testutil.ExampleFromJSON: %w", err)
	}

	switch data.Type {
	case "testutil.ExampleOne":
		return ExampleOneFromJSON(data.ExampleOne)
	case "testutil.ExampleTwo":
		return ExampleTwoFromJSON(data.ExampleTwo)
	case "testutil.ExampleTree":
		return ExampleTreeFromJSON(data.ExampleTree)
	}

	if data.ExampleOne != nil {
		return ExampleOneFromJSON(data.ExampleOne)
	} else if data.ExampleTwo != nil {
		return ExampleTwoFromJSON(data.ExampleTwo)
	} else if data.ExampleTree != nil {
		return ExampleTreeFromJSON(data.ExampleTree)
	}
	return nil, fmt.Errorf("testutil.ExampleFromJSON: unknown type: %s", data.Type)
}

func ExampleToJSON(x Example) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchExampleR2(
		x,
		func(y *ExampleOne) ([]byte, error) {
			body, err := ExampleOneToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutil.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type:       "testutil.ExampleOne",
				ExampleOne: body,
			})
		},
		func(y *ExampleTwo) ([]byte, error) {
			body, err := ExampleTwoToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutil.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type:       "testutil.ExampleTwo",
				ExampleTwo: body,
			})
		},
		func(y *ExampleTree) ([]byte, error) {
			body, err := ExampleTreeToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testutil.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type:        "testutil.ExampleTree",
				ExampleTree: body,
			})
		},
	)
}

func ExampleOneFromJSON(x []byte) (*ExampleOne, error) {
	result := new(ExampleOne)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutil.ExampleOneFromJSON: %w", err)
	}
	return result, nil
}

func ExampleOneToJSON(x *ExampleOne) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ExampleOne)(nil)
	_ json.Marshaler   = (*ExampleOne)(nil)
)

func (r *ExampleOne) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExampleOne(*r)
}
func (r *ExampleOne) _marshalJSONExampleOne(x ExampleOne) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOneValue []byte
	fieldOneValue, err = r._marshalJSONstring(x.OneValue)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleOne._marshalJSONExampleOne: field name OneValue; %w", err)
	}
	partial["OneValue"] = fieldOneValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleOne._marshalJSONExampleOne: struct; %w", err)
	}
	return result, nil
}
func (r *ExampleOne) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleOne._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ExampleOne) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExampleOne(data)
	if err != nil {
		return fmt.Errorf("testutil: ExampleOne.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ExampleOne) _unmarshalJSONExampleOne(data []byte) (ExampleOne, error) {
	result := ExampleOne{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleOne._unmarshalJSONExampleOne: native struct unwrap; %w", err)
	}
	if fieldOneValue, ok := partial["OneValue"]; ok {
		result.OneValue, err = r._unmarshalJSONstring(fieldOneValue)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleOne._unmarshalJSONExampleOne: field OneValue; %w", err)
		}
	}
	return result, nil
}
func (r *ExampleOne) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleOne._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func ExampleTwoFromJSON(x []byte) (*ExampleTwo, error) {
	result := new(ExampleTwo)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutil.ExampleTwoFromJSON: %w", err)
	}
	return result, nil
}

func ExampleTwoToJSON(x *ExampleTwo) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ExampleTwo)(nil)
	_ json.Marshaler   = (*ExampleTwo)(nil)
)

func (r *ExampleTwo) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExampleTwo(*r)
}
func (r *ExampleTwo) _marshalJSONExampleTwo(x ExampleTwo) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTwoData []byte
	fieldTwoData, err = r._marshalJSONschema_Schema(x.TwoData)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTwo._marshalJSONExampleTwo: field name TwoData; %w", err)
	}
	partial["TwoData"] = fieldTwoData
	var fieldTwoNext []byte
	fieldTwoNext, err = r._marshalJSONExample(x.TwoNext)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTwo._marshalJSONExampleTwo: field name TwoNext; %w", err)
	}
	partial["TwoNext"] = fieldTwoNext
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTwo._marshalJSONExampleTwo: struct; %w", err)
	}
	return result, nil
}
func (r *ExampleTwo) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTwo._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *ExampleTwo) _marshalJSONExample(x Example) ([]byte, error) {
	result, err := shared.JSONMarshal[Example](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTwo._marshalJSONExample:; %w", err)
	}
	return result, nil
}
func (r *ExampleTwo) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExampleTwo(data)
	if err != nil {
		return fmt.Errorf("testutil: ExampleTwo.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ExampleTwo) _unmarshalJSONExampleTwo(data []byte) (ExampleTwo, error) {
	result := ExampleTwo{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTwo._unmarshalJSONExampleTwo: native struct unwrap; %w", err)
	}
	if fieldTwoData, ok := partial["TwoData"]; ok {
		result.TwoData, err = r._unmarshalJSONschema_Schema(fieldTwoData)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTwo._unmarshalJSONExampleTwo: field TwoData; %w", err)
		}
	}
	if fieldTwoNext, ok := partial["TwoNext"]; ok {
		result.TwoNext, err = r._unmarshalJSONExample(fieldTwoNext)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTwo._unmarshalJSONExampleTwo: field TwoNext; %w", err)
		}
	}
	return result, nil
}
func (r *ExampleTwo) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTwo._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTwo) _unmarshalJSONExample(data []byte) (Example, error) {
	result, err := shared.JSONUnmarshal[Example](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTwo._unmarshalJSONExample: native ref unwrap; %w", err)
	}
	return result, nil
}

func ExampleTreeFromJSON(x []byte) (*ExampleTree, error) {
	result := new(ExampleTree)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testutil.ExampleTreeFromJSON: %w", err)
	}
	return result, nil
}

func ExampleTreeToJSON(x *ExampleTree) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ExampleTree)(nil)
	_ json.Marshaler   = (*ExampleTree)(nil)
)

func (r *ExampleTree) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExampleTree(*r)
}
func (r *ExampleTree) _marshalJSONExampleTree(x ExampleTree) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldItems []byte
	fieldItems, err = r._marshalJSONSliceExample(x.Items)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Items; %w", err)
	}
	partial["Items"] = fieldItems
	var fieldSchemas []byte
	fieldSchemas, err = r._marshalJSONSliceschema_Schema(x.Schemas)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Schemas; %w", err)
	}
	partial["Schemas"] = fieldSchemas
	var fieldMap []byte
	fieldMap, err = r._marshalJSONmapLb_string_bLExample(x.Map)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Map; %w", err)
	}
	partial["Map"] = fieldMap
	var fieldAny []byte
	fieldAny, err = r._marshalJSONany(x.Any)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Any; %w", err)
	}
	partial["Any"] = fieldAny
	var fieldAlias1 []byte
	fieldAlias1, err = r._marshalJSONMyVal1(x.Alias1)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Alias1; %w", err)
	}
	partial["Alias1"] = fieldAlias1
	var fieldAlias2 []byte
	fieldAlias2, err = r._marshalJSONMyVal2(x.Alias2)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Alias2; %w", err)
	}
	partial["Alias2"] = fieldAlias2
	var fieldPtr []byte
	fieldPtr, err = r._marshalJSONPtrint(x.Ptr)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: field name Ptr; %w", err)
	}
	if fieldPtr != nil {
		partial["Ptr"] = fieldPtr
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExampleTree: struct; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONSliceExample(x []Example) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONSliceExample: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONSliceExample:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONExample(x Example) ([]byte, error) {
	result, err := shared.JSONMarshal[Example](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONExample:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONSliceschema_Schema(x []schema.Schema) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONschema_Schema(v)
		if err != nil {
			return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONSliceschema_Schema: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONSliceschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONschema_Schema(x schema.Schema) ([]byte, error) {
	result, err := shared.JSONMarshal[schema.Schema](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONschema_Schema:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONmapLb_string_bLExample(x map[string]Example) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONmapLb_string_bLExample: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONmapLb_string_bLExample:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONany(x any) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONany:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONMyVal1(x MyVal1) ([]byte, error) {
	result, err := shared.JSONMarshal[MyVal1](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONMyVal1:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONMyVal2(x MyVal2) ([]byte, error) {
	result, err := shared.JSONMarshal[MyVal2](x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONMyVal2:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _marshalJSONPtrint(x *int) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONint(*x)
}
func (r *ExampleTree) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExampleTree(data)
	if err != nil {
		return fmt.Errorf("testutil: ExampleTree.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ExampleTree) _unmarshalJSONExampleTree(data []byte) (ExampleTree, error) {
	result := ExampleTree{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: native struct unwrap; %w", err)
	}
	if fieldItems, ok := partial["Items"]; ok {
		result.Items, err = r._unmarshalJSONSliceExample(fieldItems)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Items; %w", err)
		}
	}
	if fieldSchemas, ok := partial["Schemas"]; ok {
		result.Schemas, err = r._unmarshalJSONSliceschema_Schema(fieldSchemas)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Schemas; %w", err)
		}
	}
	if fieldMap, ok := partial["Map"]; ok {
		result.Map, err = r._unmarshalJSONmapLb_string_bLExample(fieldMap)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Map; %w", err)
		}
	}
	if fieldAny, ok := partial["Any"]; ok {
		result.Any, err = r._unmarshalJSONany(fieldAny)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Any; %w", err)
		}
	}
	if fieldAlias1, ok := partial["Alias1"]; ok {
		result.Alias1, err = r._unmarshalJSONMyVal1(fieldAlias1)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Alias1; %w", err)
		}
	}
	if fieldAlias2, ok := partial["Alias2"]; ok {
		result.Alias2, err = r._unmarshalJSONMyVal2(fieldAlias2)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Alias2; %w", err)
		}
	}
	if fieldPtr, ok := partial["Ptr"]; ok {
		result.Ptr, err = r._unmarshalJSONPtrint(fieldPtr)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExampleTree: field Ptr; %w", err)
		}
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONSliceExample(data []byte) ([]Example, error) {
	result := make([]Example, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONSliceExample: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONExample(v)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONSliceExample: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONExample(data []byte) (Example, error) {
	result, err := shared.JSONUnmarshal[Example](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONExample: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONSliceschema_Schema(data []byte) ([]schema.Schema, error) {
	result := make([]schema.Schema, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONSliceschema_Schema: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONschema_Schema(v)
		if err != nil {
			return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONSliceschema_Schema: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONschema_Schema(data []byte) (schema.Schema, error) {
	result, err := shared.JSONUnmarshal[schema.Schema](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONschema_Schema: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONmapLb_string_bLExample(data []byte) (map[string]Example, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._unmarshalJSONmapLb_string_bLExample: native map unwrap; %w", err)
	}
	result := make(map[string]Example)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testutil: ExampleTree._unmarshalJSONmapLb_string_bLExample: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONany(data []byte) (any, error) {
	var result any
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONany: native any unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONMyVal1(data []byte) (MyVal1, error) {
	result, err := shared.JSONUnmarshal[MyVal1](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONMyVal1: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONMyVal2(data []byte) (MyVal2, error) {
	result, err := shared.JSONUnmarshal[MyVal2](data)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONMyVal2: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ExampleTree) _unmarshalJSONPtrint(data []byte) (*int, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONint(data)
	if err != nil {
		return nil, fmt.Errorf("testutil: ExampleTree._unmarshalJSONPtrint: pointer; %w", err)
	}
	return &result, nil
}
func (r *ExampleTree) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: ExampleTree._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
