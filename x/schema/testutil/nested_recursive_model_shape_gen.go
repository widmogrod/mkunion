// Code generated by mkunion. DO NOT EDIT.
package testutil

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(ExampleChangeShape())
	shape.Register(ExampleOneShape())
	shape.Register(ExampleRecordShape())
	shape.Register(ExampleShape())
	shape.Register(ExampleTreeShape())
	shape.Register(ExampleTwoShape())
	shape.Register(MyVal1Shape())
	shape.Register(MyVal2Shape())
}

//shape:shape

func ExampleShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Example",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		Variant: []shape.Shape{
			ExampleOneShape(),
			ExampleTwoShape(),
			ExampleTreeShape(),
		},
	}
}

func ExampleOneShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleOne",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "OneValue",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
	}
}

func ExampleTwoShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleTwo",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "TwoData",
				Type: &shape.RefName{
					Name:          "Schema",
					PkgName:       "schema",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema",
				},
			},
			{
				Name: "TwoNext",
				Type: &shape.RefName{
					Name:          "Example",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
	}
}

func ExampleTreeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleTree",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		Fields: []*shape.FieldLike{
			{
				Name: "Items",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Example",
						PkgName:       "testutil",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
					},
				},
			},
			{
				Name: "Schemas",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Schema",
						PkgName:       "schema",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema",
					},
				},
			},
			{
				Name: "Map",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "Example",
						PkgName:       "testutil",
						PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
					},
				},
			},
			{
				Name: "Any",
				Type: &shape.Any{},
			},
			{
				Name: "Alias1",
				Type: &shape.RefName{
					Name:          "MyVal1",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
				},
			},
			{
				Name: "Alias2",
				Type: &shape.RefName{
					Name:          "MyVal2",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
				},
			},
			{
				Name: "Ptr",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Int{},
						},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
	}
}

//shape:shape
func MyVal1Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "MyVal1",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		Type:          &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
	}
}

//shape:shape
func MyVal2Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "MyVal2",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		IsAlias:       true,
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int{},
			},
		},
	}
}

//shape:shape
func ExampleChangeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleChange",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "After",
				Type: &shape.RefName{
					Name:          "ExampleRecord",
					PkgName:       "testutil",
					PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
					Indexed: []shape.Shape{
						&shape.RefName{
							Name:          "T",
							PkgName:       "",
							PkgImportName: "",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ExampleRecordShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleRecord",
		PkgName:       "testutil",
		PkgImportName: "github.com/widmogrod/mkunion/x/schema/testutil",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "T",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
	}
}
