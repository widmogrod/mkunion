// Code generated by mkunion. DO NOT EDIT.
package testutil

import (
	"encoding/json"
	"fmt"
)

var (
	_ json.Unmarshaler = (*Max)(nil)
	_ json.Marshaler   = (*Max)(nil)
)

func (r *Max) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMax(*r)
}
func (r *Max) _marshalJSONMax(x Max) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldInt []byte
	fieldInt, err = r._marshalJSONint(x.Int)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Int; %w", err)
	}
	partial["Int"] = fieldInt
	var fieldInt8 []byte
	fieldInt8, err = r._marshalJSONint8(x.Int8)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Int8; %w", err)
	}
	partial["Int8"] = fieldInt8
	var fieldInt16 []byte
	fieldInt16, err = r._marshalJSONint16(x.Int16)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Int16; %w", err)
	}
	partial["Int16"] = fieldInt16
	var fieldInt32 []byte
	fieldInt32, err = r._marshalJSONint32(x.Int32)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Int32; %w", err)
	}
	partial["Int32"] = fieldInt32
	var fieldInt64 []byte
	fieldInt64, err = r._marshalJSONint64(x.Int64)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Int64; %w", err)
	}
	partial["Int64"] = fieldInt64
	var fieldFloat32 []byte
	fieldFloat32, err = r._marshalJSONfloat32(x.Float32)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Float32; %w", err)
	}
	partial["Float32"] = fieldFloat32
	var fieldFloat64 []byte
	fieldFloat64, err = r._marshalJSONfloat64(x.Float64)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Float64; %w", err)
	}
	partial["Float64"] = fieldFloat64
	var fieldUint []byte
	fieldUint, err = r._marshalJSONuint(x.Uint)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Uint; %w", err)
	}
	partial["Uint"] = fieldUint
	var fieldUint8 []byte
	fieldUint8, err = r._marshalJSONuint8(x.Uint8)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Uint8; %w", err)
	}
	partial["Uint8"] = fieldUint8
	var fieldUint16 []byte
	fieldUint16, err = r._marshalJSONuint16(x.Uint16)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Uint16; %w", err)
	}
	partial["Uint16"] = fieldUint16
	var fieldUint32 []byte
	fieldUint32, err = r._marshalJSONuint32(x.Uint32)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Uint32; %w", err)
	}
	partial["Uint32"] = fieldUint32
	var fieldUint64 []byte
	fieldUint64, err = r._marshalJSONuint64(x.Uint64)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: field name Uint64; %w", err)
	}
	partial["Uint64"] = fieldUint64
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONMax: struct; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONint8(x int8) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONint8:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONint16(x int16) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONint16:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONint32(x int32) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONint32:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONfloat32(x float32) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONfloat32:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONuint(x uint) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONuint:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONuint8(x uint8) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONuint8:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONuint16(x uint16) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONuint16:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONuint32(x uint32) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONuint32:; %w", err)
	}
	return result, nil
}
func (r *Max) _marshalJSONuint64(x uint64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testutil: Max._marshalJSONuint64:; %w", err)
	}
	return result, nil
}
func (r *Max) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMax(data)
	if err != nil {
		return fmt.Errorf("testutil: Max.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Max) _unmarshalJSONMax(data []byte) (Max, error) {
	result := Max{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: native struct unwrap; %w", err)
	}
	if fieldInt, ok := partial["Int"]; ok {
		result.Int, err = r._unmarshalJSONint(fieldInt)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Int; %w", err)
		}
	}
	if fieldInt8, ok := partial["Int8"]; ok {
		result.Int8, err = r._unmarshalJSONint8(fieldInt8)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Int8; %w", err)
		}
	}
	if fieldInt16, ok := partial["Int16"]; ok {
		result.Int16, err = r._unmarshalJSONint16(fieldInt16)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Int16; %w", err)
		}
	}
	if fieldInt32, ok := partial["Int32"]; ok {
		result.Int32, err = r._unmarshalJSONint32(fieldInt32)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Int32; %w", err)
		}
	}
	if fieldInt64, ok := partial["Int64"]; ok {
		result.Int64, err = r._unmarshalJSONint64(fieldInt64)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Int64; %w", err)
		}
	}
	if fieldFloat32, ok := partial["Float32"]; ok {
		result.Float32, err = r._unmarshalJSONfloat32(fieldFloat32)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Float32; %w", err)
		}
	}
	if fieldFloat64, ok := partial["Float64"]; ok {
		result.Float64, err = r._unmarshalJSONfloat64(fieldFloat64)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Float64; %w", err)
		}
	}
	if fieldUint, ok := partial["Uint"]; ok {
		result.Uint, err = r._unmarshalJSONuint(fieldUint)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Uint; %w", err)
		}
	}
	if fieldUint8, ok := partial["Uint8"]; ok {
		result.Uint8, err = r._unmarshalJSONuint8(fieldUint8)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Uint8; %w", err)
		}
	}
	if fieldUint16, ok := partial["Uint16"]; ok {
		result.Uint16, err = r._unmarshalJSONuint16(fieldUint16)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Uint16; %w", err)
		}
	}
	if fieldUint32, ok := partial["Uint32"]; ok {
		result.Uint32, err = r._unmarshalJSONuint32(fieldUint32)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Uint32; %w", err)
		}
	}
	if fieldUint64, ok := partial["Uint64"]; ok {
		result.Uint64, err = r._unmarshalJSONuint64(fieldUint64)
		if err != nil {
			return result, fmt.Errorf("testutil: Max._unmarshalJSONMax: field Uint64; %w", err)
		}
	}
	return result, nil
}
func (r *Max) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONint8(data []byte) (int8, error) {
	var result int8
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONint8: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONint16(data []byte) (int16, error) {
	var result int16
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONint16: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONint32(data []byte) (int32, error) {
	var result int32
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONint32: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONfloat32(data []byte) (float32, error) {
	var result float32
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONfloat32: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONuint(data []byte) (uint, error) {
	var result uint
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONuint: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONuint8(data []byte) (uint8, error) {
	var result uint8
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONuint8: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONuint16(data []byte) (uint16, error) {
	var result uint16
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONuint16: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONuint32(data []byte) (uint32, error) {
	var result uint32
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONuint32: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *Max) _unmarshalJSONuint64(data []byte) (uint64, error) {
	var result uint64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testutil: Max._unmarshalJSONuint64: native primitive unwrap; %w", err)
	}
	return result, nil
}
