// Code generated by mkunion. DO NOT EDIT.
package shape

func init() {
	Register(GuardUnionJSONShape())
	Register(NumberKindUnionJSONShape())
	Register(PrimitiveKindUnionJSONShape())
	Register(ShapeUnionJSONShape())
}

//shape:shape
func GuardUnionJSONShape() Shape {
	return &StructLike{
		Name:          "GuardUnionJSON",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &PrimitiveLike{Kind: &StringLike{}},
				Tags: map[string]Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Enum",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Enum",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Required",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Required",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AndGuard",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "AndGuard",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func NumberKindUnionJSONShape() Shape {
	return &StructLike{
		Name:          "NumberKindUnionJSON",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &PrimitiveLike{Kind: &StringLike{}},
				Tags: map[string]Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UInt",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UInt",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UInt8",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UInt8",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UInt16",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UInt16",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UInt32",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UInt32",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UInt64",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UInt64",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Int",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Int",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Int8",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Int8",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Int16",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Int16",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Int32",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Int32",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Int64",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Int64",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Float32",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Float32",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Float64",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Float64",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func PrimitiveKindUnionJSONShape() Shape {
	return &StructLike{
		Name:          "PrimitiveKindUnionJSON",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &PrimitiveLike{Kind: &StringLike{}},
				Tags: map[string]Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "BooleanLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "BooleanLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "StringLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "StringLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "NumberLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "NumberLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ShapeUnionJSONShape() Shape {
	return &StructLike{
		Name:          "ShapeUnionJSON",
		PkgName:       "shape",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape",
		Fields: []*FieldLike{
			{
				Name: "Type",
				Type: &PrimitiveLike{Kind: &StringLike{}},
				Tags: map[string]Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Any",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "Any",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "RefName",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "RefName",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "PointerLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "PointerLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "AliasLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "AliasLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "PrimitiveLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "PrimitiveLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "ListLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "ListLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "MapLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "MapLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "StructLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "StructLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "UnionLike",
				Type: &RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]Tag{
					"json": {
						Value: "UnionLike",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
