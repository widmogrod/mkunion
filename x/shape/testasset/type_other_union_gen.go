// Code generated by mkunion. DO NOT EDIT.
package testasset

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type SomeDSLVisitor interface {
	VisitExplain(v *Explain) any
}

type SomeDSL interface {
	AcceptSomeDSL(g SomeDSLVisitor) any
}

var (
	_ SomeDSL = (*Explain)(nil)
)

func (r *Explain) AcceptSomeDSL(v SomeDSLVisitor) any { return v.VisitExplain(r) }

func MatchSomeDSLR3[T0, T1, T2 any](
	x SomeDSL,
	f1 func(x *Explain) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Explain:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchSomeDSLR2[T0, T1 any](
	x SomeDSL,
	f1 func(x *Explain) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Explain:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchSomeDSLR1[T0 any](
	x SomeDSL,
	f1 func(x *Explain) T0,
) T0 {
	switch v := x.(type) {
	case *Explain:
		return f1(v)
	}
	var result1 T0
	return result1
}

func MatchSomeDSLR0(
	x SomeDSL,
	f1 func(x *Explain),
) {
	switch v := x.(type) {
	case *Explain:
		f1(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.Explain", ExplainFromJSON, ExplainToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.SomeDSL", SomeDSLFromJSON, SomeDSLToJSON)
}

type SomeDSLUnionJSON struct {
	Type    string          `json:"$type,omitempty"`
	Explain json.RawMessage `json:"testasset.Explain,omitempty"`
}

func SomeDSLFromJSON(x []byte) (SomeDSL, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data SomeDSLUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testasset.SomeDSLFromJSON: %w", err)
	}

	switch data.Type {
	case "testasset.Explain":
		return ExplainFromJSON(data.Explain)
	}

	if data.Explain != nil {
		return ExplainFromJSON(data.Explain)
	}
	return nil, fmt.Errorf("testasset.SomeDSLFromJSON: unknown type: %s", data.Type)
}

func SomeDSLToJSON(x SomeDSL) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchSomeDSLR2(
		x,
		func(y *Explain) ([]byte, error) {
			body, err := ExplainToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.SomeDSLToJSON: %w", err)
			}
			return json.Marshal(SomeDSLUnionJSON{
				Type:    "testasset.Explain",
				Explain: body,
			})
		},
	)
}

func ExplainFromJSON(x []byte) (*Explain, error) {
	result := new(Explain)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.ExplainFromJSON: %w", err)
	}
	return result, nil
}

func ExplainToJSON(x *Explain) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Explain)(nil)
	_ json.Marshaler   = (*Explain)(nil)
)

func (r *Explain) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONExplain(*r)
}
func (r *Explain) _marshalJSONExplain(x Explain) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldExample []byte
	fieldExample, err = r._marshalJSONExample(x.Example)
	if err != nil {
		return nil, fmt.Errorf("testasset: Explain._marshalJSONExplain: field name Example; %w", err)
	}
	partial["example"] = fieldExample
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: Explain._marshalJSONExplain: struct; %w", err)
	}
	return result, nil
}
func (r *Explain) _marshalJSONExample(x Example) ([]byte, error) {
	result, err := shared.JSONMarshal[Example](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: Explain._marshalJSONExample:; %w", err)
	}
	return result, nil
}
func (r *Explain) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONExplain(data)
	if err != nil {
		return fmt.Errorf("testasset: Explain.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Explain) _unmarshalJSONExplain(data []byte) (Explain, error) {
	result := Explain{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: Explain._unmarshalJSONExplain: native struct unwrap; %w", err)
	}
	if fieldExample, ok := partial["example"]; ok {
		result.Example, err = r._unmarshalJSONExample(fieldExample)
		if err != nil {
			return result, fmt.Errorf("testasset: Explain._unmarshalJSONExplain: field Example; %w", err)
		}
	}
	return result, nil
}
func (r *Explain) _unmarshalJSONExample(data []byte) (Example, error) {
	result, err := shared.JSONUnmarshal[Example](data)
	if err != nil {
		return result, fmt.Errorf("testasset: Explain._unmarshalJSONExample: native ref unwrap; %w", err)
	}
	return result, nil
}
