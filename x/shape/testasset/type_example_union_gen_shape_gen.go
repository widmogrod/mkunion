// Code generated by mkunion. DO NOT EDIT.
package testasset

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AliasExampleUnionJSONShape())
	shape.Register(ExampleUnionJSONShape())
	shape.Register(OptionUnionJSONShape())
}

//shape:shape
func AliasExampleUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "AliasExampleUnionJSON",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "A2",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.A2",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "B2",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.B2",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ExampleUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ExampleUnionJSON",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "A",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.A",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "B",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.B",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "C",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.C",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "D",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.D",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "E",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.E",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "F",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.F",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "H",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.H",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "I",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.I",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "J",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.J",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "K",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.K",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "L",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.L",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "M",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.M",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "N",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.N",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "O",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.O",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "P",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.P",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func OptionUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OptionUnionJSON",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "AZ",
				Type: &shape.RefName{
					Name:          "ListOf2",
					PkgName:       "testasset",
					PkgImportName: "",
					Indexed: []shape.Shape{
						&shape.PointerLike{
							Type: &shape.RefName{
								Name:          "O",
								PkgName:       "testasset",
								PkgImportName: "",
							},
						},
						&shape.RefName{
							Name:          "Location",
							PkgName:       "time",
							PkgImportName: "time",
						},
					},
				},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Some",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.Some",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "None",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "testasset.None",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
