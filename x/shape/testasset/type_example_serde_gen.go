// Code generated by mkunion. DO NOT EDIT.
package testasset

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

var (
	_ json.Unmarshaler = (*List)(nil)
	_ json.Marshaler   = (*List)(nil)
)

func (r *List) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONList(*r)
}
func (r *List) _marshalJSONList(x List) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: List._marshalJSONList: struct; %w", err)
	}
	return result, nil
}
func (r *List) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONList(data)
	if err != nil {
		return fmt.Errorf("testasset: List.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *List) _unmarshalJSONList(data []byte) (List, error) {
	result := List{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: List._unmarshalJSONList: native struct unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*ListOf[any])(nil)
	_ json.Marshaler   = (*ListOf[any])(nil)
)

func (r *ListOf[T]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONListOfLb_T_bL(*r)
}
func (r *ListOf[T]) _marshalJSONListOfLb_T_bL(x ListOf[T]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf[T]._marshalJSONListOfLb_T_bL: struct; %w", err)
	}
	return result, nil
}
func (r *ListOf[T]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONListOfLb_T_bL(data)
	if err != nil {
		return fmt.Errorf("testasset: ListOf[T].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ListOf[T]) _unmarshalJSONListOfLb_T_bL(data []byte) (ListOf[T], error) {
	result := ListOf[T]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: ListOf[T]._unmarshalJSONListOfLb_T_bL: native struct unwrap; %w", err)
	}
	return result, nil
}

var (
	_ json.Unmarshaler = (*ListOf2[any, any])(nil)
	_ json.Marshaler   = (*ListOf2[any, any])(nil)
)

func (r *ListOf2[T1, T2]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONListOf2Lb_T1CommaT2_bL(*r)
}
func (r *ListOf2[T1, T2]) _marshalJSONListOf2Lb_T1CommaT2_bL(x ListOf2[T1, T2]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldData []byte
	fieldData, err = r._marshalJSONT1(x.Data)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf2[T1,T2]._marshalJSONListOf2Lb_T1CommaT2_bL: field name Data; %w", err)
	}
	partial["Data"] = fieldData
	var fieldListOf []byte
	fieldListOf, err = r._marshalJSONListOfLb_T1_bL(x.ListOf)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf2[T1,T2]._marshalJSONListOf2Lb_T1CommaT2_bL: field name ListOf; %w", err)
	}
	partial["list_of"] = fieldListOf
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf2[T1,T2]._marshalJSONListOf2Lb_T1CommaT2_bL: struct; %w", err)
	}
	return result, nil
}
func (r *ListOf2[T1, T2]) _marshalJSONT1(x T1) ([]byte, error) {
	result, err := shared.JSONMarshal[T1](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf2[T1,T2]._marshalJSONT1:; %w", err)
	}
	return result, nil
}
func (r *ListOf2[T1, T2]) _marshalJSONListOfLb_T1_bL(x ListOf[T1]) ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf[T1]](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: ListOf2[T1,T2]._marshalJSONListOfLb_T1_bL:; %w", err)
	}
	return result, nil
}
func (r *ListOf2[T1, T2]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONListOf2Lb_T1CommaT2_bL(data)
	if err != nil {
		return fmt.Errorf("testasset: ListOf2[T1,T2].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ListOf2[T1, T2]) _unmarshalJSONListOf2Lb_T1CommaT2_bL(data []byte) (ListOf2[T1, T2], error) {
	result := ListOf2[T1, T2]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: ListOf2[T1,T2]._unmarshalJSONListOf2Lb_T1CommaT2_bL: native struct unwrap; %w", err)
	}
	if fieldData, ok := partial["Data"]; ok {
		result.Data, err = r._unmarshalJSONT1(fieldData)
		if err != nil {
			return result, fmt.Errorf("testasset: ListOf2[T1,T2]._unmarshalJSONListOf2Lb_T1CommaT2_bL: field Data; %w", err)
		}
	}
	if fieldListOf, ok := partial["list_of"]; ok {
		result.ListOf, err = r._unmarshalJSONListOfLb_T1_bL(fieldListOf)
		if err != nil {
			return result, fmt.Errorf("testasset: ListOf2[T1,T2]._unmarshalJSONListOf2Lb_T1CommaT2_bL: field ListOf; %w", err)
		}
	}
	return result, nil
}
func (r *ListOf2[T1, T2]) _unmarshalJSONT1(data []byte) (T1, error) {
	result, err := shared.JSONUnmarshal[T1](data)
	if err != nil {
		return result, fmt.Errorf("testasset: ListOf2[T1,T2]._unmarshalJSONT1: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *ListOf2[T1, T2]) _unmarshalJSONListOfLb_T1_bL(data []byte) (ListOf[T1], error) {
	result, err := shared.JSONUnmarshal[ListOf[T1]](data)
	if err != nil {
		return result, fmt.Errorf("testasset: ListOf2[T1,T2]._unmarshalJSONListOfLb_T1_bL: native ref unwrap; %w", err)
	}
	return result, nil
}
