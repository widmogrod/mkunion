// Code generated by mkunion. DO NOT EDIT.
package testasset

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
	"time"
)

type AliasExampleVisitor interface {
	VisitA2(v *A2) any
	VisitB2(v *B2) any
}

type AliasExample interface {
	AcceptAliasExample(g AliasExampleVisitor) any
}

var (
	_ AliasExample = (*A2)(nil)
	_ AliasExample = (*B2)(nil)
)

func (r *A2) AcceptAliasExample(v AliasExampleVisitor) any { return v.VisitA2(r) }
func (r *B2) AcceptAliasExample(v AliasExampleVisitor) any { return v.VisitB2(r) }

func MatchAliasExampleR3[T0, T1, T2 any](
	x AliasExample,
	f1 func(x *A2) (T0, T1, T2),
	f2 func(x *B2) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *A2:
		return f1(v)
	case *B2:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchAliasExampleR2[T0, T1 any](
	x AliasExample,
	f1 func(x *A2) (T0, T1),
	f2 func(x *B2) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *A2:
		return f1(v)
	case *B2:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchAliasExampleR1[T0 any](
	x AliasExample,
	f1 func(x *A2) T0,
	f2 func(x *B2) T0,
) T0 {
	switch v := x.(type) {
	case *A2:
		return f1(v)
	case *B2:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchAliasExampleR0(
	x AliasExample,
	f1 func(x *A2),
	f2 func(x *B2),
) {
	switch v := x.(type) {
	case *A2:
		f1(v)
	case *B2:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.A2", A2FromJSON, A2ToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.AliasExample", AliasExampleFromJSON, AliasExampleToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.B2", B2FromJSON, B2ToJSON)
}

type AliasExampleUnionJSON struct {
	Type string          `json:"$type,omitempty"`
	A2   json.RawMessage `json:"testasset.A2,omitempty"`
	B2   json.RawMessage `json:"testasset.B2,omitempty"`
}

func AliasExampleFromJSON(x []byte) (AliasExample, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data AliasExampleUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testasset.AliasExampleFromJSON: %w", err)
	}

	switch data.Type {
	case "testasset.A2":
		return A2FromJSON(data.A2)
	case "testasset.B2":
		return B2FromJSON(data.B2)
	}

	if data.A2 != nil {
		return A2FromJSON(data.A2)
	} else if data.B2 != nil {
		return B2FromJSON(data.B2)
	}
	return nil, fmt.Errorf("testasset.AliasExampleFromJSON: unknown type: %s", data.Type)
}

func AliasExampleToJSON(x AliasExample) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchAliasExampleR2(
		x,
		func(y *A2) ([]byte, error) {
			body, err := A2ToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.AliasExampleToJSON: %w", err)
			}
			return json.Marshal(AliasExampleUnionJSON{
				Type: "testasset.A2",
				A2:   body,
			})
		},
		func(y *B2) ([]byte, error) {
			body, err := B2ToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.AliasExampleToJSON: %w", err)
			}
			return json.Marshal(AliasExampleUnionJSON{
				Type: "testasset.B2",
				B2:   body,
			})
		},
	)
}

func A2FromJSON(x []byte) (*A2, error) {
	result := new(A2)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.A2FromJSON: %w", err)
	}
	return result, nil
}

func A2ToJSON(x *A2) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*A2)(nil)
	_ json.Marshaler   = (*A2)(nil)
)

func B2FromJSON(x []byte) (*B2, error) {
	result := new(B2)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.B2FromJSON: %w", err)
	}
	return result, nil
}

func B2ToJSON(x *B2) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*B2)(nil)
	_ json.Marshaler   = (*B2)(nil)
)

type ExampleVisitor interface {
	VisitA(v *A) any
	VisitB(v *B) any
	VisitC(v *C) any
	VisitD(v *D) any
	VisitE(v *E) any
	VisitF(v *F) any
	VisitH(v *H) any
	VisitI(v *I) any
	VisitJ(v *J) any
	VisitK(v *K) any
	VisitL(v *L) any
	VisitM(v *M) any
	VisitN(v *N) any
	VisitO(v *O) any
	VisitP(v *P) any
}

type Example interface {
	AcceptExample(g ExampleVisitor) any
}

var (
	_ Example = (*A)(nil)
	_ Example = (*B)(nil)
	_ Example = (*C)(nil)
	_ Example = (*D)(nil)
	_ Example = (*E)(nil)
	_ Example = (*F)(nil)
	_ Example = (*H)(nil)
	_ Example = (*I)(nil)
	_ Example = (*J)(nil)
	_ Example = (*K)(nil)
	_ Example = (*L)(nil)
	_ Example = (*M)(nil)
	_ Example = (*N)(nil)
	_ Example = (*O)(nil)
	_ Example = (*P)(nil)
)

func (r *A) AcceptExample(v ExampleVisitor) any { return v.VisitA(r) }
func (r *B) AcceptExample(v ExampleVisitor) any { return v.VisitB(r) }
func (r *C) AcceptExample(v ExampleVisitor) any { return v.VisitC(r) }
func (r *D) AcceptExample(v ExampleVisitor) any { return v.VisitD(r) }
func (r *E) AcceptExample(v ExampleVisitor) any { return v.VisitE(r) }
func (r *F) AcceptExample(v ExampleVisitor) any { return v.VisitF(r) }
func (r *H) AcceptExample(v ExampleVisitor) any { return v.VisitH(r) }
func (r *I) AcceptExample(v ExampleVisitor) any { return v.VisitI(r) }
func (r *J) AcceptExample(v ExampleVisitor) any { return v.VisitJ(r) }
func (r *K) AcceptExample(v ExampleVisitor) any { return v.VisitK(r) }
func (r *L) AcceptExample(v ExampleVisitor) any { return v.VisitL(r) }
func (r *M) AcceptExample(v ExampleVisitor) any { return v.VisitM(r) }
func (r *N) AcceptExample(v ExampleVisitor) any { return v.VisitN(r) }
func (r *O) AcceptExample(v ExampleVisitor) any { return v.VisitO(r) }
func (r *P) AcceptExample(v ExampleVisitor) any { return v.VisitP(r) }

func MatchExampleR3[T0, T1, T2 any](
	x Example,
	f1 func(x *A) (T0, T1, T2),
	f2 func(x *B) (T0, T1, T2),
	f3 func(x *C) (T0, T1, T2),
	f4 func(x *D) (T0, T1, T2),
	f5 func(x *E) (T0, T1, T2),
	f6 func(x *F) (T0, T1, T2),
	f7 func(x *H) (T0, T1, T2),
	f8 func(x *I) (T0, T1, T2),
	f9 func(x *J) (T0, T1, T2),
	f10 func(x *K) (T0, T1, T2),
	f11 func(x *L) (T0, T1, T2),
	f12 func(x *M) (T0, T1, T2),
	f13 func(x *N) (T0, T1, T2),
	f14 func(x *O) (T0, T1, T2),
	f15 func(x *P) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *A:
		return f1(v)
	case *B:
		return f2(v)
	case *C:
		return f3(v)
	case *D:
		return f4(v)
	case *E:
		return f5(v)
	case *F:
		return f6(v)
	case *H:
		return f7(v)
	case *I:
		return f8(v)
	case *J:
		return f9(v)
	case *K:
		return f10(v)
	case *L:
		return f11(v)
	case *M:
		return f12(v)
	case *N:
		return f13(v)
	case *O:
		return f14(v)
	case *P:
		return f15(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchExampleR2[T0, T1 any](
	x Example,
	f1 func(x *A) (T0, T1),
	f2 func(x *B) (T0, T1),
	f3 func(x *C) (T0, T1),
	f4 func(x *D) (T0, T1),
	f5 func(x *E) (T0, T1),
	f6 func(x *F) (T0, T1),
	f7 func(x *H) (T0, T1),
	f8 func(x *I) (T0, T1),
	f9 func(x *J) (T0, T1),
	f10 func(x *K) (T0, T1),
	f11 func(x *L) (T0, T1),
	f12 func(x *M) (T0, T1),
	f13 func(x *N) (T0, T1),
	f14 func(x *O) (T0, T1),
	f15 func(x *P) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *A:
		return f1(v)
	case *B:
		return f2(v)
	case *C:
		return f3(v)
	case *D:
		return f4(v)
	case *E:
		return f5(v)
	case *F:
		return f6(v)
	case *H:
		return f7(v)
	case *I:
		return f8(v)
	case *J:
		return f9(v)
	case *K:
		return f10(v)
	case *L:
		return f11(v)
	case *M:
		return f12(v)
	case *N:
		return f13(v)
	case *O:
		return f14(v)
	case *P:
		return f15(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchExampleR1[T0 any](
	x Example,
	f1 func(x *A) T0,
	f2 func(x *B) T0,
	f3 func(x *C) T0,
	f4 func(x *D) T0,
	f5 func(x *E) T0,
	f6 func(x *F) T0,
	f7 func(x *H) T0,
	f8 func(x *I) T0,
	f9 func(x *J) T0,
	f10 func(x *K) T0,
	f11 func(x *L) T0,
	f12 func(x *M) T0,
	f13 func(x *N) T0,
	f14 func(x *O) T0,
	f15 func(x *P) T0,
) T0 {
	switch v := x.(type) {
	case *A:
		return f1(v)
	case *B:
		return f2(v)
	case *C:
		return f3(v)
	case *D:
		return f4(v)
	case *E:
		return f5(v)
	case *F:
		return f6(v)
	case *H:
		return f7(v)
	case *I:
		return f8(v)
	case *J:
		return f9(v)
	case *K:
		return f10(v)
	case *L:
		return f11(v)
	case *M:
		return f12(v)
	case *N:
		return f13(v)
	case *O:
		return f14(v)
	case *P:
		return f15(v)
	}
	var result1 T0
	return result1
}

func MatchExampleR0(
	x Example,
	f1 func(x *A),
	f2 func(x *B),
	f3 func(x *C),
	f4 func(x *D),
	f5 func(x *E),
	f6 func(x *F),
	f7 func(x *H),
	f8 func(x *I),
	f9 func(x *J),
	f10 func(x *K),
	f11 func(x *L),
	f12 func(x *M),
	f13 func(x *N),
	f14 func(x *O),
	f15 func(x *P),
) {
	switch v := x.(type) {
	case *A:
		f1(v)
	case *B:
		f2(v)
	case *C:
		f3(v)
	case *D:
		f4(v)
	case *E:
		f5(v)
	case *F:
		f6(v)
	case *H:
		f7(v)
	case *I:
		f8(v)
	case *J:
		f9(v)
	case *K:
		f10(v)
	case *L:
		f11(v)
	case *M:
		f12(v)
	case *N:
		f13(v)
	case *O:
		f14(v)
	case *P:
		f15(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.A", AFromJSON, AToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.B", BFromJSON, BToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.C", CFromJSON, CToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.D", DFromJSON, DToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.E", EFromJSON, EToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.Example", ExampleFromJSON, ExampleToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.F", FFromJSON, FToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.H", HFromJSON, HToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.I", IFromJSON, IToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.J", JFromJSON, JToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.K", KFromJSON, KToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.L", LFromJSON, LToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.M", MFromJSON, MToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.N", NFromJSON, NToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.O", OFromJSON, OToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.P", PFromJSON, PToJSON)
}

type ExampleUnionJSON struct {
	Type string          `json:"$type,omitempty"`
	A    json.RawMessage `json:"testasset.A,omitempty"`
	B    json.RawMessage `json:"testasset.B,omitempty"`
	C    json.RawMessage `json:"testasset.C,omitempty"`
	D    json.RawMessage `json:"testasset.D,omitempty"`
	E    json.RawMessage `json:"testasset.E,omitempty"`
	F    json.RawMessage `json:"testasset.F,omitempty"`
	H    json.RawMessage `json:"testasset.H,omitempty"`
	I    json.RawMessage `json:"testasset.I,omitempty"`
	J    json.RawMessage `json:"testasset.J,omitempty"`
	K    json.RawMessage `json:"testasset.K,omitempty"`
	L    json.RawMessage `json:"testasset.L,omitempty"`
	M    json.RawMessage `json:"testasset.M,omitempty"`
	N    json.RawMessage `json:"testasset.N,omitempty"`
	O    json.RawMessage `json:"testasset.O,omitempty"`
	P    json.RawMessage `json:"testasset.P,omitempty"`
}

func ExampleFromJSON(x []byte) (Example, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data ExampleUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testasset.ExampleFromJSON: %w", err)
	}

	switch data.Type {
	case "testasset.A":
		return AFromJSON(data.A)
	case "testasset.B":
		return BFromJSON(data.B)
	case "testasset.C":
		return CFromJSON(data.C)
	case "testasset.D":
		return DFromJSON(data.D)
	case "testasset.E":
		return EFromJSON(data.E)
	case "testasset.F":
		return FFromJSON(data.F)
	case "testasset.H":
		return HFromJSON(data.H)
	case "testasset.I":
		return IFromJSON(data.I)
	case "testasset.J":
		return JFromJSON(data.J)
	case "testasset.K":
		return KFromJSON(data.K)
	case "testasset.L":
		return LFromJSON(data.L)
	case "testasset.M":
		return MFromJSON(data.M)
	case "testasset.N":
		return NFromJSON(data.N)
	case "testasset.O":
		return OFromJSON(data.O)
	case "testasset.P":
		return PFromJSON(data.P)
	}

	if data.A != nil {
		return AFromJSON(data.A)
	} else if data.B != nil {
		return BFromJSON(data.B)
	} else if data.C != nil {
		return CFromJSON(data.C)
	} else if data.D != nil {
		return DFromJSON(data.D)
	} else if data.E != nil {
		return EFromJSON(data.E)
	} else if data.F != nil {
		return FFromJSON(data.F)
	} else if data.H != nil {
		return HFromJSON(data.H)
	} else if data.I != nil {
		return IFromJSON(data.I)
	} else if data.J != nil {
		return JFromJSON(data.J)
	} else if data.K != nil {
		return KFromJSON(data.K)
	} else if data.L != nil {
		return LFromJSON(data.L)
	} else if data.M != nil {
		return MFromJSON(data.M)
	} else if data.N != nil {
		return NFromJSON(data.N)
	} else if data.O != nil {
		return OFromJSON(data.O)
	} else if data.P != nil {
		return PFromJSON(data.P)
	}
	return nil, fmt.Errorf("testasset.ExampleFromJSON: unknown type: %s", data.Type)
}

func ExampleToJSON(x Example) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchExampleR2(
		x,
		func(y *A) ([]byte, error) {
			body, err := AToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.A",
				A:    body,
			})
		},
		func(y *B) ([]byte, error) {
			body, err := BToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.B",
				B:    body,
			})
		},
		func(y *C) ([]byte, error) {
			body, err := CToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.C",
				C:    body,
			})
		},
		func(y *D) ([]byte, error) {
			body, err := DToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.D",
				D:    body,
			})
		},
		func(y *E) ([]byte, error) {
			body, err := EToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.E",
				E:    body,
			})
		},
		func(y *F) ([]byte, error) {
			body, err := FToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.F",
				F:    body,
			})
		},
		func(y *H) ([]byte, error) {
			body, err := HToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.H",
				H:    body,
			})
		},
		func(y *I) ([]byte, error) {
			body, err := IToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.I",
				I:    body,
			})
		},
		func(y *J) ([]byte, error) {
			body, err := JToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.J",
				J:    body,
			})
		},
		func(y *K) ([]byte, error) {
			body, err := KToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.K",
				K:    body,
			})
		},
		func(y *L) ([]byte, error) {
			body, err := LToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.L",
				L:    body,
			})
		},
		func(y *M) ([]byte, error) {
			body, err := MToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.M",
				M:    body,
			})
		},
		func(y *N) ([]byte, error) {
			body, err := NToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.N",
				N:    body,
			})
		},
		func(y *O) ([]byte, error) {
			body, err := OToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.O",
				O:    body,
			})
		},
		func(y *P) ([]byte, error) {
			body, err := PToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("testasset.ExampleToJSON: %w", err)
			}
			return json.Marshal(ExampleUnionJSON{
				Type: "testasset.P",
				P:    body,
			})
		},
	)
}

func AFromJSON(x []byte) (*A, error) {
	result := new(A)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.AFromJSON: %w", err)
	}
	return result, nil
}

func AToJSON(x *A) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*A)(nil)
	_ json.Marshaler   = (*A)(nil)
)

func (r *A) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONA(*r)
}
func (r *A) _marshalJSONA(x A) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldName []byte
	fieldName, err = r._marshalJSONstring(x.Name)
	if err != nil {
		return nil, fmt.Errorf("testasset: A._marshalJSONA: field name Name; %w", err)
	}
	partial["name"] = fieldName
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: A._marshalJSONA: struct; %w", err)
	}
	return result, nil
}
func (r *A) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: A._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *A) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONA(data)
	if err != nil {
		return fmt.Errorf("testasset: A.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *A) _unmarshalJSONA(data []byte) (A, error) {
	result := A{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: A._unmarshalJSONA: native struct unwrap; %w", err)
	}
	if fieldName, ok := partial["name"]; ok {
		result.Name, err = r._unmarshalJSONstring(fieldName)
		if err != nil {
			return result, fmt.Errorf("testasset: A._unmarshalJSONA: field Name; %w", err)
		}
	}
	return result, nil
}
func (r *A) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: A._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func BFromJSON(x []byte) (*B, error) {
	result := new(B)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.BFromJSON: %w", err)
	}
	return result, nil
}

func BToJSON(x *B) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*B)(nil)
	_ json.Marshaler   = (*B)(nil)
)

func (r *B) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONB(*r)
}
func (r *B) _marshalJSONB(x B) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldAge []byte
	fieldAge, err = r._marshalJSONint(x.Age)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONB: field name Age; %w", err)
	}
	partial["age"] = fieldAge
	var fieldA []byte
	fieldA, err = r._marshalJSONPtrA(x.A)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONB: field name A; %w", err)
	}
	if fieldA != nil {
		partial["A"] = fieldA
	}
	var fieldT []byte
	fieldT, err = r._marshalJSONPtrtime_Time(x.T)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONB: field name T; %w", err)
	}
	if fieldT != nil {
		partial["T"] = fieldT
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONB: struct; %w", err)
	}
	return result, nil
}
func (r *B) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *B) _marshalJSONPtrA(x *A) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONA(*x)
}
func (r *B) _marshalJSONA(x A) ([]byte, error) {
	result, err := shared.JSONMarshal[A](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONA:; %w", err)
	}
	return result, nil
}
func (r *B) _marshalJSONPtrtime_Time(x *time.Time) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONtime_Time(*x)
}
func (r *B) _marshalJSONtime_Time(x time.Time) ([]byte, error) {
	result, err := shared.JSONMarshal[time.Time](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._marshalJSONtime_Time:; %w", err)
	}
	return result, nil
}
func (r *B) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONB(data)
	if err != nil {
		return fmt.Errorf("testasset: B.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *B) _unmarshalJSONB(data []byte) (B, error) {
	result := B{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: B._unmarshalJSONB: native struct unwrap; %w", err)
	}
	if fieldAge, ok := partial["age"]; ok {
		result.Age, err = r._unmarshalJSONint(fieldAge)
		if err != nil {
			return result, fmt.Errorf("testasset: B._unmarshalJSONB: field Age; %w", err)
		}
	}
	if fieldA, ok := partial["A"]; ok {
		result.A, err = r._unmarshalJSONPtrA(fieldA)
		if err != nil {
			return result, fmt.Errorf("testasset: B._unmarshalJSONB: field A; %w", err)
		}
	}
	if fieldT, ok := partial["T"]; ok {
		result.T, err = r._unmarshalJSONPtrtime_Time(fieldT)
		if err != nil {
			return result, fmt.Errorf("testasset: B._unmarshalJSONB: field T; %w", err)
		}
	}
	return result, nil
}
func (r *B) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: B._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *B) _unmarshalJSONPtrA(data []byte) (*A, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONA(data)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._unmarshalJSONPtrA: pointer; %w", err)
	}
	return &result, nil
}
func (r *B) _unmarshalJSONA(data []byte) (A, error) {
	result, err := shared.JSONUnmarshal[A](data)
	if err != nil {
		return result, fmt.Errorf("testasset: B._unmarshalJSONA: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *B) _unmarshalJSONPtrtime_Time(data []byte) (*time.Time, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONtime_Time(data)
	if err != nil {
		return nil, fmt.Errorf("testasset: B._unmarshalJSONPtrtime_Time: pointer; %w", err)
	}
	return &result, nil
}
func (r *B) _unmarshalJSONtime_Time(data []byte) (time.Time, error) {
	result, err := shared.JSONUnmarshal[time.Time](data)
	if err != nil {
		return result, fmt.Errorf("testasset: B._unmarshalJSONtime_Time: native ref unwrap; %w", err)
	}
	return result, nil
}

func CFromJSON(x []byte) (*C, error) {
	result := new(C)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.CFromJSON: %w", err)
	}
	return result, nil
}

func CToJSON(x *C) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*C)(nil)
	_ json.Marshaler   = (*C)(nil)
)

func (r *C) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONC(*r)
}
func (r *C) _marshalJSONC(x C) ([]byte, error) {
	return r._marshalJSONstring(string(x))
}
func (r *C) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: C._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *C) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONC(data)
	if err != nil {
		return fmt.Errorf("testasset: C.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *C) _unmarshalJSONC(data []byte) (C, error) {
	var result C
	intermidiary, err := r._unmarshalJSONstring(data)
	if err != nil {
		return result, fmt.Errorf("testasset: C._unmarshalJSONC: alias; %w", err)
	}
	result = C(intermidiary)
	return result, nil
}
func (r *C) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: C._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func DFromJSON(x []byte) (*D, error) {
	result := new(D)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.DFromJSON: %w", err)
	}
	return result, nil
}

func DToJSON(x *D) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*D)(nil)
	_ json.Marshaler   = (*D)(nil)
)

func (r *D) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSOND(*r)
}
func (r *D) _marshalJSOND(x D) ([]byte, error) {
	return r._marshalJSONint64(int64(x))
}
func (r *D) _marshalJSONint64(x int64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: D._marshalJSONint64:; %w", err)
	}
	return result, nil
}
func (r *D) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSOND(data)
	if err != nil {
		return fmt.Errorf("testasset: D.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *D) _unmarshalJSOND(data []byte) (D, error) {
	var result D
	intermidiary, err := r._unmarshalJSONint64(data)
	if err != nil {
		return result, fmt.Errorf("testasset: D._unmarshalJSOND: alias; %w", err)
	}
	result = D(intermidiary)
	return result, nil
}
func (r *D) _unmarshalJSONint64(data []byte) (int64, error) {
	var result int64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: D._unmarshalJSONint64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func EFromJSON(x []byte) (*E, error) {
	result := new(E)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.EFromJSON: %w", err)
	}
	return result, nil
}

func EToJSON(x *E) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*E)(nil)
	_ json.Marshaler   = (*E)(nil)
)

func (r *E) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONE(*r)
}
func (r *E) _marshalJSONE(x E) ([]byte, error) {
	return r._marshalJSONfloat64(float64(x))
}
func (r *E) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: E._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *E) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONE(data)
	if err != nil {
		return fmt.Errorf("testasset: E.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *E) _unmarshalJSONE(data []byte) (E, error) {
	var result E
	intermidiary, err := r._unmarshalJSONfloat64(data)
	if err != nil {
		return result, fmt.Errorf("testasset: E._unmarshalJSONE: alias; %w", err)
	}
	result = E(intermidiary)
	return result, nil
}
func (r *E) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: E._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func FFromJSON(x []byte) (*F, error) {
	result := new(F)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.FFromJSON: %w", err)
	}
	return result, nil
}

func FToJSON(x *F) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*F)(nil)
	_ json.Marshaler   = (*F)(nil)
)

func (r *F) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONF(*r)
}
func (r *F) _marshalJSONF(x F) ([]byte, error) {
	return r._marshalJSONbool(bool(x))
}
func (r *F) _marshalJSONbool(x bool) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: F._marshalJSONbool:; %w", err)
	}
	return result, nil
}
func (r *F) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONF(data)
	if err != nil {
		return fmt.Errorf("testasset: F.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *F) _unmarshalJSONF(data []byte) (F, error) {
	var result F
	intermidiary, err := r._unmarshalJSONbool(data)
	if err != nil {
		return result, fmt.Errorf("testasset: F._unmarshalJSONF: alias; %w", err)
	}
	result = F(intermidiary)
	return result, nil
}
func (r *F) _unmarshalJSONbool(data []byte) (bool, error) {
	var result bool
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: F._unmarshalJSONbool: native primitive unwrap; %w", err)
	}
	return result, nil
}

func HFromJSON(x []byte) (*H, error) {
	result := new(H)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.HFromJSON: %w", err)
	}
	return result, nil
}

func HToJSON(x *H) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*H)(nil)
	_ json.Marshaler   = (*H)(nil)
)

func (r *H) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONH(*r)
}
func (r *H) _marshalJSONH(x H) ([]byte, error) {
	return r._marshalJSONmapLb_string_bLExample(map[string]Example(x))
}
func (r *H) _marshalJSONmapLb_string_bLExample(x map[string]Example) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	for k, v := range x {
		key := string(k)
		value, err := r._marshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testasset: H._marshalJSONmapLb_string_bLExample: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: H._marshalJSONmapLb_string_bLExample:; %w", err)
	}
	return result, nil
}
func (r *H) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: H._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *H) _marshalJSONExample(x Example) ([]byte, error) {
	result, err := shared.JSONMarshal[Example](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: H._marshalJSONExample:; %w", err)
	}
	return result, nil
}
func (r *H) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONH(data)
	if err != nil {
		return fmt.Errorf("testasset: H.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *H) _unmarshalJSONH(data []byte) (H, error) {
	var result H
	intermidiary, err := r._unmarshalJSONmapLb_string_bLExample(data)
	if err != nil {
		return result, fmt.Errorf("testasset: H._unmarshalJSONH: alias; %w", err)
	}
	result = H(intermidiary)
	return result, nil
}
func (r *H) _unmarshalJSONmapLb_string_bLExample(data []byte) (map[string]Example, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: H._unmarshalJSONmapLb_string_bLExample: native map unwrap; %w", err)
	}
	result := make(map[string]Example)
	for k, v := range partial {
		key := string(k)
		value, err := r._unmarshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testasset: H._unmarshalJSONmapLb_string_bLExample: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *H) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: H._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *H) _unmarshalJSONExample(data []byte) (Example, error) {
	result, err := shared.JSONUnmarshal[Example](data)
	if err != nil {
		return result, fmt.Errorf("testasset: H._unmarshalJSONExample: native ref unwrap; %w", err)
	}
	return result, nil
}

func IFromJSON(x []byte) (*I, error) {
	result := new(I)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.IFromJSON: %w", err)
	}
	return result, nil
}

func IToJSON(x *I) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*I)(nil)
	_ json.Marshaler   = (*I)(nil)
)

func (r *I) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONI(*r)
}
func (r *I) _marshalJSONI(x I) ([]byte, error) {
	return r._marshalJSONSliceExample([]Example(x))
}
func (r *I) _marshalJSONSliceExample(x []Example) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONExample(v)
		if err != nil {
			return nil, fmt.Errorf("testasset: I._marshalJSONSliceExample: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: I._marshalJSONSliceExample:; %w", err)
	}
	return result, nil
}
func (r *I) _marshalJSONExample(x Example) ([]byte, error) {
	result, err := shared.JSONMarshal[Example](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: I._marshalJSONExample:; %w", err)
	}
	return result, nil
}
func (r *I) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONI(data)
	if err != nil {
		return fmt.Errorf("testasset: I.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *I) _unmarshalJSONI(data []byte) (I, error) {
	var result I
	intermidiary, err := r._unmarshalJSONSliceExample(data)
	if err != nil {
		return result, fmt.Errorf("testasset: I._unmarshalJSONI: alias; %w", err)
	}
	result = I(intermidiary)
	return result, nil
}
func (r *I) _unmarshalJSONSliceExample(data []byte) ([]Example, error) {
	result := make([]Example, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: I._unmarshalJSONSliceExample: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONExample(v)
		if err != nil {
			return result, fmt.Errorf("testasset: I._unmarshalJSONSliceExample: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *I) _unmarshalJSONExample(data []byte) (Example, error) {
	result, err := shared.JSONUnmarshal[Example](data)
	if err != nil {
		return result, fmt.Errorf("testasset: I._unmarshalJSONExample: native ref unwrap; %w", err)
	}
	return result, nil
}

func JFromJSON(x []byte) (*J, error) {
	result := new(J)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.JFromJSON: %w", err)
	}
	return result, nil
}

func JToJSON(x *J) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*J)(nil)
	_ json.Marshaler   = (*J)(nil)
)

func (r *J) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONJ(*r)
}
func (r *J) _marshalJSONJ(x J) ([]byte, error) {
	return r._marshalJSONLb_2_bLstring([2]string(x))
}
func (r *J) _marshalJSONLb_2_bLstring(x [2]string) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONstring(v)
		if err != nil {
			return nil, fmt.Errorf("testasset: J._marshalJSONLb_2_bLstring: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: J._marshalJSONLb_2_bLstring:; %w", err)
	}
	return result, nil
}
func (r *J) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("testasset: J._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *J) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONJ(data)
	if err != nil {
		return fmt.Errorf("testasset: J.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *J) _unmarshalJSONJ(data []byte) (J, error) {
	var result J
	intermidiary, err := r._unmarshalJSONLb_2_bLstring(data)
	if err != nil {
		return result, fmt.Errorf("testasset: J._unmarshalJSONJ: alias; %w", err)
	}
	result = J(intermidiary)
	return result, nil
}
func (r *J) _unmarshalJSONLb_2_bLstring(data []byte) ([2]string, error) {
	result := [2]string{}
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: J._unmarshalJSONLb_2_bLstring: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONstring(v)
		if err != nil {
			return result, fmt.Errorf("testasset: J._unmarshalJSONLb_2_bLstring: at index %d; %w", i, err)
		}
		result[i] = item
	}
	return result, nil
}
func (r *J) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("testasset: J._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func KFromJSON(x []byte) (*K, error) {
	result := new(K)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.KFromJSON: %w", err)
	}
	return result, nil
}

func KToJSON(x *K) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*K)(nil)
	_ json.Marshaler   = (*K)(nil)
)

func (r *K) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONK(*r)
}
func (r *K) _marshalJSONK(x K) ([]byte, error) {
	return r._marshalJSONA(A(x))
}
func (r *K) _marshalJSONA(x A) ([]byte, error) {
	result, err := shared.JSONMarshal[A](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: K._marshalJSONA:; %w", err)
	}
	return result, nil
}
func (r *K) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONK(data)
	if err != nil {
		return fmt.Errorf("testasset: K.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *K) _unmarshalJSONK(data []byte) (K, error) {
	var result K
	intermidiary, err := r._unmarshalJSONA(data)
	if err != nil {
		return result, fmt.Errorf("testasset: K._unmarshalJSONK: alias; %w", err)
	}
	result = K(intermidiary)
	return result, nil
}
func (r *K) _unmarshalJSONA(data []byte) (A, error) {
	result, err := shared.JSONUnmarshal[A](data)
	if err != nil {
		return result, fmt.Errorf("testasset: K._unmarshalJSONA: native ref unwrap; %w", err)
	}
	return result, nil
}

func LFromJSON(x []byte) (*L, error) {
	result := new(L)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.LFromJSON: %w", err)
	}
	return result, nil
}

func LToJSON(x *L) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*L)(nil)
	_ json.Marshaler   = (*L)(nil)
)

func MFromJSON(x []byte) (*M, error) {
	result := new(M)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.MFromJSON: %w", err)
	}
	return result, nil
}

func MToJSON(x *M) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*M)(nil)
	_ json.Marshaler   = (*M)(nil)
)

func (r *M) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONM(*r)
}
func (r *M) _marshalJSONM(x M) ([]byte, error) {
	return r._marshalJSONList(List(x))
}
func (r *M) _marshalJSONList(x List) ([]byte, error) {
	result, err := shared.JSONMarshal[List](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: M._marshalJSONList:; %w", err)
	}
	return result, nil
}
func (r *M) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONM(data)
	if err != nil {
		return fmt.Errorf("testasset: M.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *M) _unmarshalJSONM(data []byte) (M, error) {
	var result M
	intermidiary, err := r._unmarshalJSONList(data)
	if err != nil {
		return result, fmt.Errorf("testasset: M._unmarshalJSONM: alias; %w", err)
	}
	result = M(intermidiary)
	return result, nil
}
func (r *M) _unmarshalJSONList(data []byte) (List, error) {
	result, err := shared.JSONUnmarshal[List](data)
	if err != nil {
		return result, fmt.Errorf("testasset: M._unmarshalJSONList: native ref unwrap; %w", err)
	}
	return result, nil
}

func NFromJSON(x []byte) (*N, error) {
	result := new(N)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.NFromJSON: %w", err)
	}
	return result, nil
}

func NToJSON(x *N) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*N)(nil)
	_ json.Marshaler   = (*N)(nil)
)

func (r *N) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONN(*r)
}
func (r *N) _marshalJSONN(x N) ([]byte, error) {
	return r._marshalJSONtime_Duration(time.Duration(x))
}
func (r *N) _marshalJSONtime_Duration(x time.Duration) ([]byte, error) {
	result, err := shared.JSONMarshal[time.Duration](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: N._marshalJSONtime_Duration:; %w", err)
	}
	return result, nil
}
func (r *N) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONN(data)
	if err != nil {
		return fmt.Errorf("testasset: N.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *N) _unmarshalJSONN(data []byte) (N, error) {
	var result N
	intermidiary, err := r._unmarshalJSONtime_Duration(data)
	if err != nil {
		return result, fmt.Errorf("testasset: N._unmarshalJSONN: alias; %w", err)
	}
	result = N(intermidiary)
	return result, nil
}
func (r *N) _unmarshalJSONtime_Duration(data []byte) (time.Duration, error) {
	result, err := shared.JSONUnmarshal[time.Duration](data)
	if err != nil {
		return result, fmt.Errorf("testasset: N._unmarshalJSONtime_Duration: native ref unwrap; %w", err)
	}
	return result, nil
}

func OFromJSON(x []byte) (*O, error) {
	result := new(O)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.OFromJSON: %w", err)
	}
	return result, nil
}

func OToJSON(x *O) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*O)(nil)
	_ json.Marshaler   = (*O)(nil)
)

func (r *O) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONO(*r)
}
func (r *O) _marshalJSONO(x O) ([]byte, error) {
	return r._marshalJSONListOfLb_time_Duration_bL(ListOf[time.Duration](x))
}
func (r *O) _marshalJSONListOfLb_time_Duration_bL(x ListOf[time.Duration]) ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf[time.Duration]](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: O._marshalJSONListOfLb_time_Duration_bL:; %w", err)
	}
	return result, nil
}
func (r *O) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONO(data)
	if err != nil {
		return fmt.Errorf("testasset: O.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *O) _unmarshalJSONO(data []byte) (O, error) {
	var result O
	intermidiary, err := r._unmarshalJSONListOfLb_time_Duration_bL(data)
	if err != nil {
		return result, fmt.Errorf("testasset: O._unmarshalJSONO: alias; %w", err)
	}
	result = O(intermidiary)
	return result, nil
}
func (r *O) _unmarshalJSONListOfLb_time_Duration_bL(data []byte) (ListOf[time.Duration], error) {
	result, err := shared.JSONUnmarshal[ListOf[time.Duration]](data)
	if err != nil {
		return result, fmt.Errorf("testasset: O._unmarshalJSONListOfLb_time_Duration_bL: native ref unwrap; %w", err)
	}
	return result, nil
}

func PFromJSON(x []byte) (*P, error) {
	result := new(P)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.PFromJSON: %w", err)
	}
	return result, nil
}

func PToJSON(x *P) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*P)(nil)
	_ json.Marshaler   = (*P)(nil)
)

func (r *P) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONP(*r)
}
func (r *P) _marshalJSONP(x P) ([]byte, error) {
	return r._marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]](x))
}
func (r *P) _marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(x ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]) ([]byte, error) {
	result, err := shared.JSONMarshal[ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: P._marshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL:; %w", err)
	}
	return result, nil
}
func (r *P) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONP(data)
	if err != nil {
		return fmt.Errorf("testasset: P.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *P) _unmarshalJSONP(data []byte) (P, error) {
	var result P
	intermidiary, err := r._unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(data)
	if err != nil {
		return result, fmt.Errorf("testasset: P._unmarshalJSONP: alias; %w", err)
	}
	result = P(intermidiary)
	return result, nil
}
func (r *P) _unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL(data []byte) (ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]], error) {
	result, err := shared.JSONUnmarshal[ListOf2[ListOf[any], *ListOf2[int64, *time.Duration]]](data)
	if err != nil {
		return result, fmt.Errorf("testasset: P._unmarshalJSONListOf2Lb_ListOfLb_any_bLCommaPtrListOf2Lb_int64CommaPtrtime_Duration_bL_bL: native ref unwrap; %w", err)
	}
	return result, nil
}

type OptionVisitor[AZ ListOf2[*O, time.Location]] interface {
	VisitSome(v *Some[AZ]) any
	VisitNone(v *None[AZ]) any
}

type Option[AZ ListOf2[*O, time.Location]] interface {
	AcceptOption(g OptionVisitor[AZ]) any
}

var (
	_ Option[ListOf2[*O, time.Location]] = (*Some[ListOf2[*O, time.Location]])(nil)
	_ Option[ListOf2[*O, time.Location]] = (*None[ListOf2[*O, time.Location]])(nil)
)

func (r *Some[AZ]) AcceptOption(v OptionVisitor[AZ]) any { return v.VisitSome(r) }
func (r *None[AZ]) AcceptOption(v OptionVisitor[AZ]) any { return v.VisitNone(r) }

func MatchOptionR3[AZ ListOf2[*O, time.Location], T0, T1, T2 any](
	x Option[AZ],
	f1 func(x *Some[AZ]) (T0, T1, T2),
	f2 func(x *None[AZ]) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Some[AZ]:
		return f1(v)
	case *None[AZ]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchOptionR2[AZ ListOf2[*O, time.Location], T0, T1 any](
	x Option[AZ],
	f1 func(x *Some[AZ]) (T0, T1),
	f2 func(x *None[AZ]) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Some[AZ]:
		return f1(v)
	case *None[AZ]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchOptionR1[AZ ListOf2[*O, time.Location], T0 any](
	x Option[AZ],
	f1 func(x *Some[AZ]) T0,
	f2 func(x *None[AZ]) T0,
) T0 {
	switch v := x.(type) {
	case *Some[AZ]:
		return f1(v)
	case *None[AZ]:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchOptionR0[AZ ListOf2[*O, time.Location]](
	x Option[AZ],
	f1 func(x *Some[AZ]),
	f2 func(x *None[AZ]),
) {
	switch v := x.(type) {
	case *Some[AZ]:
		f1(v)
	case *None[AZ]:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.None[ListOf2[*O,time.Location]]", NoneFromJSON[ListOf2[*O, time.Location]], NoneToJSON[ListOf2[*O, time.Location]])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.Option[ListOf2[*O,time.Location]]", OptionFromJSON[ListOf2[*O, time.Location]], OptionToJSON[ListOf2[*O, time.Location]])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/x/shape/testasset.Some[ListOf2[*O,time.Location]]", SomeFromJSON[ListOf2[*O, time.Location]], SomeToJSON[ListOf2[*O, time.Location]])
}

type OptionUnionJSON[AZ ListOf2[*O, time.Location]] struct {
	Type string          `json:"$type,omitempty"`
	Some json.RawMessage `json:"testasset.Some,omitempty"`
	None json.RawMessage `json:"testasset.None,omitempty"`
}

func OptionFromJSON[AZ ListOf2[*O, time.Location]](x []byte) (Option[AZ], error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data OptionUnionJSON[AZ]
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("testasset.OptionFromJSON[AZ]: %w", err)
	}

	switch data.Type {
	case "testasset.Some":
		return SomeFromJSON[AZ](data.Some)
	case "testasset.None":
		return NoneFromJSON[AZ](data.None)
	}

	if data.Some != nil {
		return SomeFromJSON[AZ](data.Some)
	} else if data.None != nil {
		return NoneFromJSON[AZ](data.None)
	}
	return nil, fmt.Errorf("testasset.OptionFromJSON[AZ]: unknown type: %s", data.Type)
}

func OptionToJSON[AZ ListOf2[*O, time.Location]](x Option[AZ]) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchOptionR2(
		x,
		func(y *Some[AZ]) ([]byte, error) {
			body, err := SomeToJSON[AZ](y)
			if err != nil {
				return nil, fmt.Errorf("testasset.OptionToJSON[AZ]: %w", err)
			}
			return json.Marshal(OptionUnionJSON[AZ]{
				Type: "testasset.Some",
				Some: body,
			})
		},
		func(y *None[AZ]) ([]byte, error) {
			body, err := NoneToJSON[AZ](y)
			if err != nil {
				return nil, fmt.Errorf("testasset.OptionToJSON[AZ]: %w", err)
			}
			return json.Marshal(OptionUnionJSON[AZ]{
				Type: "testasset.None",
				None: body,
			})
		},
	)
}

func SomeFromJSON[AZ ListOf2[*O, time.Location]](x []byte) (*Some[AZ], error) {
	result := new(Some[AZ])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.SomeFromJSON[AZ]: %w", err)
	}
	return result, nil
}

func SomeToJSON[AZ ListOf2[*O, time.Location]](x *Some[AZ]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Some[ListOf2[*O, time.Location]])(nil)
	_ json.Marshaler   = (*Some[ListOf2[*O, time.Location]])(nil)
)

func (r *Some[AZ]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSomeLb_AZ_bL(*r)
}
func (r *Some[AZ]) _marshalJSONSomeLb_AZ_bL(x Some[AZ]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldData []byte
	fieldData, err = r._marshalJSONAZ(x.Data)
	if err != nil {
		return nil, fmt.Errorf("testasset: Some[AZ]._marshalJSONSomeLb_AZ_bL: field name Data; %w", err)
	}
	partial["Data"] = fieldData
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: Some[AZ]._marshalJSONSomeLb_AZ_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Some[AZ]) _marshalJSONAZ(x AZ) ([]byte, error) {
	result, err := shared.JSONMarshal[AZ](x)
	if err != nil {
		return nil, fmt.Errorf("testasset: Some[AZ]._marshalJSONAZ:; %w", err)
	}
	return result, nil
}
func (r *Some[AZ]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSomeLb_AZ_bL(data)
	if err != nil {
		return fmt.Errorf("testasset: Some[AZ].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Some[AZ]) _unmarshalJSONSomeLb_AZ_bL(data []byte) (Some[AZ], error) {
	result := Some[AZ]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: Some[AZ]._unmarshalJSONSomeLb_AZ_bL: native struct unwrap; %w", err)
	}
	if fieldData, ok := partial["Data"]; ok {
		result.Data, err = r._unmarshalJSONAZ(fieldData)
		if err != nil {
			return result, fmt.Errorf("testasset: Some[AZ]._unmarshalJSONSomeLb_AZ_bL: field Data; %w", err)
		}
	}
	return result, nil
}
func (r *Some[AZ]) _unmarshalJSONAZ(data []byte) (AZ, error) {
	result, err := shared.JSONUnmarshal[AZ](data)
	if err != nil {
		return result, fmt.Errorf("testasset: Some[AZ]._unmarshalJSONAZ: native ref unwrap; %w", err)
	}
	return result, nil
}

func NoneFromJSON[AZ ListOf2[*O, time.Location]](x []byte) (*None[AZ], error) {
	result := new(None[AZ])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("testasset.NoneFromJSON[AZ]: %w", err)
	}
	return result, nil
}

func NoneToJSON[AZ ListOf2[*O, time.Location]](x *None[AZ]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*None[ListOf2[*O, time.Location]])(nil)
	_ json.Marshaler   = (*None[ListOf2[*O, time.Location]])(nil)
)

func (r *None[AZ]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONNoneLb_AZ_bL(*r)
}
func (r *None[AZ]) _marshalJSONNoneLb_AZ_bL(x None[AZ]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("testasset: None[AZ]._marshalJSONNoneLb_AZ_bL: struct; %w", err)
	}
	return result, nil
}
func (r *None[AZ]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONNoneLb_AZ_bL(data)
	if err != nil {
		return fmt.Errorf("testasset: None[AZ].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *None[AZ]) _unmarshalJSONNoneLb_AZ_bL(data []byte) (None[AZ], error) {
	result := None[AZ]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("testasset: None[AZ]._unmarshalJSONNoneLb_AZ_bL: native struct unwrap; %w", err)
	}
	return result, nil
}
