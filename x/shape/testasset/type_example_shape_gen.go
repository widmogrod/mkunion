// Code generated by mkunion. DO NOT EDIT.
package testasset

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(A2Shape())
	shape.Register(AShape())
	shape.Register(AliasExampleShape())
	shape.Register(B2Shape())
	shape.Register(BShape())
	shape.Register(CShape())
	shape.Register(DShape())
	shape.Register(EShape())
	shape.Register(ExampleShape())
	shape.Register(FShape())
	shape.Register(HShape())
	shape.Register(IShape())
	shape.Register(JShape())
	shape.Register(KShape())
	shape.Register(LShape())
	shape.Register(ListOf2Shape())
	shape.Register(ListOfShape())
	shape.Register(ListShape())
	shape.Register(MShape())
	shape.Register(NShape())
	shape.Register(NoneShape())
	shape.Register(OShape())
	shape.Register(OptionShape())
	shape.Register(PShape())
	shape.Register(SomeShape())
	shape.Register(_someStructShape())
}

//shape:shape

func AliasExampleShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "AliasExample",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Variant: []shape.Shape{
			A2Shape(),
			B2Shape(),
		},
	}
}

func A2Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "A2",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "AliasExample",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "A",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		},
	}
}

func B2Shape() shape.Shape {
	return &shape.AliasLike{
		Name:          "B2",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "AliasExample",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "B",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		},
	}
}

//shape:shape

func ExampleShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Example",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Variant: []shape.Shape{
			AShape(),
			BShape(),
			CShape(),
			DShape(),
			EShape(),
			FShape(),
			HShape(),
			IShape(),
			JShape(),
			KShape(),
			LShape(),
			MShape(),
			NShape(),
			OShape(),
			PShape(),
		},
	}
}

func AShape() shape.Shape {
	return &shape.StructLike{
		Name:          "A",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Desc: shape.Ptr("Name of the person"),
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "Name of the person",
					},
					"json": {
						Value: "name",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
	}
}

func BShape() shape.Shape {
	return &shape.StructLike{
		Name:          "B",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Fields: []*shape.FieldLike{
			{
				Name: "Age",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "age",
					},
				},
			},
			{
				Name: "A",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "A",
						PkgName:       "testasset",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
					},
				},
			},
			{
				Name: "T",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
	}
}

func CShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "C",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

func DShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "D",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int64{},
			},
		},
	}
}

func EShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "E",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Float64{},
			},
		},
	}
}

func FShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "F",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
	}
}

func HShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "H",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.MapLike{
			Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			Val: &shape.RefName{
				Name:          "Example",
				PkgName:       "testasset",
				PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
			},
		},
	}
}

func IShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "I",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.ListLike{
			Element: &shape.RefName{
				Name:          "Example",
				PkgName:       "testasset",
				PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
			},
		},
	}
}

func JShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "J",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.ListLike{
			Element:  &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			ArrayLen: shape.Ptr(2),
		},
	}
}

func KShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "K",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.RefName{
			Name:          "A",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		},
	}
}

func LShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "L",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		IsAlias: true,
		Type: &shape.RefName{
			Name:          "List",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		},
	}
}

func MShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "M",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"json": {
				Value: "m_list",
				Options: []string{
					"omitempty",
				},
			},
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.RefName{
			Name:          "List",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		},
	}
}

func NShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "N",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.RefName{
			Name:          "Duration",
			PkgName:       "time",
			PkgImportName: "time",
		},
	}
}

func OShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "O",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.RefName{
			Name:          "ListOf",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "Duration",
					PkgName:       "time",
					PkgImportName: "time",
				},
			},
		},
	}
}

func PShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "P",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Example",
			},
		},
		Type: &shape.RefName{
			Name:          "ListOf2",
			PkgName:       "testasset",
			PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "ListOf",
					PkgName:       "testasset",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
					Indexed: []shape.Shape{
						&shape.Any{},
					},
				},
				&shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ListOf2",
						PkgName:       "testasset",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
						Indexed: []shape.Shape{
							&shape.PrimitiveLike{
								Kind: &shape.NumberLike{
									Kind: &shape.Int64{},
								},
							},
							&shape.PointerLike{
								Type: &shape.RefName{
									Name:          "Duration",
									PkgName:       "time",
									PkgImportName: "time",
								},
							},
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ListShape() shape.Shape {
	return &shape.StructLike{
		Name:          "List",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Tags: map[string]shape.Tag{
			"json": {
				Value: "list",
				Options: []string{
					"omitempty",
				},
			},
			"serde": {
				Value: "json",
			},
		},
	}
}

//shape:shape
func ListOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ListOf",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
			"json": {
				Value: "list_of",
				Options: []string{
					"omitempty",
				},
			},
		},
	}
}

//shape:shape
func ListOf2Shape() shape.Shape {
	return &shape.StructLike{
		Name:          "ListOf2",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T1",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "T2",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "T1",
					PkgName:       "",
					PkgImportName: "",
				},
			},
			{
				Name: "ListOf",
				Type: &shape.RefName{
					Name:          "ListOf",
					PkgName:       "testasset",
					PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
					Indexed: []shape.Shape{
						&shape.RefName{
							Name:          "T1",
							PkgName:       "",
							PkgImportName: "",
						},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "list_of",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"serde": {
				Value: "json",
			},
			"json": {
				Value: "list_of_2",
				Options: []string{
					"omitempty",
				},
			},
		},
	}
}

//shape:shape

func OptionShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Option",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "AZ",
				Type: &shape.RefName{
					Name:          "ListOf2",
					PkgName:       "testasset",
					PkgImportName: "",
					Indexed: []shape.Shape{
						&shape.PointerLike{
							Type: &shape.RefName{
								Name:          "O",
								PkgName:       "testasset",
								PkgImportName: "",
							},
						},
						&shape.RefName{
							Name:          "Location",
							PkgName:       "time",
							PkgImportName: "time",
						},
					},
				},
			},
		},
		Variant: []shape.Shape{
			SomeShape(),
			NoneShape(),
		},
	}
}

func SomeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Some",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "AZ",
				Type: &shape.RefName{
					Name:          "ListOf2",
					PkgName:       "testasset",
					PkgImportName: "",
					Indexed: []shape.Shape{
						&shape.PointerLike{
							Type: &shape.RefName{
								Name:          "O",
								PkgName:       "testasset",
								PkgImportName: "",
							},
						},
						&shape.RefName{
							Name:          "Location",
							PkgName:       "time",
							PkgImportName: "time",
						},
					},
				},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Data",
				Type: &shape.RefName{
					Name:          "AZ",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Option",
			},
		},
	}
}

func NoneShape() shape.Shape {
	return &shape.StructLike{
		Name:          "None",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "AZ",
				Type: &shape.RefName{
					Name:          "ListOf2",
					PkgName:       "testasset",
					PkgImportName: "",
					Indexed: []shape.Shape{
						&shape.PointerLike{
							Type: &shape.RefName{
								Name:          "O",
								PkgName:       "testasset",
								PkgImportName: "",
							},
						},
						&shape.RefName{
							Name:          "Location",
							PkgName:       "time",
							PkgImportName: "time",
						},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Option",
			},
		},
	}
}

//shape:shape
func _someStructShape() shape.Shape {
	return &shape.StructLike{
		Name:          "_someStruct",
		PkgName:       "testasset",
		PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
		Fields: []*shape.FieldLike{
			{
				Name: "B",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "ListOf2",
						PkgName:       "testasset",
						PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
						Indexed: []shape.Shape{
							&shape.PointerLike{
								Type: &shape.RefName{
									Name:          "K",
									PkgName:       "testasset",
									PkgImportName: "github.com/widmogrod/mkunion/x/shape/testasset",
								},
							},
							&shape.RefName{
								Name:          "Weekday",
								PkgName:       "time",
								PkgImportName: "time",
							},
						},
					},
				},
			},
		},
	}
}
