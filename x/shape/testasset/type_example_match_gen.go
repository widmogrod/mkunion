// Code generated by mkunion. DO NOT EDIT.
package testasset

func MyMatchWithCustomNameR0[T0 Example, T1 Example](
	t0 T0,
	t1 T1,
	f0 func(x0 E, x1 E),
	f1 func(x0 Example, x1 Example),
) {
	c0t0, c0t0ok := any(t0).(E)
	c0t1, c0t1ok := any(t1).(E)
	if c0t0ok && c0t1ok {
		f0(c0t0, c0t1)
		return
	}
	c1t0, c1t0ok := any(t0).(Example)
	c1t1, c1t1ok := any(t1).(Example)
	if c1t0ok && c1t1ok {
		f1(c1t0, c1t1)
		return
	}
	panic("MyMatchWithCustomNameR0 is not exhaustive")
}

func MyMatchWithCustomNameR1[T0 Example, T1 Example, TOut1 any](
	t0 T0,
	t1 T1,
	f0 func(x0 E, x1 E) TOut1,
	f1 func(x0 Example, x1 Example) TOut1,
) TOut1 {
	c0t0, c0t0ok := any(t0).(E)
	c0t1, c0t1ok := any(t1).(E)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(Example)
	c1t1, c1t1ok := any(t1).(Example)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	panic("MyMatchWithCustomNameR1 is not exhaustive")
}

func MyMatchWithCustomNameR2[T0 Example, T1 Example, TOut1 any, TOut2 any](
	t0 T0,
	t1 T1,
	f0 func(x0 E, x1 E) (TOut1, TOut2),
	f1 func(x0 Example, x1 Example) (TOut1, TOut2),
) (TOut1, TOut2) {
	c0t0, c0t0ok := any(t0).(E)
	c0t1, c0t1ok := any(t1).(E)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(Example)
	c1t1, c1t1ok := any(t1).(Example)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	panic("MyMatchWithCustomNameR2 is not exhaustive")
}

func MyMatchWithCustomNameR3[T0 Example, T1 Example, TOut1 any, TOut2 any, TOut3 any](
	t0 T0,
	t1 T1,
	f0 func(x0 E, x1 E) (TOut1, TOut2, TOut3),
	f1 func(x0 Example, x1 Example) (TOut1, TOut2, TOut3),
) (TOut1, TOut2, TOut3) {
	c0t0, c0t0ok := any(t0).(E)
	c0t1, c0t1ok := any(t1).(E)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(Example)
	c1t1, c1t1ok := any(t1).(Example)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	panic("MyMatchWithCustomNameR3 is not exhaustive")
}
