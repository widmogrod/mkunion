// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(ClosedShape())
	shape.Register(ConnectedShape())
	shape.Register(ConnectingShape())
	shape.Register(ConnectionShape())
	shape.Register(DisconnectedShape())
	shape.Register(OpenShape())
	shape.Register(UnopenedShape())
}

//shape:shape

func ConnectionShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Connection",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "State",
				Type: &shape.Any{},
			},
		},
		Variant: []shape.Shape{
			DisconnectedShape(),
			ConnectingShape(),
			ConnectedShape(),
		},
	}
}

func DisconnectedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Disconnected",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "State",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Connection",
			},
		},
	}
}

func ConnectingShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Connecting",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "State",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Addr",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Connection",
			},
		},
	}
}

func ConnectedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Connected",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "State",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Conn",
				Type: &shape.RefName{
					Name:          "Conn",
					PkgName:       "net",
					PkgImportName: "net",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Connection",
			},
		},
	}
}

//shape:shape
func ClosedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Closed",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
	}
}

//shape:shape
func OpenShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Open",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
	}
}

//shape:shape
func UnopenedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Unopened",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
	}
}
