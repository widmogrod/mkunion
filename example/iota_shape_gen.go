// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CircleShape())
	shape.Register(RectangleShape())
	shape.Register(ShapeShape())
	shape.Register(ShapeTypeShape())
	shape.Register(TriangleShape())
}

//shape:shape
func CircleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Circle",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Radius",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
	}
}

//shape:shape
func RectangleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Rectangle",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Width",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
			{
				Name: "Height",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
	}
}

//shape:shape
func ShapeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Shape",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.RefName{
					Name:          "ShapeType",
					PkgName:       "example",
					PkgImportName: "github.com/widmogrod/mkunion/example",
				},
			},
			{
				Name: "Circle",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Circle",
						PkgName:       "example",
						PkgImportName: "github.com/widmogrod/mkunion/example",
					},
				},
			},
			{
				Name: "Rect",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Rectangle",
						PkgName:       "example",
						PkgImportName: "github.com/widmogrod/mkunion/example",
					},
				},
			},
			{
				Name: "Triangle",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Triangle",
						PkgName:       "example",
						PkgImportName: "github.com/widmogrod/mkunion/example",
					},
				},
			},
		},
	}
}

//shape:shape
func ShapeTypeShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ShapeType",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int{},
			},
		},
	}
}

//shape:shape
func TriangleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Triangle",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Base",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
			{
				Name: "Height",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
	}
}
