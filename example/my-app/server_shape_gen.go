// Code generated by mkunion. DO NOT EDIT.
package main

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(ChatCMDShape())
	shape.Register(ChatResponsesShape())
	shape.Register(ChatResultShape())
	shape.Register(CommandShape())
	shape.Register(ExprShape())
	shape.Register(FindRecordsShape())
	shape.Register(FunctionInputShape())
	shape.Register(FunctionOutputShape())
	shape.Register(GenerateImageShape())
	shape.Register(ListWorkflowsFnShape())
	shape.Register(PageResultShape())
	shape.Register(PredicateShape())
	shape.Register(RefreshFlowsShape())
	shape.Register(RefreshStatesShape())
	shape.Register(ReshaperShape())
	shape.Register(SchemaShape())
	shape.Register(ServiceShape())
	shape.Register(StateShape())
	shape.Register(SystemResponseShape())
	shape.Register(UpdateRecordsShape())
	shape.Register(UserMessageShape())
	shape.Register(UserResponseShape())
	shape.Register(WorkflowShape())
}

//shape:shape

func ChatCMDShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "ChatCMD",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Variant: []shape.Shape{
			UserMessageShape(),
		},
	}
}

func UserMessageShape() shape.Shape {
	return &shape.StructLike{
		Name:          "UserMessage",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Message",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "ChatCMD",
			},
		},
	}
}

//shape:shape

func ChatResultShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "ChatResult",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Variant: []shape.Shape{
			SystemResponseShape(),
			UserResponseShape(),
			ChatResponsesShape(),
		},
	}
}

func SystemResponseShape() shape.Shape {
	return &shape.StructLike{
		Name:          "SystemResponse",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Message",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
			{
				Name: "ToolCalls",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "ToolCall",
						PkgName:       "openai",
						PkgImportName: "github.com/sashabaranov/go-openai",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "ChatResult",
			},
		},
	}
}

func UserResponseShape() shape.Shape {
	return &shape.StructLike{
		Name:          "UserResponse",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Message",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "ChatResult",
			},
		},
	}
}

func ChatResponsesShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ChatResponses",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Responses",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "ChatResult",
						PkgName:       "main",
						PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "ChatResult",
			},
		},
	}
}

//shape:shape
func CommandShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Command",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Command",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func ExprShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Expr",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Expr",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func FindRecordsShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "FindRecords",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "FindingRecords",
			PkgName:       "schemaless",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "Record",
					PkgName:       "schemaless",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					Indexed: []shape.Shape{
						&shape.Any{},
					},
				},
			},
		},
	}
}

//shape:shape
func FunctionInputShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "FunctionInput",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "FunctionInput",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func FunctionOutputShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "FunctionOutput",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "FunctionOutput",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func GenerateImageShape() shape.Shape {
	return &shape.StructLike{
		Name:          "GenerateImage",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Width",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
				Desc: shape.Ptr("width of image as int between 50 and 500"),
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "width of image as int between 50 and 500",
					},
				},
			},
			{
				Name: "Height",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
				Desc: shape.Ptr("height of image as int between 50 and 500"),
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "height of image as int between 50 and 500",
					},
				},
			},
		},
	}
}

//shape:shape
func ListWorkflowsFnShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ListWorkflowsFn",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		Fields: []*shape.FieldLike{
			{
				Name: "Count",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
				Desc: shape.Ptr("total number of words in sentence"),
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "total number of words in sentence",
					},
				},
			},
			{
				Name: "Words",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
				Desc: shape.Ptr("list of words in sentence"),
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "list of words in sentence",
					},
				},
			},
			{
				Name: "EnumTest",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Desc: shape.Ptr("skip words"),
				Guard: &shape.Enum{
					Val: []string{
						"hello",
						"world",
					},
				},
				Tags: map[string]shape.Tag{
					"desc": {
						Value: "skip words",
					},
					"enum": {
						Value: "hello",
						Options: []string{
							"world",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func PageResultShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "PageResult",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "PageResult",
			PkgName:       "schemaless",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "Record",
					PkgName:       "schemaless",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					Indexed: []shape.Shape{
						&shape.Any{},
					},
				},
			},
		},
	}
}

//shape:shape
func PredicateShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Predicate",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Predicate",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func RefreshFlowsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "RefreshFlows",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
	}
}

//shape:shape
func RefreshStatesShape() shape.Shape {
	return &shape.StructLike{
		Name:          "RefreshStates",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
	}
}

//shape:shape
func ReshaperShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Reshaper",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Reshaper",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func SchemaShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Schema",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Schema",
			PkgName:       "schema",
			PkgImportName: "github.com/widmogrod/mkunion/x/schema",
		},
	}
}

//shape:shape
func ServiceShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Service",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "Dep",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "CMD",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "State",
				Type: &shape.Any{},
			},
		},
	}
}

//shape:shape
func StateShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "State",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "State",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}

//shape:shape
func UpdateRecordsShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "UpdateRecords",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "UpdateRecords",
			PkgName:       "schemaless",
			PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "Record",
					PkgName:       "schemaless",
					PkgImportName: "github.com/widmogrod/mkunion/x/storage/schemaless",
					Indexed: []shape.Shape{
						&shape.Any{},
					},
				},
			},
		},
	}
}

//shape:shape
func WorkflowShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Workflow",
		PkgName:       "main",
		PkgImportName: "github.com/widmogrod/mkunion/example/my-app",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Workflow",
			PkgName:       "workflow",
			PkgImportName: "github.com/widmogrod/mkunion/x/workflow",
		},
	}
}
