// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type OptionVisitor[T any] interface {
	VisitNone(v *None[T]) any
	VisitSome(v *Some[T]) any
}

type Option[T any] interface {
	AcceptOption(g OptionVisitor[T]) any
}

var (
	_ Option[any] = (*None[any])(nil)
	_ Option[any] = (*Some[any])(nil)
)

func (r *None[T]) AcceptOption(v OptionVisitor[T]) any { return v.VisitNone(r) }
func (r *Some[T]) AcceptOption(v OptionVisitor[T]) any { return v.VisitSome(r) }

func MatchOptionR3[T any, T0, T1, T2 any](
	x Option[T],
	f1 func(x *None[T]) (T0, T1, T2),
	f2 func(x *Some[T]) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *None[T]:
		return f1(v)
	case *Some[T]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchOptionR2[T any, T0, T1 any](
	x Option[T],
	f1 func(x *None[T]) (T0, T1),
	f2 func(x *Some[T]) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *None[T]:
		return f1(v)
	case *Some[T]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchOptionR1[T any, T0 any](
	x Option[T],
	f1 func(x *None[T]) T0,
	f2 func(x *Some[T]) T0,
) T0 {
	switch v := x.(type) {
	case *None[T]:
		return f1(v)
	case *Some[T]:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchOptionR0[T any](
	x Option[T],
	f1 func(x *None[T]),
	f2 func(x *Some[T]),
) {
	switch v := x.(type) {
	case *None[T]:
		f1(v)
	case *Some[T]:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.None[any]", NoneFromJSON[any], NoneToJSON[any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Option[any]", OptionFromJSON[any], OptionToJSON[any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Some[any]", SomeFromJSON[any], SomeToJSON[any])
}

type OptionUnionJSON[T any] struct {
	Type string          `json:"$type,omitempty"`
	None json.RawMessage `json:"example.None,omitempty"`
	Some json.RawMessage `json:"example.Some,omitempty"`
}

func OptionFromJSON[T any](x []byte) (Option[T], error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data OptionUnionJSON[T]
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.OptionFromJSON[T]: %w", err)
	}

	switch data.Type {
	case "example.None":
		return NoneFromJSON[T](data.None)
	case "example.Some":
		return SomeFromJSON[T](data.Some)
	}

	if data.None != nil {
		return NoneFromJSON[T](data.None)
	} else if data.Some != nil {
		return SomeFromJSON[T](data.Some)
	}
	return nil, fmt.Errorf("example.OptionFromJSON[T]: unknown type: %s", data.Type)
}

func OptionToJSON[T any](x Option[T]) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchOptionR2(
		x,
		func(y *None[T]) ([]byte, error) {
			body, err := NoneToJSON[T](y)
			if err != nil {
				return nil, fmt.Errorf("example.OptionToJSON[T]: %w", err)
			}
			return json.Marshal(OptionUnionJSON[T]{
				Type: "example.None",
				None: body,
			})
		},
		func(y *Some[T]) ([]byte, error) {
			body, err := SomeToJSON[T](y)
			if err != nil {
				return nil, fmt.Errorf("example.OptionToJSON[T]: %w", err)
			}
			return json.Marshal(OptionUnionJSON[T]{
				Type: "example.Some",
				Some: body,
			})
		},
	)
}

func NoneFromJSON[T any](x []byte) (*None[T], error) {
	result := new(None[T])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.NoneFromJSON[T]: %w", err)
	}
	return result, nil
}

func NoneToJSON[T any](x *None[T]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*None[any])(nil)
	_ json.Marshaler   = (*None[any])(nil)
)

func (r *None[T]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONNoneLb_T_bL(*r)
}
func (r *None[T]) _marshalJSONNoneLb_T_bL(x None[T]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: None[T]._marshalJSONNoneLb_T_bL: struct; %w", err)
	}
	return result, nil
}
func (r *None[T]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONNoneLb_T_bL(data)
	if err != nil {
		return fmt.Errorf("example: None[T].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *None[T]) _unmarshalJSONNoneLb_T_bL(data []byte) (None[T], error) {
	result := None[T]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: None[T]._unmarshalJSONNoneLb_T_bL: native struct unwrap; %w", err)
	}
	return result, nil
}

func SomeFromJSON[T any](x []byte) (*Some[T], error) {
	result := new(Some[T])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.SomeFromJSON[T]: %w", err)
	}
	return result, nil
}

func SomeToJSON[T any](x *Some[T]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Some[any])(nil)
	_ json.Marshaler   = (*Some[any])(nil)
)

func (r *Some[T]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSomeLb_T_bL(*r)
}
func (r *Some[T]) _marshalJSONSomeLb_T_bL(x Some[T]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldValue []byte
	fieldValue, err = r._marshalJSONT(x.Value)
	if err != nil {
		return nil, fmt.Errorf("example: Some[T]._marshalJSONSomeLb_T_bL: field name Value; %w", err)
	}
	partial["Value"] = fieldValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Some[T]._marshalJSONSomeLb_T_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Some[T]) _marshalJSONT(x T) ([]byte, error) {
	result, err := shared.JSONMarshal[T](x)
	if err != nil {
		return nil, fmt.Errorf("example: Some[T]._marshalJSONT:; %w", err)
	}
	return result, nil
}
func (r *Some[T]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSomeLb_T_bL(data)
	if err != nil {
		return fmt.Errorf("example: Some[T].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Some[T]) _unmarshalJSONSomeLb_T_bL(data []byte) (Some[T], error) {
	result := Some[T]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Some[T]._unmarshalJSONSomeLb_T_bL: native struct unwrap; %w", err)
	}
	if fieldValue, ok := partial["Value"]; ok {
		result.Value, err = r._unmarshalJSONT(fieldValue)
		if err != nil {
			return result, fmt.Errorf("example: Some[T]._unmarshalJSONSomeLb_T_bL: field Value; %w", err)
		}
	}
	return result, nil
}
func (r *Some[T]) _unmarshalJSONT(data []byte) (T, error) {
	result, err := shared.JSONUnmarshal[T](data)
	if err != nil {
		return result, fmt.Errorf("example: Some[T]._unmarshalJSONT: native ref unwrap; %w", err)
	}
	return result, nil
}

type ResultVisitor[T any, E any] interface {
	VisitOk(v *Ok[T, E]) any
	VisitErr(v *Err[T, E]) any
}

type Result[T any, E any] interface {
	AcceptResult(g ResultVisitor[T, E]) any
}

var (
	_ Result[any, any] = (*Ok[any, any])(nil)
	_ Result[any, any] = (*Err[any, any])(nil)
)

func (r *Ok[T, E]) AcceptResult(v ResultVisitor[T, E]) any  { return v.VisitOk(r) }
func (r *Err[T, E]) AcceptResult(v ResultVisitor[T, E]) any { return v.VisitErr(r) }

func MatchResultR3[T any, E any, T0, T1, T2 any](
	x Result[T, E],
	f1 func(x *Ok[T, E]) (T0, T1, T2),
	f2 func(x *Err[T, E]) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Ok[T, E]:
		return f1(v)
	case *Err[T, E]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchResultR2[T any, E any, T0, T1 any](
	x Result[T, E],
	f1 func(x *Ok[T, E]) (T0, T1),
	f2 func(x *Err[T, E]) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Ok[T, E]:
		return f1(v)
	case *Err[T, E]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchResultR1[T any, E any, T0 any](
	x Result[T, E],
	f1 func(x *Ok[T, E]) T0,
	f2 func(x *Err[T, E]) T0,
) T0 {
	switch v := x.(type) {
	case *Ok[T, E]:
		return f1(v)
	case *Err[T, E]:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchResultR0[T any, E any](
	x Result[T, E],
	f1 func(x *Ok[T, E]),
	f2 func(x *Err[T, E]),
) {
	switch v := x.(type) {
	case *Ok[T, E]:
		f1(v)
	case *Err[T, E]:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Err[any,any]", ErrFromJSON[any, any], ErrToJSON[any, any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Ok[any,any]", OkFromJSON[any, any], OkToJSON[any, any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Result[any,any]", ResultFromJSON[any, any], ResultToJSON[any, any])
}

type ResultUnionJSON[T any, E any] struct {
	Type string          `json:"$type,omitempty"`
	Ok   json.RawMessage `json:"example.Ok,omitempty"`
	Err  json.RawMessage `json:"example.Err,omitempty"`
}

func ResultFromJSON[T any, E any](x []byte) (Result[T, E], error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data ResultUnionJSON[T, E]
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.ResultFromJSON[T,E]: %w", err)
	}

	switch data.Type {
	case "example.Ok":
		return OkFromJSON[T, E](data.Ok)
	case "example.Err":
		return ErrFromJSON[T, E](data.Err)
	}

	if data.Ok != nil {
		return OkFromJSON[T, E](data.Ok)
	} else if data.Err != nil {
		return ErrFromJSON[T, E](data.Err)
	}
	return nil, fmt.Errorf("example.ResultFromJSON[T,E]: unknown type: %s", data.Type)
}

func ResultToJSON[T any, E any](x Result[T, E]) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchResultR2(
		x,
		func(y *Ok[T, E]) ([]byte, error) {
			body, err := OkToJSON[T, E](y)
			if err != nil {
				return nil, fmt.Errorf("example.ResultToJSON[T,E]: %w", err)
			}
			return json.Marshal(ResultUnionJSON[T, E]{
				Type: "example.Ok",
				Ok:   body,
			})
		},
		func(y *Err[T, E]) ([]byte, error) {
			body, err := ErrToJSON[T, E](y)
			if err != nil {
				return nil, fmt.Errorf("example.ResultToJSON[T,E]: %w", err)
			}
			return json.Marshal(ResultUnionJSON[T, E]{
				Type: "example.Err",
				Err:  body,
			})
		},
	)
}

func OkFromJSON[T any, E any](x []byte) (*Ok[T, E], error) {
	result := new(Ok[T, E])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.OkFromJSON[T,E]: %w", err)
	}
	return result, nil
}

func OkToJSON[T any, E any](x *Ok[T, E]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Ok[any, any])(nil)
	_ json.Marshaler   = (*Ok[any, any])(nil)
)

func (r *Ok[T, E]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOkLb_TCommaE_bL(*r)
}
func (r *Ok[T, E]) _marshalJSONOkLb_TCommaE_bL(x Ok[T, E]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldValue []byte
	fieldValue, err = r._marshalJSONT(x.Value)
	if err != nil {
		return nil, fmt.Errorf("example: Ok[T,E]._marshalJSONOkLb_TCommaE_bL: field name Value; %w", err)
	}
	partial["Value"] = fieldValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Ok[T,E]._marshalJSONOkLb_TCommaE_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Ok[T, E]) _marshalJSONT(x T) ([]byte, error) {
	result, err := shared.JSONMarshal[T](x)
	if err != nil {
		return nil, fmt.Errorf("example: Ok[T,E]._marshalJSONT:; %w", err)
	}
	return result, nil
}
func (r *Ok[T, E]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOkLb_TCommaE_bL(data)
	if err != nil {
		return fmt.Errorf("example: Ok[T,E].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Ok[T, E]) _unmarshalJSONOkLb_TCommaE_bL(data []byte) (Ok[T, E], error) {
	result := Ok[T, E]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Ok[T,E]._unmarshalJSONOkLb_TCommaE_bL: native struct unwrap; %w", err)
	}
	if fieldValue, ok := partial["Value"]; ok {
		result.Value, err = r._unmarshalJSONT(fieldValue)
		if err != nil {
			return result, fmt.Errorf("example: Ok[T,E]._unmarshalJSONOkLb_TCommaE_bL: field Value; %w", err)
		}
	}
	return result, nil
}
func (r *Ok[T, E]) _unmarshalJSONT(data []byte) (T, error) {
	result, err := shared.JSONUnmarshal[T](data)
	if err != nil {
		return result, fmt.Errorf("example: Ok[T,E]._unmarshalJSONT: native ref unwrap; %w", err)
	}
	return result, nil
}

func ErrFromJSON[T any, E any](x []byte) (*Err[T, E], error) {
	result := new(Err[T, E])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.ErrFromJSON[T,E]: %w", err)
	}
	return result, nil
}

func ErrToJSON[T any, E any](x *Err[T, E]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Err[any, any])(nil)
	_ json.Marshaler   = (*Err[any, any])(nil)
)

func (r *Err[T, E]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONErrLb_TCommaE_bL(*r)
}
func (r *Err[T, E]) _marshalJSONErrLb_TCommaE_bL(x Err[T, E]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldError []byte
	fieldError, err = r._marshalJSONE(x.Error)
	if err != nil {
		return nil, fmt.Errorf("example: Err[T,E]._marshalJSONErrLb_TCommaE_bL: field name Error; %w", err)
	}
	partial["Error"] = fieldError
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Err[T,E]._marshalJSONErrLb_TCommaE_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Err[T, E]) _marshalJSONE(x E) ([]byte, error) {
	result, err := shared.JSONMarshal[E](x)
	if err != nil {
		return nil, fmt.Errorf("example: Err[T,E]._marshalJSONE:; %w", err)
	}
	return result, nil
}
func (r *Err[T, E]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONErrLb_TCommaE_bL(data)
	if err != nil {
		return fmt.Errorf("example: Err[T,E].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Err[T, E]) _unmarshalJSONErrLb_TCommaE_bL(data []byte) (Err[T, E], error) {
	result := Err[T, E]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Err[T,E]._unmarshalJSONErrLb_TCommaE_bL: native struct unwrap; %w", err)
	}
	if fieldError, ok := partial["Error"]; ok {
		result.Error, err = r._unmarshalJSONE(fieldError)
		if err != nil {
			return result, fmt.Errorf("example: Err[T,E]._unmarshalJSONErrLb_TCommaE_bL: field Error; %w", err)
		}
	}
	return result, nil
}
func (r *Err[T, E]) _unmarshalJSONE(data []byte) (E, error) {
	result, err := shared.JSONUnmarshal[E](data)
	if err != nil {
		return result, fmt.Errorf("example: Err[T,E]._unmarshalJSONE: native ref unwrap; %w", err)
	}
	return result, nil
}
