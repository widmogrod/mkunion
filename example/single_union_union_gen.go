// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type SingleVisitor interface {
	VisitOne(v *One) any
}

type Single interface {
	AcceptSingle(g SingleVisitor) any
}

var (
	_ Single = (*One)(nil)
)

func (r *One) AcceptSingle(v SingleVisitor) any { return v.VisitOne(r) }

func MatchSingleR3[T0, T1, T2 any](
	x Single,
	f1 func(x *One) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *One:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchSingleR2[T0, T1 any](
	x Single,
	f1 func(x *One) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *One:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchSingleR1[T0 any](
	x Single,
	f1 func(x *One) T0,
) T0 {
	switch v := x.(type) {
	case *One:
		return f1(v)
	}
	var result1 T0
	return result1
}

func MatchSingleR0(
	x Single,
	f1 func(x *One),
) {
	switch v := x.(type) {
	case *One:
		f1(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.One", OneFromJSON, OneToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Single", SingleFromJSON, SingleToJSON)
}

type SingleUnionJSON struct {
	Type string          `json:"$type,omitempty"`
	One  json.RawMessage `json:"example.One,omitempty"`
}

func SingleFromJSON(x []byte) (Single, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data SingleUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.SingleFromJSON: %w", err)
	}

	switch data.Type {
	case "example.One":
		return OneFromJSON(data.One)
	}

	if data.One != nil {
		return OneFromJSON(data.One)
	}
	return nil, fmt.Errorf("example.SingleFromJSON: unknown type: %s", data.Type)
}

func SingleToJSON(x Single) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchSingleR2(
		x,
		func(y *One) ([]byte, error) {
			body, err := OneToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.SingleToJSON: %w", err)
			}
			return json.Marshal(SingleUnionJSON{
				Type: "example.One",
				One:  body,
			})
		},
	)
}

func OneFromJSON(x []byte) (*One, error) {
	result := new(One)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.OneFromJSON: %w", err)
	}
	return result, nil
}

func OneToJSON(x *One) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*One)(nil)
	_ json.Marshaler   = (*One)(nil)
)

func (r *One) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOne(*r)
}
func (r *One) _marshalJSONOne(x One) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: One._marshalJSONOne: struct; %w", err)
	}
	return result, nil
}
func (r *One) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOne(data)
	if err != nil {
		return fmt.Errorf("example: One.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *One) _unmarshalJSONOne(data []byte) (One, error) {
	result := One{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: One._unmarshalJSONOne: native struct unwrap; %w", err)
	}
	return result, nil
}
