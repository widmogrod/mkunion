// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CircleShape())
	shape.Register(RectangleShape())
	shape.Register(ShapeShape())
	shape.Register(SquareShape())
}

//shape:shape

func ShapeShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Shape",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Variant: []shape.Shape{
			CircleShape(),
			RectangleShape(),
			SquareShape(),
		},
	}
}

func CircleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Circle",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Radius",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func RectangleShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Rectangle",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Width",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
			{
				Name: "Height",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}

func SquareShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Square",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Side",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Float64{},
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Shape",
			},
		},
	}
}
