// Code generated by mkunion. DO NOT EDIT.
package state

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CancelOrderCMDShape())
	shape.Register(CommandShape())
	shape.Register(CreateOrderCMDShape())
	shape.Register(MarkAsProcessingCMDShape())
	shape.Register(MarkOrderCompleteCMDShape())
	shape.Register(OrderAttrShape())
	shape.Register(OrderCancelledShape())
	shape.Register(OrderCompletedShape())
	shape.Register(OrderErrorShape())
	shape.Register(OrderIDShape())
	shape.Register(OrderPendingShape())
	shape.Register(OrderProcessingShape())
	shape.Register(OrderShape())
	shape.Register(PriceShape())
	shape.Register(ProblemCodeShape())
	shape.Register(QuantityShape())
	shape.Register(StateShape())
	shape.Register(TryRecoverErrorCMDShape())
	shape.Register(WorkerIDShape())
}

//shape:shape

func CommandShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Command",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Variant: []shape.Shape{
			CreateOrderCMDShape(),
			MarkAsProcessingCMDShape(),
			CancelOrderCMDShape(),
			MarkOrderCompleteCMDShape(),
			TryRecoverErrorCMDShape(),
		},
	}
}

func CreateOrderCMDShape() shape.Shape {
	return &shape.StructLike{
		Name:          "CreateOrderCMD",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "OrderID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "Attr",
				Type: &shape.RefName{
					Name:          "OrderAttr",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func MarkAsProcessingCMDShape() shape.Shape {
	return &shape.StructLike{
		Name:          "MarkAsProcessingCMD",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "OrderID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "WorkerID",
				Type: &shape.RefName{
					Name:          "WorkerID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func CancelOrderCMDShape() shape.Shape {
	return &shape.StructLike{
		Name:          "CancelOrderCMD",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "OrderID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "Reason",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func MarkOrderCompleteCMDShape() shape.Shape {
	return &shape.StructLike{
		Name:          "MarkOrderCompleteCMD",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "OrderID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

func TryRecoverErrorCMDShape() shape.Shape {
	return &shape.StructLike{
		Name:          "TryRecoverErrorCMD",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "OrderID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Command",
			},
		},
	}
}

//shape:shape
func OrderIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "OrderID",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape
func OrderAttrShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderAttr",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Price",
				Type: &shape.RefName{
					Name:          "Price",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "Quantity",
				Type: &shape.RefName{
					Name:          "Quantity",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
	}
}

//shape:shape
func WorkerIDShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "WorkerID",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		IsAlias:       true,
		Type:          &shape.PrimitiveLike{Kind: &shape.StringLike{}},
	}
}

//shape:shape

func StateShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "State",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Variant: []shape.Shape{
			OrderPendingShape(),
			OrderProcessingShape(),
			OrderCompletedShape(),
			OrderCancelledShape(),
			OrderErrorShape(),
		},
	}
}

func OrderPendingShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderPending",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Order",
				Type: &shape.RefName{
					Name:          "Order",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func OrderProcessingShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderProcessing",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Order",
				Type: &shape.RefName{
					Name:          "Order",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func OrderCompletedShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderCompleted",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Order",
				Type: &shape.RefName{
					Name:          "Order",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func OrderCancelledShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderCancelled",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Order",
				Type: &shape.RefName{
					Name:          "Order",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

func OrderErrorShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrderError",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Retried",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
			{
				Name: "RetriedAt",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
			{
				Name: "ProblemCode",
				Type: &shape.RefName{
					Name:          "ProblemCode",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "ProblemCommand",
				Type: &shape.RefName{
					Name:          "Command",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "ProblemState",
				Type: &shape.RefName{
					Name:          "State",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "State",
			},
		},
	}
}

//shape:shape
func OrderShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Order",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "ID",
				Type: &shape.RefName{
					Name:          "OrderID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "OrderAttr",
				Type: &shape.RefName{
					Name:          "OrderAttr",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "WorkerID",
				Type: &shape.RefName{
					Name:          "WorkerID",
					PkgName:       "state",
					PkgImportName: "github.com/widmogrod/mkunion/example/state",
				},
			},
			{
				Name: "StockRemovedAt",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
			{
				Name: "PaymentChargedAt",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
			{
				Name: "DeliveredAt",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
			{
				Name: "CancelledAt",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "Time",
						PkgName:       "time",
						PkgImportName: "time",
					},
				},
			},
			{
				Name: "CancelledReason",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
	}
}

//shape:shape
func ProblemCodeShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "ProblemCode",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int{},
			},
		},
	}
}

//shape:shape
func PriceShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Price",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		IsAlias:       true,
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Float64{},
			},
		},
	}
}

//shape:shape
func QuantityShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "Quantity",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		IsAlias:       true,
		Type: &shape.PrimitiveLike{
			Kind: &shape.NumberLike{
				Kind: &shape.Int{},
			},
		},
	}
}
