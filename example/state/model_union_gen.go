// Code generated by mkunion. DO NOT EDIT.
package state

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
	"time"
)

type CommandVisitor interface {
	VisitCreateOrderCMD(v *CreateOrderCMD) any
	VisitMarkAsProcessingCMD(v *MarkAsProcessingCMD) any
	VisitCancelOrderCMD(v *CancelOrderCMD) any
	VisitMarkOrderCompleteCMD(v *MarkOrderCompleteCMD) any
	VisitTryRecoverErrorCMD(v *TryRecoverErrorCMD) any
}

type Command interface {
	AcceptCommand(g CommandVisitor) any
}

var (
	_ Command = (*CreateOrderCMD)(nil)
	_ Command = (*MarkAsProcessingCMD)(nil)
	_ Command = (*CancelOrderCMD)(nil)
	_ Command = (*MarkOrderCompleteCMD)(nil)
	_ Command = (*TryRecoverErrorCMD)(nil)
)

func (r *CreateOrderCMD) AcceptCommand(v CommandVisitor) any { return v.VisitCreateOrderCMD(r) }
func (r *MarkAsProcessingCMD) AcceptCommand(v CommandVisitor) any {
	return v.VisitMarkAsProcessingCMD(r)
}
func (r *CancelOrderCMD) AcceptCommand(v CommandVisitor) any { return v.VisitCancelOrderCMD(r) }
func (r *MarkOrderCompleteCMD) AcceptCommand(v CommandVisitor) any {
	return v.VisitMarkOrderCompleteCMD(r)
}
func (r *TryRecoverErrorCMD) AcceptCommand(v CommandVisitor) any { return v.VisitTryRecoverErrorCMD(r) }

func MatchCommandR3[T0, T1, T2 any](
	x Command,
	f1 func(x *CreateOrderCMD) (T0, T1, T2),
	f2 func(x *MarkAsProcessingCMD) (T0, T1, T2),
	f3 func(x *CancelOrderCMD) (T0, T1, T2),
	f4 func(x *MarkOrderCompleteCMD) (T0, T1, T2),
	f5 func(x *TryRecoverErrorCMD) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *MarkAsProcessingCMD:
		return f2(v)
	case *CancelOrderCMD:
		return f3(v)
	case *MarkOrderCompleteCMD:
		return f4(v)
	case *TryRecoverErrorCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchCommandR2[T0, T1 any](
	x Command,
	f1 func(x *CreateOrderCMD) (T0, T1),
	f2 func(x *MarkAsProcessingCMD) (T0, T1),
	f3 func(x *CancelOrderCMD) (T0, T1),
	f4 func(x *MarkOrderCompleteCMD) (T0, T1),
	f5 func(x *TryRecoverErrorCMD) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *MarkAsProcessingCMD:
		return f2(v)
	case *CancelOrderCMD:
		return f3(v)
	case *MarkOrderCompleteCMD:
		return f4(v)
	case *TryRecoverErrorCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchCommandR1[T0 any](
	x Command,
	f1 func(x *CreateOrderCMD) T0,
	f2 func(x *MarkAsProcessingCMD) T0,
	f3 func(x *CancelOrderCMD) T0,
	f4 func(x *MarkOrderCompleteCMD) T0,
	f5 func(x *TryRecoverErrorCMD) T0,
) T0 {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *MarkAsProcessingCMD:
		return f2(v)
	case *CancelOrderCMD:
		return f3(v)
	case *MarkOrderCompleteCMD:
		return f4(v)
	case *TryRecoverErrorCMD:
		return f5(v)
	}
	var result1 T0
	return result1
}

func MatchCommandR0(
	x Command,
	f1 func(x *CreateOrderCMD),
	f2 func(x *MarkAsProcessingCMD),
	f3 func(x *CancelOrderCMD),
	f4 func(x *MarkOrderCompleteCMD),
	f5 func(x *TryRecoverErrorCMD),
) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		f1(v)
	case *MarkAsProcessingCMD:
		f2(v)
	case *CancelOrderCMD:
		f3(v)
	case *MarkOrderCompleteCMD:
		f4(v)
	case *TryRecoverErrorCMD:
		f5(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.CancelOrderCMD", CancelOrderCMDFromJSON, CancelOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.Command", CommandFromJSON, CommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.CreateOrderCMD", CreateOrderCMDFromJSON, CreateOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.MarkAsProcessingCMD", MarkAsProcessingCMDFromJSON, MarkAsProcessingCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.MarkOrderCompleteCMD", MarkOrderCompleteCMDFromJSON, MarkOrderCompleteCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.TryRecoverErrorCMD", TryRecoverErrorCMDFromJSON, TryRecoverErrorCMDToJSON)
}

type CommandUnionJSON struct {
	Type                 string          `json:"$type,omitempty"`
	CreateOrderCMD       json.RawMessage `json:"state.CreateOrderCMD,omitempty"`
	MarkAsProcessingCMD  json.RawMessage `json:"state.MarkAsProcessingCMD,omitempty"`
	CancelOrderCMD       json.RawMessage `json:"state.CancelOrderCMD,omitempty"`
	MarkOrderCompleteCMD json.RawMessage `json:"state.MarkOrderCompleteCMD,omitempty"`
	TryRecoverErrorCMD   json.RawMessage `json:"state.TryRecoverErrorCMD,omitempty"`
}

func CommandFromJSON(x []byte) (Command, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data CommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("state.CommandFromJSON: %w", err)
	}

	switch data.Type {
	case "state.CreateOrderCMD":
		return CreateOrderCMDFromJSON(data.CreateOrderCMD)
	case "state.MarkAsProcessingCMD":
		return MarkAsProcessingCMDFromJSON(data.MarkAsProcessingCMD)
	case "state.CancelOrderCMD":
		return CancelOrderCMDFromJSON(data.CancelOrderCMD)
	case "state.MarkOrderCompleteCMD":
		return MarkOrderCompleteCMDFromJSON(data.MarkOrderCompleteCMD)
	case "state.TryRecoverErrorCMD":
		return TryRecoverErrorCMDFromJSON(data.TryRecoverErrorCMD)
	}

	if data.CreateOrderCMD != nil {
		return CreateOrderCMDFromJSON(data.CreateOrderCMD)
	} else if data.MarkAsProcessingCMD != nil {
		return MarkAsProcessingCMDFromJSON(data.MarkAsProcessingCMD)
	} else if data.CancelOrderCMD != nil {
		return CancelOrderCMDFromJSON(data.CancelOrderCMD)
	} else if data.MarkOrderCompleteCMD != nil {
		return MarkOrderCompleteCMDFromJSON(data.MarkOrderCompleteCMD)
	} else if data.TryRecoverErrorCMD != nil {
		return TryRecoverErrorCMDFromJSON(data.TryRecoverErrorCMD)
	}
	return nil, fmt.Errorf("state.CommandFromJSON: unknown type: %s", data.Type)
}

func CommandToJSON(x Command) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchCommandR2(
		x,
		func(y *CreateOrderCMD) ([]byte, error) {
			body, err := CreateOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:           "state.CreateOrderCMD",
				CreateOrderCMD: body,
			})
		},
		func(y *MarkAsProcessingCMD) ([]byte, error) {
			body, err := MarkAsProcessingCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:                "state.MarkAsProcessingCMD",
				MarkAsProcessingCMD: body,
			})
		},
		func(y *CancelOrderCMD) ([]byte, error) {
			body, err := CancelOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:           "state.CancelOrderCMD",
				CancelOrderCMD: body,
			})
		},
		func(y *MarkOrderCompleteCMD) ([]byte, error) {
			body, err := MarkOrderCompleteCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:                 "state.MarkOrderCompleteCMD",
				MarkOrderCompleteCMD: body,
			})
		},
		func(y *TryRecoverErrorCMD) ([]byte, error) {
			body, err := TryRecoverErrorCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:               "state.TryRecoverErrorCMD",
				TryRecoverErrorCMD: body,
			})
		},
	)
}

func CreateOrderCMDFromJSON(x []byte) (*CreateOrderCMD, error) {
	result := new(CreateOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.CreateOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func CreateOrderCMDToJSON(x *CreateOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CreateOrderCMD)(nil)
	_ json.Marshaler   = (*CreateOrderCMD)(nil)
)

func (r *CreateOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCreateOrderCMD(*r)
}
func (r *CreateOrderCMD) _marshalJSONCreateOrderCMD(x CreateOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONOrderID(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state: CreateOrderCMD._marshalJSONCreateOrderCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldAttr []byte
	fieldAttr, err = r._marshalJSONOrderAttr(x.Attr)
	if err != nil {
		return nil, fmt.Errorf("state: CreateOrderCMD._marshalJSONCreateOrderCMD: field name Attr; %w", err)
	}
	partial["Attr"] = fieldAttr
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: CreateOrderCMD._marshalJSONCreateOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _marshalJSONOrderID(x OrderID) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderID](x)
	if err != nil {
		return nil, fmt.Errorf("state: CreateOrderCMD._marshalJSONOrderID:; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _marshalJSONOrderAttr(x OrderAttr) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderAttr](x)
	if err != nil {
		return nil, fmt.Errorf("state: CreateOrderCMD._marshalJSONOrderAttr:; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCreateOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state: CreateOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CreateOrderCMD) _unmarshalJSONCreateOrderCMD(data []byte) (CreateOrderCMD, error) {
	result := CreateOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: CreateOrderCMD._unmarshalJSONCreateOrderCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONOrderID(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state: CreateOrderCMD._unmarshalJSONCreateOrderCMD: field OrderID; %w", err)
		}
	}
	if fieldAttr, ok := partial["Attr"]; ok {
		result.Attr, err = r._unmarshalJSONOrderAttr(fieldAttr)
		if err != nil {
			return result, fmt.Errorf("state: CreateOrderCMD._unmarshalJSONCreateOrderCMD: field Attr; %w", err)
		}
	}
	return result, nil
}
func (r *CreateOrderCMD) _unmarshalJSONOrderID(data []byte) (OrderID, error) {
	result, err := shared.JSONUnmarshal[OrderID](data)
	if err != nil {
		return result, fmt.Errorf("state: CreateOrderCMD._unmarshalJSONOrderID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _unmarshalJSONOrderAttr(data []byte) (OrderAttr, error) {
	result, err := shared.JSONUnmarshal[OrderAttr](data)
	if err != nil {
		return result, fmt.Errorf("state: CreateOrderCMD._unmarshalJSONOrderAttr: native ref unwrap; %w", err)
	}
	return result, nil
}

func MarkAsProcessingCMDFromJSON(x []byte) (*MarkAsProcessingCMD, error) {
	result := new(MarkAsProcessingCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.MarkAsProcessingCMDFromJSON: %w", err)
	}
	return result, nil
}

func MarkAsProcessingCMDToJSON(x *MarkAsProcessingCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MarkAsProcessingCMD)(nil)
	_ json.Marshaler   = (*MarkAsProcessingCMD)(nil)
)

func (r *MarkAsProcessingCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMarkAsProcessingCMD(*r)
}
func (r *MarkAsProcessingCMD) _marshalJSONMarkAsProcessingCMD(x MarkAsProcessingCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONOrderID(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state: MarkAsProcessingCMD._marshalJSONMarkAsProcessingCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldWorkerID []byte
	fieldWorkerID, err = r._marshalJSONWorkerID(x.WorkerID)
	if err != nil {
		return nil, fmt.Errorf("state: MarkAsProcessingCMD._marshalJSONMarkAsProcessingCMD: field name WorkerID; %w", err)
	}
	partial["WorkerID"] = fieldWorkerID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: MarkAsProcessingCMD._marshalJSONMarkAsProcessingCMD: struct; %w", err)
	}
	return result, nil
}
func (r *MarkAsProcessingCMD) _marshalJSONOrderID(x OrderID) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderID](x)
	if err != nil {
		return nil, fmt.Errorf("state: MarkAsProcessingCMD._marshalJSONOrderID:; %w", err)
	}
	return result, nil
}
func (r *MarkAsProcessingCMD) _marshalJSONWorkerID(x WorkerID) ([]byte, error) {
	result, err := shared.JSONMarshal[WorkerID](x)
	if err != nil {
		return nil, fmt.Errorf("state: MarkAsProcessingCMD._marshalJSONWorkerID:; %w", err)
	}
	return result, nil
}
func (r *MarkAsProcessingCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMarkAsProcessingCMD(data)
	if err != nil {
		return fmt.Errorf("state: MarkAsProcessingCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MarkAsProcessingCMD) _unmarshalJSONMarkAsProcessingCMD(data []byte) (MarkAsProcessingCMD, error) {
	result := MarkAsProcessingCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: MarkAsProcessingCMD._unmarshalJSONMarkAsProcessingCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONOrderID(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state: MarkAsProcessingCMD._unmarshalJSONMarkAsProcessingCMD: field OrderID; %w", err)
		}
	}
	if fieldWorkerID, ok := partial["WorkerID"]; ok {
		result.WorkerID, err = r._unmarshalJSONWorkerID(fieldWorkerID)
		if err != nil {
			return result, fmt.Errorf("state: MarkAsProcessingCMD._unmarshalJSONMarkAsProcessingCMD: field WorkerID; %w", err)
		}
	}
	return result, nil
}
func (r *MarkAsProcessingCMD) _unmarshalJSONOrderID(data []byte) (OrderID, error) {
	result, err := shared.JSONUnmarshal[OrderID](data)
	if err != nil {
		return result, fmt.Errorf("state: MarkAsProcessingCMD._unmarshalJSONOrderID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *MarkAsProcessingCMD) _unmarshalJSONWorkerID(data []byte) (WorkerID, error) {
	result, err := shared.JSONUnmarshal[WorkerID](data)
	if err != nil {
		return result, fmt.Errorf("state: MarkAsProcessingCMD._unmarshalJSONWorkerID: native ref unwrap; %w", err)
	}
	return result, nil
}

func CancelOrderCMDFromJSON(x []byte) (*CancelOrderCMD, error) {
	result := new(CancelOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.CancelOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func CancelOrderCMDToJSON(x *CancelOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CancelOrderCMD)(nil)
	_ json.Marshaler   = (*CancelOrderCMD)(nil)
)

func (r *CancelOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCancelOrderCMD(*r)
}
func (r *CancelOrderCMD) _marshalJSONCancelOrderCMD(x CancelOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONOrderID(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state: CancelOrderCMD._marshalJSONCancelOrderCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldReason []byte
	fieldReason, err = r._marshalJSONstring(x.Reason)
	if err != nil {
		return nil, fmt.Errorf("state: CancelOrderCMD._marshalJSONCancelOrderCMD: field name Reason; %w", err)
	}
	partial["Reason"] = fieldReason
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: CancelOrderCMD._marshalJSONCancelOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) _marshalJSONOrderID(x OrderID) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderID](x)
	if err != nil {
		return nil, fmt.Errorf("state: CancelOrderCMD._marshalJSONOrderID:; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state: CancelOrderCMD._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCancelOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state: CancelOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CancelOrderCMD) _unmarshalJSONCancelOrderCMD(data []byte) (CancelOrderCMD, error) {
	result := CancelOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: CancelOrderCMD._unmarshalJSONCancelOrderCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONOrderID(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state: CancelOrderCMD._unmarshalJSONCancelOrderCMD: field OrderID; %w", err)
		}
	}
	if fieldReason, ok := partial["Reason"]; ok {
		result.Reason, err = r._unmarshalJSONstring(fieldReason)
		if err != nil {
			return result, fmt.Errorf("state: CancelOrderCMD._unmarshalJSONCancelOrderCMD: field Reason; %w", err)
		}
	}
	return result, nil
}
func (r *CancelOrderCMD) _unmarshalJSONOrderID(data []byte) (OrderID, error) {
	result, err := shared.JSONUnmarshal[OrderID](data)
	if err != nil {
		return result, fmt.Errorf("state: CancelOrderCMD._unmarshalJSONOrderID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state: CancelOrderCMD._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func MarkOrderCompleteCMDFromJSON(x []byte) (*MarkOrderCompleteCMD, error) {
	result := new(MarkOrderCompleteCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.MarkOrderCompleteCMDFromJSON: %w", err)
	}
	return result, nil
}

func MarkOrderCompleteCMDToJSON(x *MarkOrderCompleteCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MarkOrderCompleteCMD)(nil)
	_ json.Marshaler   = (*MarkOrderCompleteCMD)(nil)
)

func (r *MarkOrderCompleteCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMarkOrderCompleteCMD(*r)
}
func (r *MarkOrderCompleteCMD) _marshalJSONMarkOrderCompleteCMD(x MarkOrderCompleteCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONOrderID(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state: MarkOrderCompleteCMD._marshalJSONMarkOrderCompleteCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: MarkOrderCompleteCMD._marshalJSONMarkOrderCompleteCMD: struct; %w", err)
	}
	return result, nil
}
func (r *MarkOrderCompleteCMD) _marshalJSONOrderID(x OrderID) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderID](x)
	if err != nil {
		return nil, fmt.Errorf("state: MarkOrderCompleteCMD._marshalJSONOrderID:; %w", err)
	}
	return result, nil
}
func (r *MarkOrderCompleteCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMarkOrderCompleteCMD(data)
	if err != nil {
		return fmt.Errorf("state: MarkOrderCompleteCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MarkOrderCompleteCMD) _unmarshalJSONMarkOrderCompleteCMD(data []byte) (MarkOrderCompleteCMD, error) {
	result := MarkOrderCompleteCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: MarkOrderCompleteCMD._unmarshalJSONMarkOrderCompleteCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONOrderID(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state: MarkOrderCompleteCMD._unmarshalJSONMarkOrderCompleteCMD: field OrderID; %w", err)
		}
	}
	return result, nil
}
func (r *MarkOrderCompleteCMD) _unmarshalJSONOrderID(data []byte) (OrderID, error) {
	result, err := shared.JSONUnmarshal[OrderID](data)
	if err != nil {
		return result, fmt.Errorf("state: MarkOrderCompleteCMD._unmarshalJSONOrderID: native ref unwrap; %w", err)
	}
	return result, nil
}

func TryRecoverErrorCMDFromJSON(x []byte) (*TryRecoverErrorCMD, error) {
	result := new(TryRecoverErrorCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.TryRecoverErrorCMDFromJSON: %w", err)
	}
	return result, nil
}

func TryRecoverErrorCMDToJSON(x *TryRecoverErrorCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*TryRecoverErrorCMD)(nil)
	_ json.Marshaler   = (*TryRecoverErrorCMD)(nil)
)

func (r *TryRecoverErrorCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONTryRecoverErrorCMD(*r)
}
func (r *TryRecoverErrorCMD) _marshalJSONTryRecoverErrorCMD(x TryRecoverErrorCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONOrderID(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state: TryRecoverErrorCMD._marshalJSONTryRecoverErrorCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: TryRecoverErrorCMD._marshalJSONTryRecoverErrorCMD: struct; %w", err)
	}
	return result, nil
}
func (r *TryRecoverErrorCMD) _marshalJSONOrderID(x OrderID) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderID](x)
	if err != nil {
		return nil, fmt.Errorf("state: TryRecoverErrorCMD._marshalJSONOrderID:; %w", err)
	}
	return result, nil
}
func (r *TryRecoverErrorCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONTryRecoverErrorCMD(data)
	if err != nil {
		return fmt.Errorf("state: TryRecoverErrorCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *TryRecoverErrorCMD) _unmarshalJSONTryRecoverErrorCMD(data []byte) (TryRecoverErrorCMD, error) {
	result := TryRecoverErrorCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: TryRecoverErrorCMD._unmarshalJSONTryRecoverErrorCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONOrderID(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state: TryRecoverErrorCMD._unmarshalJSONTryRecoverErrorCMD: field OrderID; %w", err)
		}
	}
	return result, nil
}
func (r *TryRecoverErrorCMD) _unmarshalJSONOrderID(data []byte) (OrderID, error) {
	result, err := shared.JSONUnmarshal[OrderID](data)
	if err != nil {
		return result, fmt.Errorf("state: TryRecoverErrorCMD._unmarshalJSONOrderID: native ref unwrap; %w", err)
	}
	return result, nil
}

type StateVisitor interface {
	VisitOrderPending(v *OrderPending) any
	VisitOrderProcessing(v *OrderProcessing) any
	VisitOrderCompleted(v *OrderCompleted) any
	VisitOrderCancelled(v *OrderCancelled) any
	VisitOrderError(v *OrderError) any
}

type State interface {
	AcceptState(g StateVisitor) any
}

var (
	_ State = (*OrderPending)(nil)
	_ State = (*OrderProcessing)(nil)
	_ State = (*OrderCompleted)(nil)
	_ State = (*OrderCancelled)(nil)
	_ State = (*OrderError)(nil)
)

func (r *OrderPending) AcceptState(v StateVisitor) any    { return v.VisitOrderPending(r) }
func (r *OrderProcessing) AcceptState(v StateVisitor) any { return v.VisitOrderProcessing(r) }
func (r *OrderCompleted) AcceptState(v StateVisitor) any  { return v.VisitOrderCompleted(r) }
func (r *OrderCancelled) AcceptState(v StateVisitor) any  { return v.VisitOrderCancelled(r) }
func (r *OrderError) AcceptState(v StateVisitor) any      { return v.VisitOrderError(r) }

func MatchStateR3[T0, T1, T2 any](
	x State,
	f1 func(x *OrderPending) (T0, T1, T2),
	f2 func(x *OrderProcessing) (T0, T1, T2),
	f3 func(x *OrderCompleted) (T0, T1, T2),
	f4 func(x *OrderCancelled) (T0, T1, T2),
	f5 func(x *OrderError) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	case *OrderError:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchStateR2[T0, T1 any](
	x State,
	f1 func(x *OrderPending) (T0, T1),
	f2 func(x *OrderProcessing) (T0, T1),
	f3 func(x *OrderCompleted) (T0, T1),
	f4 func(x *OrderCancelled) (T0, T1),
	f5 func(x *OrderError) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	case *OrderError:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchStateR1[T0 any](
	x State,
	f1 func(x *OrderPending) T0,
	f2 func(x *OrderProcessing) T0,
	f3 func(x *OrderCompleted) T0,
	f4 func(x *OrderCancelled) T0,
	f5 func(x *OrderError) T0,
) T0 {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	case *OrderError:
		return f5(v)
	}
	var result1 T0
	return result1
}

func MatchStateR0(
	x State,
	f1 func(x *OrderPending),
	f2 func(x *OrderProcessing),
	f3 func(x *OrderCompleted),
	f4 func(x *OrderCancelled),
	f5 func(x *OrderError),
) {
	switch v := x.(type) {
	case *OrderPending:
		f1(v)
	case *OrderProcessing:
		f2(v)
	case *OrderCompleted:
		f3(v)
	case *OrderCancelled:
		f4(v)
	case *OrderError:
		f5(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.OrderCancelled", OrderCancelledFromJSON, OrderCancelledToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.OrderCompleted", OrderCompletedFromJSON, OrderCompletedToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.OrderError", OrderErrorFromJSON, OrderErrorToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.OrderPending", OrderPendingFromJSON, OrderPendingToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.OrderProcessing", OrderProcessingFromJSON, OrderProcessingToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state.State", StateFromJSON, StateToJSON)
}

type StateUnionJSON struct {
	Type            string          `json:"$type,omitempty"`
	OrderPending    json.RawMessage `json:"state.OrderPending,omitempty"`
	OrderProcessing json.RawMessage `json:"state.OrderProcessing,omitempty"`
	OrderCompleted  json.RawMessage `json:"state.OrderCompleted,omitempty"`
	OrderCancelled  json.RawMessage `json:"state.OrderCancelled,omitempty"`
	OrderError      json.RawMessage `json:"state.OrderError,omitempty"`
}

func StateFromJSON(x []byte) (State, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data StateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("state.StateFromJSON: %w", err)
	}

	switch data.Type {
	case "state.OrderPending":
		return OrderPendingFromJSON(data.OrderPending)
	case "state.OrderProcessing":
		return OrderProcessingFromJSON(data.OrderProcessing)
	case "state.OrderCompleted":
		return OrderCompletedFromJSON(data.OrderCompleted)
	case "state.OrderCancelled":
		return OrderCancelledFromJSON(data.OrderCancelled)
	case "state.OrderError":
		return OrderErrorFromJSON(data.OrderError)
	}

	if data.OrderPending != nil {
		return OrderPendingFromJSON(data.OrderPending)
	} else if data.OrderProcessing != nil {
		return OrderProcessingFromJSON(data.OrderProcessing)
	} else if data.OrderCompleted != nil {
		return OrderCompletedFromJSON(data.OrderCompleted)
	} else if data.OrderCancelled != nil {
		return OrderCancelledFromJSON(data.OrderCancelled)
	} else if data.OrderError != nil {
		return OrderErrorFromJSON(data.OrderError)
	}
	return nil, fmt.Errorf("state.StateFromJSON: unknown type: %s", data.Type)
}

func StateToJSON(x State) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchStateR2(
		x,
		func(y *OrderPending) ([]byte, error) {
			body, err := OrderPendingToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:         "state.OrderPending",
				OrderPending: body,
			})
		},
		func(y *OrderProcessing) ([]byte, error) {
			body, err := OrderProcessingToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:            "state.OrderProcessing",
				OrderProcessing: body,
			})
		},
		func(y *OrderCompleted) ([]byte, error) {
			body, err := OrderCompletedToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:           "state.OrderCompleted",
				OrderCompleted: body,
			})
		},
		func(y *OrderCancelled) ([]byte, error) {
			body, err := OrderCancelledToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:           "state.OrderCancelled",
				OrderCancelled: body,
			})
		},
		func(y *OrderError) ([]byte, error) {
			body, err := OrderErrorToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:       "state.OrderError",
				OrderError: body,
			})
		},
	)
}

func OrderPendingFromJSON(x []byte) (*OrderPending, error) {
	result := new(OrderPending)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.OrderPendingFromJSON: %w", err)
	}
	return result, nil
}

func OrderPendingToJSON(x *OrderPending) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderPending)(nil)
	_ json.Marshaler   = (*OrderPending)(nil)
)

func (r *OrderPending) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderPending(*r)
}
func (r *OrderPending) _marshalJSONOrderPending(x OrderPending) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrder []byte
	fieldOrder, err = r._marshalJSONOrder(x.Order)
	if err != nil {
		return nil, fmt.Errorf("state: OrderPending._marshalJSONOrderPending: field name Order; %w", err)
	}
	partial["Order"] = fieldOrder
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: OrderPending._marshalJSONOrderPending: struct; %w", err)
	}
	return result, nil
}
func (r *OrderPending) _marshalJSONOrder(x Order) ([]byte, error) {
	result, err := shared.JSONMarshal[Order](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderPending._marshalJSONOrder:; %w", err)
	}
	return result, nil
}
func (r *OrderPending) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderPending(data)
	if err != nil {
		return fmt.Errorf("state: OrderPending.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderPending) _unmarshalJSONOrderPending(data []byte) (OrderPending, error) {
	result := OrderPending{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: OrderPending._unmarshalJSONOrderPending: native struct unwrap; %w", err)
	}
	if fieldOrder, ok := partial["Order"]; ok {
		result.Order, err = r._unmarshalJSONOrder(fieldOrder)
		if err != nil {
			return result, fmt.Errorf("state: OrderPending._unmarshalJSONOrderPending: field Order; %w", err)
		}
	}
	return result, nil
}
func (r *OrderPending) _unmarshalJSONOrder(data []byte) (Order, error) {
	result, err := shared.JSONUnmarshal[Order](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderPending._unmarshalJSONOrder: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderProcessingFromJSON(x []byte) (*OrderProcessing, error) {
	result := new(OrderProcessing)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.OrderProcessingFromJSON: %w", err)
	}
	return result, nil
}

func OrderProcessingToJSON(x *OrderProcessing) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderProcessing)(nil)
	_ json.Marshaler   = (*OrderProcessing)(nil)
)

func (r *OrderProcessing) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderProcessing(*r)
}
func (r *OrderProcessing) _marshalJSONOrderProcessing(x OrderProcessing) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrder []byte
	fieldOrder, err = r._marshalJSONOrder(x.Order)
	if err != nil {
		return nil, fmt.Errorf("state: OrderProcessing._marshalJSONOrderProcessing: field name Order; %w", err)
	}
	partial["Order"] = fieldOrder
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: OrderProcessing._marshalJSONOrderProcessing: struct; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) _marshalJSONOrder(x Order) ([]byte, error) {
	result, err := shared.JSONMarshal[Order](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderProcessing._marshalJSONOrder:; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderProcessing(data)
	if err != nil {
		return fmt.Errorf("state: OrderProcessing.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderProcessing) _unmarshalJSONOrderProcessing(data []byte) (OrderProcessing, error) {
	result := OrderProcessing{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: OrderProcessing._unmarshalJSONOrderProcessing: native struct unwrap; %w", err)
	}
	if fieldOrder, ok := partial["Order"]; ok {
		result.Order, err = r._unmarshalJSONOrder(fieldOrder)
		if err != nil {
			return result, fmt.Errorf("state: OrderProcessing._unmarshalJSONOrderProcessing: field Order; %w", err)
		}
	}
	return result, nil
}
func (r *OrderProcessing) _unmarshalJSONOrder(data []byte) (Order, error) {
	result, err := shared.JSONUnmarshal[Order](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderProcessing._unmarshalJSONOrder: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderCompletedFromJSON(x []byte) (*OrderCompleted, error) {
	result := new(OrderCompleted)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.OrderCompletedFromJSON: %w", err)
	}
	return result, nil
}

func OrderCompletedToJSON(x *OrderCompleted) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderCompleted)(nil)
	_ json.Marshaler   = (*OrderCompleted)(nil)
)

func (r *OrderCompleted) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderCompleted(*r)
}
func (r *OrderCompleted) _marshalJSONOrderCompleted(x OrderCompleted) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrder []byte
	fieldOrder, err = r._marshalJSONOrder(x.Order)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCompleted._marshalJSONOrderCompleted: field name Order; %w", err)
	}
	partial["Order"] = fieldOrder
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCompleted._marshalJSONOrderCompleted: struct; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _marshalJSONOrder(x Order) ([]byte, error) {
	result, err := shared.JSONMarshal[Order](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCompleted._marshalJSONOrder:; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderCompleted(data)
	if err != nil {
		return fmt.Errorf("state: OrderCompleted.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderCompleted) _unmarshalJSONOrderCompleted(data []byte) (OrderCompleted, error) {
	result := OrderCompleted{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: OrderCompleted._unmarshalJSONOrderCompleted: native struct unwrap; %w", err)
	}
	if fieldOrder, ok := partial["Order"]; ok {
		result.Order, err = r._unmarshalJSONOrder(fieldOrder)
		if err != nil {
			return result, fmt.Errorf("state: OrderCompleted._unmarshalJSONOrderCompleted: field Order; %w", err)
		}
	}
	return result, nil
}
func (r *OrderCompleted) _unmarshalJSONOrder(data []byte) (Order, error) {
	result, err := shared.JSONUnmarshal[Order](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderCompleted._unmarshalJSONOrder: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderCancelledFromJSON(x []byte) (*OrderCancelled, error) {
	result := new(OrderCancelled)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.OrderCancelledFromJSON: %w", err)
	}
	return result, nil
}

func OrderCancelledToJSON(x *OrderCancelled) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderCancelled)(nil)
	_ json.Marshaler   = (*OrderCancelled)(nil)
)

func (r *OrderCancelled) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderCancelled(*r)
}
func (r *OrderCancelled) _marshalJSONOrderCancelled(x OrderCancelled) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrder []byte
	fieldOrder, err = r._marshalJSONOrder(x.Order)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCancelled._marshalJSONOrderCancelled: field name Order; %w", err)
	}
	partial["Order"] = fieldOrder
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCancelled._marshalJSONOrderCancelled: struct; %w", err)
	}
	return result, nil
}
func (r *OrderCancelled) _marshalJSONOrder(x Order) ([]byte, error) {
	result, err := shared.JSONMarshal[Order](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderCancelled._marshalJSONOrder:; %w", err)
	}
	return result, nil
}
func (r *OrderCancelled) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderCancelled(data)
	if err != nil {
		return fmt.Errorf("state: OrderCancelled.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderCancelled) _unmarshalJSONOrderCancelled(data []byte) (OrderCancelled, error) {
	result := OrderCancelled{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: OrderCancelled._unmarshalJSONOrderCancelled: native struct unwrap; %w", err)
	}
	if fieldOrder, ok := partial["Order"]; ok {
		result.Order, err = r._unmarshalJSONOrder(fieldOrder)
		if err != nil {
			return result, fmt.Errorf("state: OrderCancelled._unmarshalJSONOrderCancelled: field Order; %w", err)
		}
	}
	return result, nil
}
func (r *OrderCancelled) _unmarshalJSONOrder(data []byte) (Order, error) {
	result, err := shared.JSONUnmarshal[Order](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderCancelled._unmarshalJSONOrder: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderErrorFromJSON(x []byte) (*OrderError, error) {
	result := new(OrderError)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state.OrderErrorFromJSON: %w", err)
	}
	return result, nil
}

func OrderErrorToJSON(x *OrderError) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderError)(nil)
	_ json.Marshaler   = (*OrderError)(nil)
)

func (r *OrderError) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderError(*r)
}
func (r *OrderError) _marshalJSONOrderError(x OrderError) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldRetried []byte
	fieldRetried, err = r._marshalJSONint(x.Retried)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: field name Retried; %w", err)
	}
	partial["Retried"] = fieldRetried
	var fieldRetriedAt []byte
	fieldRetriedAt, err = r._marshalJSONPtrtime_Time(x.RetriedAt)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: field name RetriedAt; %w", err)
	}
	if fieldRetriedAt != nil {
		partial["RetriedAt"] = fieldRetriedAt
	}
	var fieldProblemCode []byte
	fieldProblemCode, err = r._marshalJSONProblemCode(x.ProblemCode)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: field name ProblemCode; %w", err)
	}
	partial["ProblemCode"] = fieldProblemCode
	var fieldProblemCommand []byte
	fieldProblemCommand, err = r._marshalJSONCommand(x.ProblemCommand)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: field name ProblemCommand; %w", err)
	}
	partial["ProblemCommand"] = fieldProblemCommand
	var fieldProblemState []byte
	fieldProblemState, err = r._marshalJSONState(x.ProblemState)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: field name ProblemState; %w", err)
	}
	partial["ProblemState"] = fieldProblemState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONOrderError: struct; %w", err)
	}
	return result, nil
}
func (r *OrderError) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *OrderError) _marshalJSONPtrtime_Time(x *time.Time) ([]byte, error) {
	if x == nil {
		return nil, nil
	}
	return r._marshalJSONtime_Time(*x)
}
func (r *OrderError) _marshalJSONtime_Time(x time.Time) ([]byte, error) {
	result, err := shared.JSONMarshal[time.Time](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONtime_Time:; %w", err)
	}
	return result, nil
}
func (r *OrderError) _marshalJSONProblemCode(x ProblemCode) ([]byte, error) {
	result, err := shared.JSONMarshal[ProblemCode](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONProblemCode:; %w", err)
	}
	return result, nil
}
func (r *OrderError) _marshalJSONCommand(x Command) ([]byte, error) {
	result, err := shared.JSONMarshal[Command](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONCommand:; %w", err)
	}
	return result, nil
}
func (r *OrderError) _marshalJSONState(x State) ([]byte, error) {
	result, err := shared.JSONMarshal[State](x)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._marshalJSONState:; %w", err)
	}
	return result, nil
}
func (r *OrderError) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderError(data)
	if err != nil {
		return fmt.Errorf("state: OrderError.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderError) _unmarshalJSONOrderError(data []byte) (OrderError, error) {
	result := OrderError{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: native struct unwrap; %w", err)
	}
	if fieldRetried, ok := partial["Retried"]; ok {
		result.Retried, err = r._unmarshalJSONint(fieldRetried)
		if err != nil {
			return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: field Retried; %w", err)
		}
	}
	if fieldRetriedAt, ok := partial["RetriedAt"]; ok {
		result.RetriedAt, err = r._unmarshalJSONPtrtime_Time(fieldRetriedAt)
		if err != nil {
			return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: field RetriedAt; %w", err)
		}
	}
	if fieldProblemCode, ok := partial["ProblemCode"]; ok {
		result.ProblemCode, err = r._unmarshalJSONProblemCode(fieldProblemCode)
		if err != nil {
			return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: field ProblemCode; %w", err)
		}
	}
	if fieldProblemCommand, ok := partial["ProblemCommand"]; ok {
		result.ProblemCommand, err = r._unmarshalJSONCommand(fieldProblemCommand)
		if err != nil {
			return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: field ProblemCommand; %w", err)
		}
	}
	if fieldProblemState, ok := partial["ProblemState"]; ok {
		result.ProblemState, err = r._unmarshalJSONState(fieldProblemState)
		if err != nil {
			return result, fmt.Errorf("state: OrderError._unmarshalJSONOrderError: field ProblemState; %w", err)
		}
	}
	return result, nil
}
func (r *OrderError) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderError) _unmarshalJSONPtrtime_Time(data []byte) (*time.Time, error) {
	if len(data) == 0 {
		return nil, nil
	}
	if string(data[:4]) == "null" {
		return nil, nil
	}
	result, err := r._unmarshalJSONtime_Time(data)
	if err != nil {
		return nil, fmt.Errorf("state: OrderError._unmarshalJSONPtrtime_Time: pointer; %w", err)
	}
	return &result, nil
}
func (r *OrderError) _unmarshalJSONtime_Time(data []byte) (time.Time, error) {
	result, err := shared.JSONUnmarshal[time.Time](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONtime_Time: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderError) _unmarshalJSONProblemCode(data []byte) (ProblemCode, error) {
	result, err := shared.JSONUnmarshal[ProblemCode](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONProblemCode: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderError) _unmarshalJSONCommand(data []byte) (Command, error) {
	result, err := shared.JSONUnmarshal[Command](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONCommand: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderError) _unmarshalJSONState(data []byte) (State, error) {
	result, err := shared.JSONUnmarshal[State](data)
	if err != nil {
		return result, fmt.Errorf("state: OrderError._unmarshalJSONState: native ref unwrap; %w", err)
	}
	return result, nil
}
