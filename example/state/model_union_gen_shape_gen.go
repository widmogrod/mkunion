// Code generated by mkunion. DO NOT EDIT.
package state

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(CommandUnionJSONShape())
	shape.Register(StateUnionJSONShape())
}

//shape:shape
func CommandUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "CommandUnionJSON",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "CreateOrderCMD",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.CreateOrderCMD",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "MarkAsProcessingCMD",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.MarkAsProcessingCMD",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "CancelOrderCMD",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.CancelOrderCMD",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "MarkOrderCompleteCMD",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.MarkOrderCompleteCMD",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "TryRecoverErrorCMD",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.TryRecoverErrorCMD",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func StateUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "StateUnionJSON",
		PkgName:       "state",
		PkgImportName: "github.com/widmogrod/mkunion/example/state",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "OrderPending",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.OrderPending",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "OrderProcessing",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.OrderProcessing",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "OrderCompleted",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.OrderCompleted",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "OrderCancelled",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.OrderCancelled",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "OrderError",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "state.OrderError",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
