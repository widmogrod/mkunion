// Code generated by mkunion. DO NOT EDIT.
package example

func TransitionMatchR0[T0 State, T1 Command](
	t0 T0,
	t1 T1,
	f0 func(x0 *Processing, x1 *StartCommand),
	f1 func(x0 *Processing, x1 *CompleteCommand),
	f2 func(x0 *Initial, x1 *StartCommand),
	f3 func(x0 State, x1 Command),
) {
	c0t0, c0t0ok := any(t0).(*Processing)
	c0t1, c0t1ok := any(t1).(*StartCommand)
	if c0t0ok && c0t1ok {
		f0(c0t0, c0t1)
		return
	}
	c1t0, c1t0ok := any(t0).(*Processing)
	c1t1, c1t1ok := any(t1).(*CompleteCommand)
	if c1t0ok && c1t1ok {
		f1(c1t0, c1t1)
		return
	}
	c2t0, c2t0ok := any(t0).(*Initial)
	c2t1, c2t1ok := any(t1).(*StartCommand)
	if c2t0ok && c2t1ok {
		f2(c2t0, c2t1)
		return
	}
	c3t0, c3t0ok := any(t0).(State)
	c3t1, c3t1ok := any(t1).(Command)
	if c3t0ok && c3t1ok {
		f3(c3t0, c3t1)
		return
	}
	panic("TransitionMatchR0 is not exhaustive")
}

func TransitionMatchR1[T0 State, T1 Command, TOut1 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *Processing, x1 *StartCommand) TOut1,
	f1 func(x0 *Processing, x1 *CompleteCommand) TOut1,
	f2 func(x0 *Initial, x1 *StartCommand) TOut1,
	f3 func(x0 State, x1 Command) TOut1,
) TOut1 {
	c0t0, c0t0ok := any(t0).(*Processing)
	c0t1, c0t1ok := any(t1).(*StartCommand)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*Processing)
	c1t1, c1t1ok := any(t1).(*CompleteCommand)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(*Initial)
	c2t1, c2t1ok := any(t1).(*StartCommand)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(State)
	c3t1, c3t1ok := any(t1).(Command)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	panic("TransitionMatchR1 is not exhaustive")
}

func TransitionMatchR2[T0 State, T1 Command, TOut1 any, TOut2 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *Processing, x1 *StartCommand) (TOut1, TOut2),
	f1 func(x0 *Processing, x1 *CompleteCommand) (TOut1, TOut2),
	f2 func(x0 *Initial, x1 *StartCommand) (TOut1, TOut2),
	f3 func(x0 State, x1 Command) (TOut1, TOut2),
) (TOut1, TOut2) {
	c0t0, c0t0ok := any(t0).(*Processing)
	c0t1, c0t1ok := any(t1).(*StartCommand)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*Processing)
	c1t1, c1t1ok := any(t1).(*CompleteCommand)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(*Initial)
	c2t1, c2t1ok := any(t1).(*StartCommand)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(State)
	c3t1, c3t1ok := any(t1).(Command)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	panic("TransitionMatchR2 is not exhaustive")
}

func TransitionMatchR3[T0 State, T1 Command, TOut1 any, TOut2 any, TOut3 any](
	t0 T0,
	t1 T1,
	f0 func(x0 *Processing, x1 *StartCommand) (TOut1, TOut2, TOut3),
	f1 func(x0 *Processing, x1 *CompleteCommand) (TOut1, TOut2, TOut3),
	f2 func(x0 *Initial, x1 *StartCommand) (TOut1, TOut2, TOut3),
	f3 func(x0 State, x1 Command) (TOut1, TOut2, TOut3),
) (TOut1, TOut2, TOut3) {
	c0t0, c0t0ok := any(t0).(*Processing)
	c0t1, c0t1ok := any(t1).(*StartCommand)
	if c0t0ok && c0t1ok {
		return f0(c0t0, c0t1)
	}
	c1t0, c1t0ok := any(t0).(*Processing)
	c1t1, c1t1ok := any(t1).(*CompleteCommand)
	if c1t0ok && c1t1ok {
		return f1(c1t0, c1t1)
	}
	c2t0, c2t0ok := any(t0).(*Initial)
	c2t1, c2t1ok := any(t1).(*StartCommand)
	if c2t0ok && c2t1ok {
		return f2(c2t0, c2t1)
	}
	c3t0, c3t0ok := any(t0).(State)
	c3t1, c3t1ok := any(t1).(Command)
	if c3t0ok && c3t1ok {
		return f3(c3t0, c3t1)
	}
	panic("TransitionMatchR3 is not exhaustive")
}
