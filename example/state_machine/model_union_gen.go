// Code generated by mkunion. DO NOT EDIT.
package state_machine

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type CommandVisitor interface {
	VisitCreateOrderCMD(v *CreateOrderCMD) any
	VisitStartProcessingCMD(v *StartProcessingCMD) any
	VisitCompleteOrderCMD(v *CompleteOrderCMD) any
	VisitCancelOrderCMD(v *CancelOrderCMD) any
	VisitConfirmOrderCMD(v *ConfirmOrderCMD) any
}

type Command interface {
	AcceptCommand(g CommandVisitor) any
}

var (
	_ Command = (*CreateOrderCMD)(nil)
	_ Command = (*StartProcessingCMD)(nil)
	_ Command = (*CompleteOrderCMD)(nil)
	_ Command = (*CancelOrderCMD)(nil)
	_ Command = (*ConfirmOrderCMD)(nil)
)

func (r *CreateOrderCMD) AcceptCommand(v CommandVisitor) any     { return v.VisitCreateOrderCMD(r) }
func (r *StartProcessingCMD) AcceptCommand(v CommandVisitor) any { return v.VisitStartProcessingCMD(r) }
func (r *CompleteOrderCMD) AcceptCommand(v CommandVisitor) any   { return v.VisitCompleteOrderCMD(r) }
func (r *CancelOrderCMD) AcceptCommand(v CommandVisitor) any     { return v.VisitCancelOrderCMD(r) }
func (r *ConfirmOrderCMD) AcceptCommand(v CommandVisitor) any    { return v.VisitConfirmOrderCMD(r) }

func MatchCommandR3[T0, T1, T2 any](
	x Command,
	f1 func(x *CreateOrderCMD) (T0, T1, T2),
	f2 func(x *StartProcessingCMD) (T0, T1, T2),
	f3 func(x *CompleteOrderCMD) (T0, T1, T2),
	f4 func(x *CancelOrderCMD) (T0, T1, T2),
	f5 func(x *ConfirmOrderCMD) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *StartProcessingCMD:
		return f2(v)
	case *CompleteOrderCMD:
		return f3(v)
	case *CancelOrderCMD:
		return f4(v)
	case *ConfirmOrderCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchCommandR2[T0, T1 any](
	x Command,
	f1 func(x *CreateOrderCMD) (T0, T1),
	f2 func(x *StartProcessingCMD) (T0, T1),
	f3 func(x *CompleteOrderCMD) (T0, T1),
	f4 func(x *CancelOrderCMD) (T0, T1),
	f5 func(x *ConfirmOrderCMD) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *StartProcessingCMD:
		return f2(v)
	case *CompleteOrderCMD:
		return f3(v)
	case *CancelOrderCMD:
		return f4(v)
	case *ConfirmOrderCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchCommandR1[T0 any](
	x Command,
	f1 func(x *CreateOrderCMD) T0,
	f2 func(x *StartProcessingCMD) T0,
	f3 func(x *CompleteOrderCMD) T0,
	f4 func(x *CancelOrderCMD) T0,
	f5 func(x *ConfirmOrderCMD) T0,
) T0 {
	switch v := x.(type) {
	case *CreateOrderCMD:
		return f1(v)
	case *StartProcessingCMD:
		return f2(v)
	case *CompleteOrderCMD:
		return f3(v)
	case *CancelOrderCMD:
		return f4(v)
	case *ConfirmOrderCMD:
		return f5(v)
	}
	var result1 T0
	return result1
}

func MatchCommandR0(
	x Command,
	f1 func(x *CreateOrderCMD),
	f2 func(x *StartProcessingCMD),
	f3 func(x *CompleteOrderCMD),
	f4 func(x *CancelOrderCMD),
	f5 func(x *ConfirmOrderCMD),
) {
	switch v := x.(type) {
	case *CreateOrderCMD:
		f1(v)
	case *StartProcessingCMD:
		f2(v)
	case *CompleteOrderCMD:
		f3(v)
	case *CancelOrderCMD:
		f4(v)
	case *ConfirmOrderCMD:
		f5(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.CancelOrderCMD", CancelOrderCMDFromJSON, CancelOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.Command", CommandFromJSON, CommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.CompleteOrderCMD", CompleteOrderCMDFromJSON, CompleteOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.ConfirmOrderCMD", ConfirmOrderCMDFromJSON, ConfirmOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.CreateOrderCMD", CreateOrderCMDFromJSON, CreateOrderCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.StartProcessingCMD", StartProcessingCMDFromJSON, StartProcessingCMDToJSON)
}

type CommandUnionJSON struct {
	Type               string          `json:"$type,omitempty"`
	CreateOrderCMD     json.RawMessage `json:"state_machine.CreateOrderCMD,omitempty"`
	StartProcessingCMD json.RawMessage `json:"state_machine.StartProcessingCMD,omitempty"`
	CompleteOrderCMD   json.RawMessage `json:"state_machine.CompleteOrderCMD,omitempty"`
	CancelOrderCMD     json.RawMessage `json:"state_machine.CancelOrderCMD,omitempty"`
	ConfirmOrderCMD    json.RawMessage `json:"state_machine.ConfirmOrderCMD,omitempty"`
}

func CommandFromJSON(x []byte) (Command, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data CommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("state_machine.CommandFromJSON: %w", err)
	}

	switch data.Type {
	case "state_machine.CreateOrderCMD":
		return CreateOrderCMDFromJSON(data.CreateOrderCMD)
	case "state_machine.StartProcessingCMD":
		return StartProcessingCMDFromJSON(data.StartProcessingCMD)
	case "state_machine.CompleteOrderCMD":
		return CompleteOrderCMDFromJSON(data.CompleteOrderCMD)
	case "state_machine.CancelOrderCMD":
		return CancelOrderCMDFromJSON(data.CancelOrderCMD)
	case "state_machine.ConfirmOrderCMD":
		return ConfirmOrderCMDFromJSON(data.ConfirmOrderCMD)
	}

	if data.CreateOrderCMD != nil {
		return CreateOrderCMDFromJSON(data.CreateOrderCMD)
	} else if data.StartProcessingCMD != nil {
		return StartProcessingCMDFromJSON(data.StartProcessingCMD)
	} else if data.CompleteOrderCMD != nil {
		return CompleteOrderCMDFromJSON(data.CompleteOrderCMD)
	} else if data.CancelOrderCMD != nil {
		return CancelOrderCMDFromJSON(data.CancelOrderCMD)
	} else if data.ConfirmOrderCMD != nil {
		return ConfirmOrderCMDFromJSON(data.ConfirmOrderCMD)
	}
	return nil, fmt.Errorf("state_machine.CommandFromJSON: unknown type: %s", data.Type)
}

func CommandToJSON(x Command) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchCommandR2(
		x,
		func(y *CreateOrderCMD) ([]byte, error) {
			body, err := CreateOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:           "state_machine.CreateOrderCMD",
				CreateOrderCMD: body,
			})
		},
		func(y *StartProcessingCMD) ([]byte, error) {
			body, err := StartProcessingCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:               "state_machine.StartProcessingCMD",
				StartProcessingCMD: body,
			})
		},
		func(y *CompleteOrderCMD) ([]byte, error) {
			body, err := CompleteOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:             "state_machine.CompleteOrderCMD",
				CompleteOrderCMD: body,
			})
		},
		func(y *CancelOrderCMD) ([]byte, error) {
			body, err := CancelOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:           "state_machine.CancelOrderCMD",
				CancelOrderCMD: body,
			})
		},
		func(y *ConfirmOrderCMD) ([]byte, error) {
			body, err := ConfirmOrderCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:            "state_machine.ConfirmOrderCMD",
				ConfirmOrderCMD: body,
			})
		},
	)
}

func CreateOrderCMDFromJSON(x []byte) (*CreateOrderCMD, error) {
	result := new(CreateOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.CreateOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func CreateOrderCMDToJSON(x *CreateOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CreateOrderCMD)(nil)
	_ json.Marshaler   = (*CreateOrderCMD)(nil)
)

func (r *CreateOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCreateOrderCMD(*r)
}
func (r *CreateOrderCMD) _marshalJSONCreateOrderCMD(x CreateOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONstring(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONCreateOrderCMD: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldItems []byte
	fieldItems, err = r._marshalJSONSliceOrderItem(x.Items)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONCreateOrderCMD: field name Items; %w", err)
	}
	partial["Items"] = fieldItems
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONCreateOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _marshalJSONSliceOrderItem(x []OrderItem) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONOrderItem(v)
		if err != nil {
			return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONSliceOrderItem:; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _marshalJSONOrderItem(x OrderItem) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderItem](x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CreateOrderCMD._marshalJSONOrderItem:; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCreateOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state_machine: CreateOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CreateOrderCMD) _unmarshalJSONCreateOrderCMD(data []byte) (CreateOrderCMD, error) {
	result := CreateOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONCreateOrderCMD: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONstring(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONCreateOrderCMD: field OrderID; %w", err)
		}
	}
	if fieldItems, ok := partial["Items"]; ok {
		result.Items, err = r._unmarshalJSONSliceOrderItem(fieldItems)
		if err != nil {
			return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONCreateOrderCMD: field Items; %w", err)
		}
	}
	return result, nil
}
func (r *CreateOrderCMD) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *CreateOrderCMD) _unmarshalJSONSliceOrderItem(data []byte) ([]OrderItem, error) {
	result := make([]OrderItem, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONSliceOrderItem: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONOrderItem(v)
		if err != nil {
			return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *CreateOrderCMD) _unmarshalJSONOrderItem(data []byte) (OrderItem, error) {
	result, err := shared.JSONUnmarshal[OrderItem](data)
	if err != nil {
		return result, fmt.Errorf("state_machine: CreateOrderCMD._unmarshalJSONOrderItem: native ref unwrap; %w", err)
	}
	return result, nil
}

func StartProcessingCMDFromJSON(x []byte) (*StartProcessingCMD, error) {
	result := new(StartProcessingCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.StartProcessingCMDFromJSON: %w", err)
	}
	return result, nil
}

func StartProcessingCMDToJSON(x *StartProcessingCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*StartProcessingCMD)(nil)
	_ json.Marshaler   = (*StartProcessingCMD)(nil)
)

func (r *StartProcessingCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONStartProcessingCMD(*r)
}
func (r *StartProcessingCMD) _marshalJSONStartProcessingCMD(x StartProcessingCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldWorkerID []byte
	fieldWorkerID, err = r._marshalJSONstring(x.WorkerID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: StartProcessingCMD._marshalJSONStartProcessingCMD: field name WorkerID; %w", err)
	}
	partial["WorkerID"] = fieldWorkerID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: StartProcessingCMD._marshalJSONStartProcessingCMD: struct; %w", err)
	}
	return result, nil
}
func (r *StartProcessingCMD) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: StartProcessingCMD._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *StartProcessingCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONStartProcessingCMD(data)
	if err != nil {
		return fmt.Errorf("state_machine: StartProcessingCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *StartProcessingCMD) _unmarshalJSONStartProcessingCMD(data []byte) (StartProcessingCMD, error) {
	result := StartProcessingCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: StartProcessingCMD._unmarshalJSONStartProcessingCMD: native struct unwrap; %w", err)
	}
	if fieldWorkerID, ok := partial["WorkerID"]; ok {
		result.WorkerID, err = r._unmarshalJSONstring(fieldWorkerID)
		if err != nil {
			return result, fmt.Errorf("state_machine: StartProcessingCMD._unmarshalJSONStartProcessingCMD: field WorkerID; %w", err)
		}
	}
	return result, nil
}
func (r *StartProcessingCMD) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: StartProcessingCMD._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func CompleteOrderCMDFromJSON(x []byte) (*CompleteOrderCMD, error) {
	result := new(CompleteOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.CompleteOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func CompleteOrderCMDToJSON(x *CompleteOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CompleteOrderCMD)(nil)
	_ json.Marshaler   = (*CompleteOrderCMD)(nil)
)

func (r *CompleteOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCompleteOrderCMD(*r)
}
func (r *CompleteOrderCMD) _marshalJSONCompleteOrderCMD(x CompleteOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTotalAmount []byte
	fieldTotalAmount, err = r._marshalJSONfloat64(x.TotalAmount)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CompleteOrderCMD._marshalJSONCompleteOrderCMD: field name TotalAmount; %w", err)
	}
	partial["TotalAmount"] = fieldTotalAmount
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CompleteOrderCMD._marshalJSONCompleteOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CompleteOrderCMD) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CompleteOrderCMD._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *CompleteOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCompleteOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state_machine: CompleteOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CompleteOrderCMD) _unmarshalJSONCompleteOrderCMD(data []byte) (CompleteOrderCMD, error) {
	result := CompleteOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: CompleteOrderCMD._unmarshalJSONCompleteOrderCMD: native struct unwrap; %w", err)
	}
	if fieldTotalAmount, ok := partial["TotalAmount"]; ok {
		result.TotalAmount, err = r._unmarshalJSONfloat64(fieldTotalAmount)
		if err != nil {
			return result, fmt.Errorf("state_machine: CompleteOrderCMD._unmarshalJSONCompleteOrderCMD: field TotalAmount; %w", err)
		}
	}
	return result, nil
}
func (r *CompleteOrderCMD) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: CompleteOrderCMD._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func CancelOrderCMDFromJSON(x []byte) (*CancelOrderCMD, error) {
	result := new(CancelOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.CancelOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func CancelOrderCMDToJSON(x *CancelOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CancelOrderCMD)(nil)
	_ json.Marshaler   = (*CancelOrderCMD)(nil)
)

func (r *CancelOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCancelOrderCMD(*r)
}
func (r *CancelOrderCMD) _marshalJSONCancelOrderCMD(x CancelOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldReason []byte
	fieldReason, err = r._marshalJSONstring(x.Reason)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CancelOrderCMD._marshalJSONCancelOrderCMD: field name Reason; %w", err)
	}
	partial["Reason"] = fieldReason
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CancelOrderCMD._marshalJSONCancelOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: CancelOrderCMD._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *CancelOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCancelOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state_machine: CancelOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CancelOrderCMD) _unmarshalJSONCancelOrderCMD(data []byte) (CancelOrderCMD, error) {
	result := CancelOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: CancelOrderCMD._unmarshalJSONCancelOrderCMD: native struct unwrap; %w", err)
	}
	if fieldReason, ok := partial["Reason"]; ok {
		result.Reason, err = r._unmarshalJSONstring(fieldReason)
		if err != nil {
			return result, fmt.Errorf("state_machine: CancelOrderCMD._unmarshalJSONCancelOrderCMD: field Reason; %w", err)
		}
	}
	return result, nil
}
func (r *CancelOrderCMD) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: CancelOrderCMD._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func ConfirmOrderCMDFromJSON(x []byte) (*ConfirmOrderCMD, error) {
	result := new(ConfirmOrderCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.ConfirmOrderCMDFromJSON: %w", err)
	}
	return result, nil
}

func ConfirmOrderCMDToJSON(x *ConfirmOrderCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*ConfirmOrderCMD)(nil)
	_ json.Marshaler   = (*ConfirmOrderCMD)(nil)
)

func (r *ConfirmOrderCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONConfirmOrderCMD(*r)
}
func (r *ConfirmOrderCMD) _marshalJSONConfirmOrderCMD(x ConfirmOrderCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: ConfirmOrderCMD._marshalJSONConfirmOrderCMD: struct; %w", err)
	}
	return result, nil
}
func (r *ConfirmOrderCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONConfirmOrderCMD(data)
	if err != nil {
		return fmt.Errorf("state_machine: ConfirmOrderCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *ConfirmOrderCMD) _unmarshalJSONConfirmOrderCMD(data []byte) (ConfirmOrderCMD, error) {
	result := ConfirmOrderCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: ConfirmOrderCMD._unmarshalJSONConfirmOrderCMD: native struct unwrap; %w", err)
	}
	return result, nil
}

type StateVisitor interface {
	VisitOrderPending(v *OrderPending) any
	VisitOrderProcessing(v *OrderProcessing) any
	VisitOrderCompleted(v *OrderCompleted) any
	VisitOrderCancelled(v *OrderCancelled) any
}

type State interface {
	AcceptState(g StateVisitor) any
}

var (
	_ State = (*OrderPending)(nil)
	_ State = (*OrderProcessing)(nil)
	_ State = (*OrderCompleted)(nil)
	_ State = (*OrderCancelled)(nil)
)

func (r *OrderPending) AcceptState(v StateVisitor) any    { return v.VisitOrderPending(r) }
func (r *OrderProcessing) AcceptState(v StateVisitor) any { return v.VisitOrderProcessing(r) }
func (r *OrderCompleted) AcceptState(v StateVisitor) any  { return v.VisitOrderCompleted(r) }
func (r *OrderCancelled) AcceptState(v StateVisitor) any  { return v.VisitOrderCancelled(r) }

func MatchStateR3[T0, T1, T2 any](
	x State,
	f1 func(x *OrderPending) (T0, T1, T2),
	f2 func(x *OrderProcessing) (T0, T1, T2),
	f3 func(x *OrderCompleted) (T0, T1, T2),
	f4 func(x *OrderCancelled) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchStateR2[T0, T1 any](
	x State,
	f1 func(x *OrderPending) (T0, T1),
	f2 func(x *OrderProcessing) (T0, T1),
	f3 func(x *OrderCompleted) (T0, T1),
	f4 func(x *OrderCancelled) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchStateR1[T0 any](
	x State,
	f1 func(x *OrderPending) T0,
	f2 func(x *OrderProcessing) T0,
	f3 func(x *OrderCompleted) T0,
	f4 func(x *OrderCancelled) T0,
) T0 {
	switch v := x.(type) {
	case *OrderPending:
		return f1(v)
	case *OrderProcessing:
		return f2(v)
	case *OrderCompleted:
		return f3(v)
	case *OrderCancelled:
		return f4(v)
	}
	var result1 T0
	return result1
}

func MatchStateR0(
	x State,
	f1 func(x *OrderPending),
	f2 func(x *OrderProcessing),
	f3 func(x *OrderCompleted),
	f4 func(x *OrderCancelled),
) {
	switch v := x.(type) {
	case *OrderPending:
		f1(v)
	case *OrderProcessing:
		f2(v)
	case *OrderCompleted:
		f3(v)
	case *OrderCancelled:
		f4(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.OrderCancelled", OrderCancelledFromJSON, OrderCancelledToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.OrderCompleted", OrderCompletedFromJSON, OrderCompletedToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.OrderPending", OrderPendingFromJSON, OrderPendingToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.OrderProcessing", OrderProcessingFromJSON, OrderProcessingToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/state_machine.State", StateFromJSON, StateToJSON)
}

type StateUnionJSON struct {
	Type            string          `json:"$type,omitempty"`
	OrderPending    json.RawMessage `json:"state_machine.OrderPending,omitempty"`
	OrderProcessing json.RawMessage `json:"state_machine.OrderProcessing,omitempty"`
	OrderCompleted  json.RawMessage `json:"state_machine.OrderCompleted,omitempty"`
	OrderCancelled  json.RawMessage `json:"state_machine.OrderCancelled,omitempty"`
}

func StateFromJSON(x []byte) (State, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data StateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("state_machine.StateFromJSON: %w", err)
	}

	switch data.Type {
	case "state_machine.OrderPending":
		return OrderPendingFromJSON(data.OrderPending)
	case "state_machine.OrderProcessing":
		return OrderProcessingFromJSON(data.OrderProcessing)
	case "state_machine.OrderCompleted":
		return OrderCompletedFromJSON(data.OrderCompleted)
	case "state_machine.OrderCancelled":
		return OrderCancelledFromJSON(data.OrderCancelled)
	}

	if data.OrderPending != nil {
		return OrderPendingFromJSON(data.OrderPending)
	} else if data.OrderProcessing != nil {
		return OrderProcessingFromJSON(data.OrderProcessing)
	} else if data.OrderCompleted != nil {
		return OrderCompletedFromJSON(data.OrderCompleted)
	} else if data.OrderCancelled != nil {
		return OrderCancelledFromJSON(data.OrderCancelled)
	}
	return nil, fmt.Errorf("state_machine.StateFromJSON: unknown type: %s", data.Type)
}

func StateToJSON(x State) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchStateR2(
		x,
		func(y *OrderPending) ([]byte, error) {
			body, err := OrderPendingToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:         "state_machine.OrderPending",
				OrderPending: body,
			})
		},
		func(y *OrderProcessing) ([]byte, error) {
			body, err := OrderProcessingToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:            "state_machine.OrderProcessing",
				OrderProcessing: body,
			})
		},
		func(y *OrderCompleted) ([]byte, error) {
			body, err := OrderCompletedToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:           "state_machine.OrderCompleted",
				OrderCompleted: body,
			})
		},
		func(y *OrderCancelled) ([]byte, error) {
			body, err := OrderCancelledToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("state_machine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:           "state_machine.OrderCancelled",
				OrderCancelled: body,
			})
		},
	)
}

func OrderPendingFromJSON(x []byte) (*OrderPending, error) {
	result := new(OrderPending)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.OrderPendingFromJSON: %w", err)
	}
	return result, nil
}

func OrderPendingToJSON(x *OrderPending) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderPending)(nil)
	_ json.Marshaler   = (*OrderPending)(nil)
)

func (r *OrderPending) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderPending(*r)
}
func (r *OrderPending) _marshalJSONOrderPending(x OrderPending) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONstring(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONOrderPending: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldItems []byte
	fieldItems, err = r._marshalJSONSliceOrderItem(x.Items)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONOrderPending: field name Items; %w", err)
	}
	partial["Items"] = fieldItems
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONOrderPending: struct; %w", err)
	}
	return result, nil
}
func (r *OrderPending) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *OrderPending) _marshalJSONSliceOrderItem(x []OrderItem) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONOrderItem(v)
		if err != nil {
			return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONSliceOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderPending) _marshalJSONOrderItem(x OrderItem) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderItem](x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderPending._marshalJSONOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderPending) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderPending(data)
	if err != nil {
		return fmt.Errorf("state_machine: OrderPending.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderPending) _unmarshalJSONOrderPending(data []byte) (OrderPending, error) {
	result := OrderPending{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONOrderPending: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONstring(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONOrderPending: field OrderID; %w", err)
		}
	}
	if fieldItems, ok := partial["Items"]; ok {
		result.Items, err = r._unmarshalJSONSliceOrderItem(fieldItems)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONOrderPending: field Items; %w", err)
		}
	}
	return result, nil
}
func (r *OrderPending) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderPending) _unmarshalJSONSliceOrderItem(data []byte) ([]OrderItem, error) {
	result := make([]OrderItem, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONSliceOrderItem: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONOrderItem(v)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *OrderPending) _unmarshalJSONOrderItem(data []byte) (OrderItem, error) {
	result, err := shared.JSONUnmarshal[OrderItem](data)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderPending._unmarshalJSONOrderItem: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderProcessingFromJSON(x []byte) (*OrderProcessing, error) {
	result := new(OrderProcessing)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.OrderProcessingFromJSON: %w", err)
	}
	return result, nil
}

func OrderProcessingToJSON(x *OrderProcessing) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderProcessing)(nil)
	_ json.Marshaler   = (*OrderProcessing)(nil)
)

func (r *OrderProcessing) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderProcessing(*r)
}
func (r *OrderProcessing) _marshalJSONOrderProcessing(x OrderProcessing) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONstring(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONOrderProcessing: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldItems []byte
	fieldItems, err = r._marshalJSONSliceOrderItem(x.Items)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONOrderProcessing: field name Items; %w", err)
	}
	partial["Items"] = fieldItems
	var fieldWorkerID []byte
	fieldWorkerID, err = r._marshalJSONstring(x.WorkerID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONOrderProcessing: field name WorkerID; %w", err)
	}
	partial["WorkerID"] = fieldWorkerID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONOrderProcessing: struct; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) _marshalJSONSliceOrderItem(x []OrderItem) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONOrderItem(v)
		if err != nil {
			return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONSliceOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) _marshalJSONOrderItem(x OrderItem) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderItem](x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderProcessing._marshalJSONOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderProcessing(data)
	if err != nil {
		return fmt.Errorf("state_machine: OrderProcessing.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderProcessing) _unmarshalJSONOrderProcessing(data []byte) (OrderProcessing, error) {
	result := OrderProcessing{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONOrderProcessing: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONstring(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONOrderProcessing: field OrderID; %w", err)
		}
	}
	if fieldItems, ok := partial["Items"]; ok {
		result.Items, err = r._unmarshalJSONSliceOrderItem(fieldItems)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONOrderProcessing: field Items; %w", err)
		}
	}
	if fieldWorkerID, ok := partial["WorkerID"]; ok {
		result.WorkerID, err = r._unmarshalJSONstring(fieldWorkerID)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONOrderProcessing: field WorkerID; %w", err)
		}
	}
	return result, nil
}
func (r *OrderProcessing) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderProcessing) _unmarshalJSONSliceOrderItem(data []byte) ([]OrderItem, error) {
	result := make([]OrderItem, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONSliceOrderItem: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONOrderItem(v)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *OrderProcessing) _unmarshalJSONOrderItem(data []byte) (OrderItem, error) {
	result, err := shared.JSONUnmarshal[OrderItem](data)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderProcessing._unmarshalJSONOrderItem: native ref unwrap; %w", err)
	}
	return result, nil
}

func OrderCompletedFromJSON(x []byte) (*OrderCompleted, error) {
	result := new(OrderCompleted)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.OrderCompletedFromJSON: %w", err)
	}
	return result, nil
}

func OrderCompletedToJSON(x *OrderCompleted) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderCompleted)(nil)
	_ json.Marshaler   = (*OrderCompleted)(nil)
)

func (r *OrderCompleted) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderCompleted(*r)
}
func (r *OrderCompleted) _marshalJSONOrderCompleted(x OrderCompleted) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONstring(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONOrderCompleted: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldItems []byte
	fieldItems, err = r._marshalJSONSliceOrderItem(x.Items)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONOrderCompleted: field name Items; %w", err)
	}
	partial["Items"] = fieldItems
	var fieldTotalAmount []byte
	fieldTotalAmount, err = r._marshalJSONfloat64(x.TotalAmount)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONOrderCompleted: field name TotalAmount; %w", err)
	}
	partial["TotalAmount"] = fieldTotalAmount
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONOrderCompleted: struct; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _marshalJSONSliceOrderItem(x []OrderItem) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONOrderItem(v)
		if err != nil {
			return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONSliceOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _marshalJSONOrderItem(x OrderItem) ([]byte, error) {
	result, err := shared.JSONMarshal[OrderItem](x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONOrderItem:; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCompleted._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderCompleted(data)
	if err != nil {
		return fmt.Errorf("state_machine: OrderCompleted.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderCompleted) _unmarshalJSONOrderCompleted(data []byte) (OrderCompleted, error) {
	result := OrderCompleted{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONOrderCompleted: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONstring(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONOrderCompleted: field OrderID; %w", err)
		}
	}
	if fieldItems, ok := partial["Items"]; ok {
		result.Items, err = r._unmarshalJSONSliceOrderItem(fieldItems)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONOrderCompleted: field Items; %w", err)
		}
	}
	if fieldTotalAmount, ok := partial["TotalAmount"]; ok {
		result.TotalAmount, err = r._unmarshalJSONfloat64(fieldTotalAmount)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONOrderCompleted: field TotalAmount; %w", err)
		}
	}
	return result, nil
}
func (r *OrderCompleted) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _unmarshalJSONSliceOrderItem(data []byte) ([]OrderItem, error) {
	result := make([]OrderItem, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONSliceOrderItem: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONOrderItem(v)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONSliceOrderItem: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *OrderCompleted) _unmarshalJSONOrderItem(data []byte) (OrderItem, error) {
	result, err := shared.JSONUnmarshal[OrderItem](data)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONOrderItem: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *OrderCompleted) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCompleted._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func OrderCancelledFromJSON(x []byte) (*OrderCancelled, error) {
	result := new(OrderCancelled)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine.OrderCancelledFromJSON: %w", err)
	}
	return result, nil
}

func OrderCancelledToJSON(x *OrderCancelled) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*OrderCancelled)(nil)
	_ json.Marshaler   = (*OrderCancelled)(nil)
)

func (r *OrderCancelled) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONOrderCancelled(*r)
}
func (r *OrderCancelled) _marshalJSONOrderCancelled(x OrderCancelled) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldOrderID []byte
	fieldOrderID, err = r._marshalJSONstring(x.OrderID)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCancelled._marshalJSONOrderCancelled: field name OrderID; %w", err)
	}
	partial["OrderID"] = fieldOrderID
	var fieldReason []byte
	fieldReason, err = r._marshalJSONstring(x.Reason)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCancelled._marshalJSONOrderCancelled: field name Reason; %w", err)
	}
	partial["Reason"] = fieldReason
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCancelled._marshalJSONOrderCancelled: struct; %w", err)
	}
	return result, nil
}
func (r *OrderCancelled) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("state_machine: OrderCancelled._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *OrderCancelled) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONOrderCancelled(data)
	if err != nil {
		return fmt.Errorf("state_machine: OrderCancelled.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *OrderCancelled) _unmarshalJSONOrderCancelled(data []byte) (OrderCancelled, error) {
	result := OrderCancelled{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCancelled._unmarshalJSONOrderCancelled: native struct unwrap; %w", err)
	}
	if fieldOrderID, ok := partial["OrderID"]; ok {
		result.OrderID, err = r._unmarshalJSONstring(fieldOrderID)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCancelled._unmarshalJSONOrderCancelled: field OrderID; %w", err)
		}
	}
	if fieldReason, ok := partial["Reason"]; ok {
		result.Reason, err = r._unmarshalJSONstring(fieldReason)
		if err != nil {
			return result, fmt.Errorf("state_machine: OrderCancelled._unmarshalJSONOrderCancelled: field Reason; %w", err)
		}
	}
	return result, nil
}
func (r *OrderCancelled) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("state_machine: OrderCancelled._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
