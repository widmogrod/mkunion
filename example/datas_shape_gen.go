// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(APIErrorShape())
	shape.Register(ErrShape())
	shape.Register(FetchResultShape())
	shape.Register(NoneShape())
	shape.Register(OkShape())
	shape.Register(OptionShape())
	shape.Register(ResultShape())
	shape.Register(SomeShape())
	shape.Register(UserShape())
}

//shape:shape

func OptionShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Option",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Variant: []shape.Shape{
			NoneShape(),
			SomeShape(),
		},
	}
}

func NoneShape() shape.Shape {
	return &shape.StructLike{
		Name:          "None",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Option",
			},
		},
	}
}

func SomeShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Some",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "T",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Option",
			},
		},
	}
}

//shape:shape

func ResultShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Result",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "E",
				Type: &shape.Any{},
			},
		},
		Variant: []shape.Shape{
			OkShape(),
			ErrShape(),
		},
	}
}

func OkShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Ok",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "E",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.RefName{
					Name:          "T",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Result",
			},
		},
	}
}

func ErrShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Err",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		TypeParams: []shape.TypeParam{
			shape.TypeParam{
				Name: "T",
				Type: &shape.Any{},
			},
			shape.TypeParam{
				Name: "E",
				Type: &shape.Any{},
			},
		},
		Fields: []*shape.FieldLike{
			{
				Name: "Error",
				Type: &shape.RefName{
					Name:          "E",
					PkgName:       "",
					PkgImportName: "",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Result",
			},
		},
	}
}

//shape:shape
func APIErrorShape() shape.Shape {
	return &shape.StructLike{
		Name:          "APIError",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Code",
				Type: &shape.PrimitiveLike{
					Kind: &shape.NumberLike{
						Kind: &shape.Int{},
					},
				},
			},
			{
				Name: "Message",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
	}
}

//shape:shape
func FetchResultShape() shape.Shape {
	return &shape.AliasLike{
		Name:          "FetchResult",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		IsAlias:       true,
		Type: &shape.RefName{
			Name:          "Result",
			PkgName:       "example",
			PkgImportName: "github.com/widmogrod/mkunion/example",
			Indexed: []shape.Shape{
				&shape.RefName{
					Name:          "Option",
					PkgName:       "example",
					PkgImportName: "github.com/widmogrod/mkunion/example",
					Indexed: []shape.Shape{
						&shape.RefName{
							Name:          "User",
							PkgName:       "example",
							PkgImportName: "github.com/widmogrod/mkunion/example",
						},
					},
				},
				&shape.RefName{
					Name:          "APIError",
					PkgName:       "example",
					PkgImportName: "github.com/widmogrod/mkunion/example",
				},
			},
		},
	}
}

//shape:shape
func UserShape() shape.Shape {
	return &shape.StructLike{
		Name:          "User",
		PkgName:       "example",
		PkgImportName: "github.com/widmogrod/mkunion/example",
		Fields: []*shape.FieldLike{
			{
				Name: "Name",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
			},
		},
	}
}
