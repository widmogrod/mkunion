// Code generated by mkunion. DO NOT EDIT.
package ast

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(EqToShape())
	shape.Register(GrThanShape())
	shape.Register(OrFieldsShape())
	shape.Register(SyntaxSugarShape())
}

//shape:shape

func SyntaxSugarShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "SyntaxSugar",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Variant: []shape.Shape{
			EqToShape(),
			GrThanShape(),
			OrFieldsShape(),
		},
	}
}

func EqToShape() shape.Shape {
	return &shape.StructLike{
		Name:          "EqTo",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "V",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "SyntaxSugar",
			},
		},
	}
}

func GrThanShape() shape.Shape {
	return &shape.StructLike{
		Name:          "GrThan",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "V",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "SyntaxSugar",
			},
		},
	}
}

func OrFieldsShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OrFields",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "M",
				Type: &shape.MapLike{
					Key: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
					Val: &shape.RefName{
						Name:          "SyntaxSugar",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "SyntaxSugar",
			},
		},
	}
}
