// Code generated by mkunion. DO NOT EDIT.
package ast

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(OperatorUnionJSONShape())
	shape.Register(ValueUnionJSONShape())
}

//shape:shape
func OperatorUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "OperatorUnionJSON",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Eq",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Eq",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Gt",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Gt",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "And",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.And",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Or",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Or",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Not",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Not",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func ValueUnionJSONShape() shape.Shape {
	return &shape.StructLike{
		Name:          "ValueUnionJSON",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Type",
				Type: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "$type",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Lit",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Lit",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Accessor",
				Type: &shape.RefName{
					Name:          "RawMessage",
					PkgName:       "json",
					PkgImportName: "encoding/json",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "ast.Accessor",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}
