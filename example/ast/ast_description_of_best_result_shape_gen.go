// Code generated by mkunion. DO NOT EDIT.
package ast

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(BoostWhenFieldRuleOneOfShape())
	shape.Register(DescriptionOfBestResultShape())
	shape.Register(FieldRuleOneOfShape())
}

//shape:shape
func BoostWhenFieldRuleOneOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "BoostWhenFieldRuleOneOf",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Boost",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{
						Kind: &shape.NumberLike{
							Kind: &shape.Float64{},
						},
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "boost",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "MultiplyUsingFieldValue",
				Type: &shape.PointerLike{
					Type: &shape.PrimitiveLike{Kind: &shape.BooleanLike{}},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "multiply",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "When",
				Type: &shape.RefName{
					Name:          "FieldRuleOneOf",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "when",
					},
				},
			},
		},
	}
}

//shape:shape
func FieldRuleOneOfShape() shape.Shape {
	return &shape.StructLike{
		Name:          "FieldRuleOneOf",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Field",
				Type: &shape.RefName{
					Name:          "Field",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "field",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Eq",
				Type: &shape.Any{},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "eq",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Gt",
				Type: &shape.Any{},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "gt",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Or",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "FieldRuleOneOf",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "or",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "And",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "FieldRuleOneOf",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "and",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
			{
				Name: "Not",
				Type: &shape.PointerLike{
					Type: &shape.RefName{
						Name:          "FieldRuleOneOf",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "not",
						Options: []string{
							"omitempty",
						},
					},
				},
			},
		},
	}
}

//shape:shape
func DescriptionOfBestResultShape() shape.Shape {
	return &shape.StructLike{
		Name:          "DescriptionOfBestResult",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "AtLeastOneOf",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "BoostWhenFieldRuleOneOf",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "atLeastOneOf",
					},
				},
			},
			{
				Name: "MustMatchOneOf",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "FieldRuleOneOf",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
				Tags: map[string]shape.Tag{
					"json": {
						Value: "mustMatchOneOf",
					},
				},
			},
		},
	}
}
