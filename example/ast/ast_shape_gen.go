// Code generated by mkunion. DO NOT EDIT.
package ast

import (
	"github.com/widmogrod/mkunion/x/shape"
)

func init() {
	shape.Register(AccessorShape())
	shape.Register(AndShape())
	shape.Register(EqShape())
	shape.Register(GtShape())
	shape.Register(LitShape())
	shape.Register(NotShape())
	shape.Register(OperatorShape())
	shape.Register(OrShape())
	shape.Register(ValueShape())
}

//shape:shape

func OperatorShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Operator",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Variant: []shape.Shape{
			EqShape(),
			GtShape(),
			AndShape(),
			OrShape(),
			NotShape(),
		},
	}
}

func EqShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Eq",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.RefName{
					Name:          "Value",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
			},
			{
				Name: "R",
				Type: &shape.RefName{
					Name:          "Value",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Operator",
			},
		},
	}
}

func GtShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Gt",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "L",
				Type: &shape.RefName{
					Name:          "Value",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
			},
			{
				Name: "R",
				Type: &shape.RefName{
					Name:          "Value",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Operator",
			},
		},
	}
}

func AndShape() shape.Shape {
	return &shape.StructLike{
		Name:          "And",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "List",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Operator",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Operator",
			},
		},
	}
}

func OrShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Or",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "List",
				Type: &shape.ListLike{
					Element: &shape.RefName{
						Name:          "Operator",
						PkgName:       "ast",
						PkgImportName: "github.com/widmogrod/mkunion/example/ast",
					},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Operator",
			},
		},
	}
}

func NotShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Not",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Operator",
				Type: &shape.RefName{
					Name:          "Operator",
					PkgName:       "ast",
					PkgImportName: "github.com/widmogrod/mkunion/example/ast",
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Operator",
			},
		},
	}
}

//shape:shape

func ValueShape() shape.Shape {
	return &shape.UnionLike{
		Name:          "Value",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Variant: []shape.Shape{
			LitShape(),
			AccessorShape(),
		},
	}
}

func LitShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Lit",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Value",
				Type: &shape.Any{},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Value",
			},
		},
	}
}

func AccessorShape() shape.Shape {
	return &shape.StructLike{
		Name:          "Accessor",
		PkgName:       "ast",
		PkgImportName: "github.com/widmogrod/mkunion/example/ast",
		Fields: []*shape.FieldLike{
			{
				Name: "Path",
				Type: &shape.ListLike{
					Element: &shape.PrimitiveLike{Kind: &shape.StringLike{}},
				},
			},
		},
		Tags: map[string]shape.Tag{
			"mkunion": {
				Value: "Value",
			},
		},
	}
}
