// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type TreeVisitor[A any] interface {
	VisitBranch(v *Branch[A]) any
	VisitLeaf(v *Leaf[A]) any
}

type Tree[A any] interface {
	AcceptTree(g TreeVisitor[A]) any
}

var (
	_ Tree[any] = (*Branch[any])(nil)
	_ Tree[any] = (*Leaf[any])(nil)
)

func (r *Branch[A]) AcceptTree(v TreeVisitor[A]) any { return v.VisitBranch(r) }
func (r *Leaf[A]) AcceptTree(v TreeVisitor[A]) any   { return v.VisitLeaf(r) }

func MatchTreeR3[A any, T0, T1, T2 any](
	x Tree[A],
	f1 func(x *Branch[A]) (T0, T1, T2),
	f2 func(x *Leaf[A]) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Branch[A]:
		return f1(v)
	case *Leaf[A]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTreeR2[A any, T0, T1 any](
	x Tree[A],
	f1 func(x *Branch[A]) (T0, T1),
	f2 func(x *Leaf[A]) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Branch[A]:
		return f1(v)
	case *Leaf[A]:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTreeR1[A any, T0 any](
	x Tree[A],
	f1 func(x *Branch[A]) T0,
	f2 func(x *Leaf[A]) T0,
) T0 {
	switch v := x.(type) {
	case *Branch[A]:
		return f1(v)
	case *Leaf[A]:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchTreeR0[A any](
	x Tree[A],
	f1 func(x *Branch[A]),
	f2 func(x *Leaf[A]),
) {
	switch v := x.(type) {
	case *Branch[A]:
		f1(v)
	case *Leaf[A]:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Branch[any]", BranchFromJSON[any], BranchToJSON[any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Leaf[any]", LeafFromJSON[any], LeafToJSON[any])
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Tree[any]", TreeFromJSON[any], TreeToJSON[any])
}

type TreeUnionJSON[A any] struct {
	Type   string          `json:"$type,omitempty"`
	Branch json.RawMessage `json:"example.Branch,omitempty"`
	Leaf   json.RawMessage `json:"example.Leaf,omitempty"`
}

func TreeFromJSON[A any](x []byte) (Tree[A], error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TreeUnionJSON[A]
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.TreeFromJSON[A]: %w", err)
	}

	switch data.Type {
	case "example.Branch":
		return BranchFromJSON[A](data.Branch)
	case "example.Leaf":
		return LeafFromJSON[A](data.Leaf)
	}

	if data.Branch != nil {
		return BranchFromJSON[A](data.Branch)
	} else if data.Leaf != nil {
		return LeafFromJSON[A](data.Leaf)
	}
	return nil, fmt.Errorf("example.TreeFromJSON[A]: unknown type: %s", data.Type)
}

func TreeToJSON[A any](x Tree[A]) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTreeR2(
		x,
		func(y *Branch[A]) ([]byte, error) {
			body, err := BranchToJSON[A](y)
			if err != nil {
				return nil, fmt.Errorf("example.TreeToJSON[A]: %w", err)
			}
			return json.Marshal(TreeUnionJSON[A]{
				Type:   "example.Branch",
				Branch: body,
			})
		},
		func(y *Leaf[A]) ([]byte, error) {
			body, err := LeafToJSON[A](y)
			if err != nil {
				return nil, fmt.Errorf("example.TreeToJSON[A]: %w", err)
			}
			return json.Marshal(TreeUnionJSON[A]{
				Type: "example.Leaf",
				Leaf: body,
			})
		},
	)
}

func BranchFromJSON[A any](x []byte) (*Branch[A], error) {
	result := new(Branch[A])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.BranchFromJSON[A]: %w", err)
	}
	return result, nil
}

func BranchToJSON[A any](x *Branch[A]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Branch[any])(nil)
	_ json.Marshaler   = (*Branch[any])(nil)
)

func (r *Branch[A]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONBranchLb_A_bL(*r)
}
func (r *Branch[A]) _marshalJSONBranchLb_A_bL(x Branch[A]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldL []byte
	fieldL, err = r._marshalJSONTreeLb_A_bL(x.L)
	if err != nil {
		return nil, fmt.Errorf("example: Branch[A]._marshalJSONBranchLb_A_bL: field name L; %w", err)
	}
	partial["L"] = fieldL
	var fieldR []byte
	fieldR, err = r._marshalJSONTreeLb_A_bL(x.R)
	if err != nil {
		return nil, fmt.Errorf("example: Branch[A]._marshalJSONBranchLb_A_bL: field name R; %w", err)
	}
	partial["R"] = fieldR
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Branch[A]._marshalJSONBranchLb_A_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Branch[A]) _marshalJSONTreeLb_A_bL(x Tree[A]) ([]byte, error) {
	result, err := shared.JSONMarshal[Tree[A]](x)
	if err != nil {
		return nil, fmt.Errorf("example: Branch[A]._marshalJSONTreeLb_A_bL:; %w", err)
	}
	return result, nil
}
func (r *Branch[A]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONBranchLb_A_bL(data)
	if err != nil {
		return fmt.Errorf("example: Branch[A].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Branch[A]) _unmarshalJSONBranchLb_A_bL(data []byte) (Branch[A], error) {
	result := Branch[A]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Branch[A]._unmarshalJSONBranchLb_A_bL: native struct unwrap; %w", err)
	}
	if fieldL, ok := partial["L"]; ok {
		result.L, err = r._unmarshalJSONTreeLb_A_bL(fieldL)
		if err != nil {
			return result, fmt.Errorf("example: Branch[A]._unmarshalJSONBranchLb_A_bL: field L; %w", err)
		}
	}
	if fieldR, ok := partial["R"]; ok {
		result.R, err = r._unmarshalJSONTreeLb_A_bL(fieldR)
		if err != nil {
			return result, fmt.Errorf("example: Branch[A]._unmarshalJSONBranchLb_A_bL: field R; %w", err)
		}
	}
	return result, nil
}
func (r *Branch[A]) _unmarshalJSONTreeLb_A_bL(data []byte) (Tree[A], error) {
	result, err := shared.JSONUnmarshal[Tree[A]](data)
	if err != nil {
		return result, fmt.Errorf("example: Branch[A]._unmarshalJSONTreeLb_A_bL: native ref unwrap; %w", err)
	}
	return result, nil
}

func LeafFromJSON[A any](x []byte) (*Leaf[A], error) {
	result := new(Leaf[A])
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.LeafFromJSON[A]: %w", err)
	}
	return result, nil
}

func LeafToJSON[A any](x *Leaf[A]) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Leaf[any])(nil)
	_ json.Marshaler   = (*Leaf[any])(nil)
)

func (r *Leaf[A]) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONLeafLb_A_bL(*r)
}
func (r *Leaf[A]) _marshalJSONLeafLb_A_bL(x Leaf[A]) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldValue []byte
	fieldValue, err = r._marshalJSONA(x.Value)
	if err != nil {
		return nil, fmt.Errorf("example: Leaf[A]._marshalJSONLeafLb_A_bL: field name Value; %w", err)
	}
	partial["Value"] = fieldValue
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Leaf[A]._marshalJSONLeafLb_A_bL: struct; %w", err)
	}
	return result, nil
}
func (r *Leaf[A]) _marshalJSONA(x A) ([]byte, error) {
	result, err := shared.JSONMarshal[A](x)
	if err != nil {
		return nil, fmt.Errorf("example: Leaf[A]._marshalJSONA:; %w", err)
	}
	return result, nil
}
func (r *Leaf[A]) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONLeafLb_A_bL(data)
	if err != nil {
		return fmt.Errorf("example: Leaf[A].UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Leaf[A]) _unmarshalJSONLeafLb_A_bL(data []byte) (Leaf[A], error) {
	result := Leaf[A]{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Leaf[A]._unmarshalJSONLeafLb_A_bL: native struct unwrap; %w", err)
	}
	if fieldValue, ok := partial["Value"]; ok {
		result.Value, err = r._unmarshalJSONA(fieldValue)
		if err != nil {
			return result, fmt.Errorf("example: Leaf[A]._unmarshalJSONLeafLb_A_bL: field Value; %w", err)
		}
	}
	return result, nil
}
func (r *Leaf[A]) _unmarshalJSONA(data []byte) (A, error) {
	result, err := shared.JSONUnmarshal[A](data)
	if err != nil {
		return result, fmt.Errorf("example: Leaf[A]._unmarshalJSONA: native ref unwrap; %w", err)
	}
	return result, nil
}
