// Code generated by mkunion. DO NOT EDIT.
package traffic

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type TrafficCommandVisitor interface {
	VisitNextCMD(v *NextCMD) any
}

type TrafficCommand interface {
	AcceptTrafficCommand(g TrafficCommandVisitor) any
}

var (
	_ TrafficCommand = (*NextCMD)(nil)
)

func (r *NextCMD) AcceptTrafficCommand(v TrafficCommandVisitor) any { return v.VisitNextCMD(r) }

func MatchTrafficCommandR3[T0, T1, T2 any](
	x TrafficCommand,
	f1 func(x *NextCMD) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *NextCMD:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTrafficCommandR2[T0, T1 any](
	x TrafficCommand,
	f1 func(x *NextCMD) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *NextCMD:
		return f1(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTrafficCommandR1[T0 any](
	x TrafficCommand,
	f1 func(x *NextCMD) T0,
) T0 {
	switch v := x.(type) {
	case *NextCMD:
		return f1(v)
	}
	var result1 T0
	return result1
}

func MatchTrafficCommandR0(
	x TrafficCommand,
	f1 func(x *NextCMD),
) {
	switch v := x.(type) {
	case *NextCMD:
		f1(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.NextCMD", NextCMDFromJSON, NextCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.TrafficCommand", TrafficCommandFromJSON, TrafficCommandToJSON)
}

type TrafficCommandUnionJSON struct {
	Type    string          `json:"$type,omitempty"`
	NextCMD json.RawMessage `json:"traffic.NextCMD,omitempty"`
}

func TrafficCommandFromJSON(x []byte) (TrafficCommand, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TrafficCommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("traffic.TrafficCommandFromJSON: %w", err)
	}

	switch data.Type {
	case "traffic.NextCMD":
		return NextCMDFromJSON(data.NextCMD)
	}

	if data.NextCMD != nil {
		return NextCMDFromJSON(data.NextCMD)
	}
	return nil, fmt.Errorf("traffic.TrafficCommandFromJSON: unknown type: %s", data.Type)
}

func TrafficCommandToJSON(x TrafficCommand) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTrafficCommandR2(
		x,
		func(y *NextCMD) ([]byte, error) {
			body, err := NextCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("traffic.TrafficCommandToJSON: %w", err)
			}
			return json.Marshal(TrafficCommandUnionJSON{
				Type:    "traffic.NextCMD",
				NextCMD: body,
			})
		},
	)
}

func NextCMDFromJSON(x []byte) (*NextCMD, error) {
	result := new(NextCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("traffic.NextCMDFromJSON: %w", err)
	}
	return result, nil
}

func NextCMDToJSON(x *NextCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*NextCMD)(nil)
	_ json.Marshaler   = (*NextCMD)(nil)
)

func (r *NextCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONNextCMD(*r)
}
func (r *NextCMD) _marshalJSONNextCMD(x NextCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("traffic: NextCMD._marshalJSONNextCMD: struct; %w", err)
	}
	return result, nil
}
func (r *NextCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONNextCMD(data)
	if err != nil {
		return fmt.Errorf("traffic: NextCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *NextCMD) _unmarshalJSONNextCMD(data []byte) (NextCMD, error) {
	result := NextCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("traffic: NextCMD._unmarshalJSONNextCMD: native struct unwrap; %w", err)
	}
	return result, nil
}

type TrafficStateVisitor interface {
	VisitRedLight(v *RedLight) any
	VisitYellowLight(v *YellowLight) any
	VisitGreenLight(v *GreenLight) any
}

type TrafficState interface {
	AcceptTrafficState(g TrafficStateVisitor) any
}

var (
	_ TrafficState = (*RedLight)(nil)
	_ TrafficState = (*YellowLight)(nil)
	_ TrafficState = (*GreenLight)(nil)
)

func (r *RedLight) AcceptTrafficState(v TrafficStateVisitor) any    { return v.VisitRedLight(r) }
func (r *YellowLight) AcceptTrafficState(v TrafficStateVisitor) any { return v.VisitYellowLight(r) }
func (r *GreenLight) AcceptTrafficState(v TrafficStateVisitor) any  { return v.VisitGreenLight(r) }

func MatchTrafficStateR3[T0, T1, T2 any](
	x TrafficState,
	f1 func(x *RedLight) (T0, T1, T2),
	f2 func(x *YellowLight) (T0, T1, T2),
	f3 func(x *GreenLight) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *RedLight:
		return f1(v)
	case *YellowLight:
		return f2(v)
	case *GreenLight:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchTrafficStateR2[T0, T1 any](
	x TrafficState,
	f1 func(x *RedLight) (T0, T1),
	f2 func(x *YellowLight) (T0, T1),
	f3 func(x *GreenLight) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *RedLight:
		return f1(v)
	case *YellowLight:
		return f2(v)
	case *GreenLight:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchTrafficStateR1[T0 any](
	x TrafficState,
	f1 func(x *RedLight) T0,
	f2 func(x *YellowLight) T0,
	f3 func(x *GreenLight) T0,
) T0 {
	switch v := x.(type) {
	case *RedLight:
		return f1(v)
	case *YellowLight:
		return f2(v)
	case *GreenLight:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchTrafficStateR0(
	x TrafficState,
	f1 func(x *RedLight),
	f2 func(x *YellowLight),
	f3 func(x *GreenLight),
) {
	switch v := x.(type) {
	case *RedLight:
		f1(v)
	case *YellowLight:
		f2(v)
	case *GreenLight:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.GreenLight", GreenLightFromJSON, GreenLightToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.RedLight", RedLightFromJSON, RedLightToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.TrafficState", TrafficStateFromJSON, TrafficStateToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/traffic.YellowLight", YellowLightFromJSON, YellowLightToJSON)
}

type TrafficStateUnionJSON struct {
	Type        string          `json:"$type,omitempty"`
	RedLight    json.RawMessage `json:"traffic.RedLight,omitempty"`
	YellowLight json.RawMessage `json:"traffic.YellowLight,omitempty"`
	GreenLight  json.RawMessage `json:"traffic.GreenLight,omitempty"`
}

func TrafficStateFromJSON(x []byte) (TrafficState, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data TrafficStateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("traffic.TrafficStateFromJSON: %w", err)
	}

	switch data.Type {
	case "traffic.RedLight":
		return RedLightFromJSON(data.RedLight)
	case "traffic.YellowLight":
		return YellowLightFromJSON(data.YellowLight)
	case "traffic.GreenLight":
		return GreenLightFromJSON(data.GreenLight)
	}

	if data.RedLight != nil {
		return RedLightFromJSON(data.RedLight)
	} else if data.YellowLight != nil {
		return YellowLightFromJSON(data.YellowLight)
	} else if data.GreenLight != nil {
		return GreenLightFromJSON(data.GreenLight)
	}
	return nil, fmt.Errorf("traffic.TrafficStateFromJSON: unknown type: %s", data.Type)
}

func TrafficStateToJSON(x TrafficState) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchTrafficStateR2(
		x,
		func(y *RedLight) ([]byte, error) {
			body, err := RedLightToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("traffic.TrafficStateToJSON: %w", err)
			}
			return json.Marshal(TrafficStateUnionJSON{
				Type:     "traffic.RedLight",
				RedLight: body,
			})
		},
		func(y *YellowLight) ([]byte, error) {
			body, err := YellowLightToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("traffic.TrafficStateToJSON: %w", err)
			}
			return json.Marshal(TrafficStateUnionJSON{
				Type:        "traffic.YellowLight",
				YellowLight: body,
			})
		},
		func(y *GreenLight) ([]byte, error) {
			body, err := GreenLightToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("traffic.TrafficStateToJSON: %w", err)
			}
			return json.Marshal(TrafficStateUnionJSON{
				Type:       "traffic.GreenLight",
				GreenLight: body,
			})
		},
	)
}

func RedLightFromJSON(x []byte) (*RedLight, error) {
	result := new(RedLight)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("traffic.RedLightFromJSON: %w", err)
	}
	return result, nil
}

func RedLightToJSON(x *RedLight) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*RedLight)(nil)
	_ json.Marshaler   = (*RedLight)(nil)
)

func (r *RedLight) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONRedLight(*r)
}
func (r *RedLight) _marshalJSONRedLight(x RedLight) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("traffic: RedLight._marshalJSONRedLight: struct; %w", err)
	}
	return result, nil
}
func (r *RedLight) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONRedLight(data)
	if err != nil {
		return fmt.Errorf("traffic: RedLight.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *RedLight) _unmarshalJSONRedLight(data []byte) (RedLight, error) {
	result := RedLight{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("traffic: RedLight._unmarshalJSONRedLight: native struct unwrap; %w", err)
	}
	return result, nil
}

func YellowLightFromJSON(x []byte) (*YellowLight, error) {
	result := new(YellowLight)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("traffic.YellowLightFromJSON: %w", err)
	}
	return result, nil
}

func YellowLightToJSON(x *YellowLight) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*YellowLight)(nil)
	_ json.Marshaler   = (*YellowLight)(nil)
)

func (r *YellowLight) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONYellowLight(*r)
}
func (r *YellowLight) _marshalJSONYellowLight(x YellowLight) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("traffic: YellowLight._marshalJSONYellowLight: struct; %w", err)
	}
	return result, nil
}
func (r *YellowLight) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONYellowLight(data)
	if err != nil {
		return fmt.Errorf("traffic: YellowLight.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *YellowLight) _unmarshalJSONYellowLight(data []byte) (YellowLight, error) {
	result := YellowLight{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("traffic: YellowLight._unmarshalJSONYellowLight: native struct unwrap; %w", err)
	}
	return result, nil
}

func GreenLightFromJSON(x []byte) (*GreenLight, error) {
	result := new(GreenLight)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("traffic.GreenLightFromJSON: %w", err)
	}
	return result, nil
}

func GreenLightToJSON(x *GreenLight) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GreenLight)(nil)
	_ json.Marshaler   = (*GreenLight)(nil)
)

func (r *GreenLight) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGreenLight(*r)
}
func (r *GreenLight) _marshalJSONGreenLight(x GreenLight) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("traffic: GreenLight._marshalJSONGreenLight: struct; %w", err)
	}
	return result, nil
}
func (r *GreenLight) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGreenLight(data)
	if err != nil {
		return fmt.Errorf("traffic: GreenLight.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GreenLight) _unmarshalJSONGreenLight(data []byte) (GreenLight, error) {
	result := GreenLight{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("traffic: GreenLight._unmarshalJSONGreenLight: native struct unwrap; %w", err)
	}
	return result, nil
}
