// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type CommandVisitor interface {
	VisitStartCommand(v *StartCommand) any
	VisitCompleteCommand(v *CompleteCommand) any
}

type Command interface {
	AcceptCommand(g CommandVisitor) any
}

var (
	_ Command = (*StartCommand)(nil)
	_ Command = (*CompleteCommand)(nil)
)

func (r *StartCommand) AcceptCommand(v CommandVisitor) any    { return v.VisitStartCommand(r) }
func (r *CompleteCommand) AcceptCommand(v CommandVisitor) any { return v.VisitCompleteCommand(r) }

func MatchCommandR3[T0, T1, T2 any](
	x Command,
	f1 func(x *StartCommand) (T0, T1, T2),
	f2 func(x *CompleteCommand) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *StartCommand:
		return f1(v)
	case *CompleteCommand:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchCommandR2[T0, T1 any](
	x Command,
	f1 func(x *StartCommand) (T0, T1),
	f2 func(x *CompleteCommand) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *StartCommand:
		return f1(v)
	case *CompleteCommand:
		return f2(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchCommandR1[T0 any](
	x Command,
	f1 func(x *StartCommand) T0,
	f2 func(x *CompleteCommand) T0,
) T0 {
	switch v := x.(type) {
	case *StartCommand:
		return f1(v)
	case *CompleteCommand:
		return f2(v)
	}
	var result1 T0
	return result1
}

func MatchCommandR0(
	x Command,
	f1 func(x *StartCommand),
	f2 func(x *CompleteCommand),
) {
	switch v := x.(type) {
	case *StartCommand:
		f1(v)
	case *CompleteCommand:
		f2(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Command", CommandFromJSON, CommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.CompleteCommand", CompleteCommandFromJSON, CompleteCommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.StartCommand", StartCommandFromJSON, StartCommandToJSON)
}

type CommandUnionJSON struct {
	Type            string          `json:"$type,omitempty"`
	StartCommand    json.RawMessage `json:"example.StartCommand,omitempty"`
	CompleteCommand json.RawMessage `json:"example.CompleteCommand,omitempty"`
}

func CommandFromJSON(x []byte) (Command, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data CommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.CommandFromJSON: %w", err)
	}

	switch data.Type {
	case "example.StartCommand":
		return StartCommandFromJSON(data.StartCommand)
	case "example.CompleteCommand":
		return CompleteCommandFromJSON(data.CompleteCommand)
	}

	if data.StartCommand != nil {
		return StartCommandFromJSON(data.StartCommand)
	} else if data.CompleteCommand != nil {
		return CompleteCommandFromJSON(data.CompleteCommand)
	}
	return nil, fmt.Errorf("example.CommandFromJSON: unknown type: %s", data.Type)
}

func CommandToJSON(x Command) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchCommandR2(
		x,
		func(y *StartCommand) ([]byte, error) {
			body, err := StartCommandToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:         "example.StartCommand",
				StartCommand: body,
			})
		},
		func(y *CompleteCommand) ([]byte, error) {
			body, err := CompleteCommandToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:            "example.CompleteCommand",
				CompleteCommand: body,
			})
		},
	)
}

func StartCommandFromJSON(x []byte) (*StartCommand, error) {
	result := new(StartCommand)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.StartCommandFromJSON: %w", err)
	}
	return result, nil
}

func StartCommandToJSON(x *StartCommand) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*StartCommand)(nil)
	_ json.Marshaler   = (*StartCommand)(nil)
)

func (r *StartCommand) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONStartCommand(*r)
}
func (r *StartCommand) _marshalJSONStartCommand(x StartCommand) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("example: StartCommand._marshalJSONStartCommand: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: StartCommand._marshalJSONStartCommand: struct; %w", err)
	}
	return result, nil
}
func (r *StartCommand) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: StartCommand._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *StartCommand) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONStartCommand(data)
	if err != nil {
		return fmt.Errorf("example: StartCommand.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *StartCommand) _unmarshalJSONStartCommand(data []byte) (StartCommand, error) {
	result := StartCommand{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: StartCommand._unmarshalJSONStartCommand: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("example: StartCommand._unmarshalJSONStartCommand: field ID; %w", err)
		}
	}
	return result, nil
}
func (r *StartCommand) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: StartCommand._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func CompleteCommandFromJSON(x []byte) (*CompleteCommand, error) {
	result := new(CompleteCommand)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.CompleteCommandFromJSON: %w", err)
	}
	return result, nil
}

func CompleteCommandToJSON(x *CompleteCommand) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CompleteCommand)(nil)
	_ json.Marshaler   = (*CompleteCommand)(nil)
)

func (r *CompleteCommand) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCompleteCommand(*r)
}
func (r *CompleteCommand) _marshalJSONCompleteCommand(x CompleteCommand) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldResult []byte
	fieldResult, err = r._marshalJSONstring(x.Result)
	if err != nil {
		return nil, fmt.Errorf("example: CompleteCommand._marshalJSONCompleteCommand: field name Result; %w", err)
	}
	partial["Result"] = fieldResult
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: CompleteCommand._marshalJSONCompleteCommand: struct; %w", err)
	}
	return result, nil
}
func (r *CompleteCommand) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: CompleteCommand._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *CompleteCommand) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCompleteCommand(data)
	if err != nil {
		return fmt.Errorf("example: CompleteCommand.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CompleteCommand) _unmarshalJSONCompleteCommand(data []byte) (CompleteCommand, error) {
	result := CompleteCommand{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: CompleteCommand._unmarshalJSONCompleteCommand: native struct unwrap; %w", err)
	}
	if fieldResult, ok := partial["Result"]; ok {
		result.Result, err = r._unmarshalJSONstring(fieldResult)
		if err != nil {
			return result, fmt.Errorf("example: CompleteCommand._unmarshalJSONCompleteCommand: field Result; %w", err)
		}
	}
	return result, nil
}
func (r *CompleteCommand) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: CompleteCommand._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

type StateVisitor interface {
	VisitInitial(v *Initial) any
	VisitProcessing(v *Processing) any
	VisitComplete(v *Complete) any
}

type State interface {
	AcceptState(g StateVisitor) any
}

var (
	_ State = (*Initial)(nil)
	_ State = (*Processing)(nil)
	_ State = (*Complete)(nil)
)

func (r *Initial) AcceptState(v StateVisitor) any    { return v.VisitInitial(r) }
func (r *Processing) AcceptState(v StateVisitor) any { return v.VisitProcessing(r) }
func (r *Complete) AcceptState(v StateVisitor) any   { return v.VisitComplete(r) }

func MatchStateR3[T0, T1, T2 any](
	x State,
	f1 func(x *Initial) (T0, T1, T2),
	f2 func(x *Processing) (T0, T1, T2),
	f3 func(x *Complete) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Initial:
		return f1(v)
	case *Processing:
		return f2(v)
	case *Complete:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchStateR2[T0, T1 any](
	x State,
	f1 func(x *Initial) (T0, T1),
	f2 func(x *Processing) (T0, T1),
	f3 func(x *Complete) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Initial:
		return f1(v)
	case *Processing:
		return f2(v)
	case *Complete:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchStateR1[T0 any](
	x State,
	f1 func(x *Initial) T0,
	f2 func(x *Processing) T0,
	f3 func(x *Complete) T0,
) T0 {
	switch v := x.(type) {
	case *Initial:
		return f1(v)
	case *Processing:
		return f2(v)
	case *Complete:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchStateR0(
	x State,
	f1 func(x *Initial),
	f2 func(x *Processing),
	f3 func(x *Complete),
) {
	switch v := x.(type) {
	case *Initial:
		f1(v)
	case *Processing:
		f2(v)
	case *Complete:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Complete", CompleteFromJSON, CompleteToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Initial", InitialFromJSON, InitialToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Processing", ProcessingFromJSON, ProcessingToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.State", StateFromJSON, StateToJSON)
}

type StateUnionJSON struct {
	Type       string          `json:"$type,omitempty"`
	Initial    json.RawMessage `json:"example.Initial,omitempty"`
	Processing json.RawMessage `json:"example.Processing,omitempty"`
	Complete   json.RawMessage `json:"example.Complete,omitempty"`
}

func StateFromJSON(x []byte) (State, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data StateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.StateFromJSON: %w", err)
	}

	switch data.Type {
	case "example.Initial":
		return InitialFromJSON(data.Initial)
	case "example.Processing":
		return ProcessingFromJSON(data.Processing)
	case "example.Complete":
		return CompleteFromJSON(data.Complete)
	}

	if data.Initial != nil {
		return InitialFromJSON(data.Initial)
	} else if data.Processing != nil {
		return ProcessingFromJSON(data.Processing)
	} else if data.Complete != nil {
		return CompleteFromJSON(data.Complete)
	}
	return nil, fmt.Errorf("example.StateFromJSON: unknown type: %s", data.Type)
}

func StateToJSON(x State) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchStateR2(
		x,
		func(y *Initial) ([]byte, error) {
			body, err := InitialToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:    "example.Initial",
				Initial: body,
			})
		},
		func(y *Processing) ([]byte, error) {
			body, err := ProcessingToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:       "example.Processing",
				Processing: body,
			})
		},
		func(y *Complete) ([]byte, error) {
			body, err := CompleteToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:     "example.Complete",
				Complete: body,
			})
		},
	)
}

func InitialFromJSON(x []byte) (*Initial, error) {
	result := new(Initial)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.InitialFromJSON: %w", err)
	}
	return result, nil
}

func InitialToJSON(x *Initial) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Initial)(nil)
	_ json.Marshaler   = (*Initial)(nil)
)

func (r *Initial) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONInitial(*r)
}
func (r *Initial) _marshalJSONInitial(x Initial) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Initial._marshalJSONInitial: struct; %w", err)
	}
	return result, nil
}
func (r *Initial) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONInitial(data)
	if err != nil {
		return fmt.Errorf("example: Initial.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Initial) _unmarshalJSONInitial(data []byte) (Initial, error) {
	result := Initial{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Initial._unmarshalJSONInitial: native struct unwrap; %w", err)
	}
	return result, nil
}

func ProcessingFromJSON(x []byte) (*Processing, error) {
	result := new(Processing)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.ProcessingFromJSON: %w", err)
	}
	return result, nil
}

func ProcessingToJSON(x *Processing) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Processing)(nil)
	_ json.Marshaler   = (*Processing)(nil)
)

func (r *Processing) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONProcessing(*r)
}
func (r *Processing) _marshalJSONProcessing(x Processing) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldID []byte
	fieldID, err = r._marshalJSONstring(x.ID)
	if err != nil {
		return nil, fmt.Errorf("example: Processing._marshalJSONProcessing: field name ID; %w", err)
	}
	partial["ID"] = fieldID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Processing._marshalJSONProcessing: struct; %w", err)
	}
	return result, nil
}
func (r *Processing) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Processing._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Processing) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONProcessing(data)
	if err != nil {
		return fmt.Errorf("example: Processing.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Processing) _unmarshalJSONProcessing(data []byte) (Processing, error) {
	result := Processing{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Processing._unmarshalJSONProcessing: native struct unwrap; %w", err)
	}
	if fieldID, ok := partial["ID"]; ok {
		result.ID, err = r._unmarshalJSONstring(fieldID)
		if err != nil {
			return result, fmt.Errorf("example: Processing._unmarshalJSONProcessing: field ID; %w", err)
		}
	}
	return result, nil
}
func (r *Processing) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Processing._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}

func CompleteFromJSON(x []byte) (*Complete, error) {
	result := new(Complete)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.CompleteFromJSON: %w", err)
	}
	return result, nil
}

func CompleteToJSON(x *Complete) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Complete)(nil)
	_ json.Marshaler   = (*Complete)(nil)
)

func (r *Complete) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONComplete(*r)
}
func (r *Complete) _marshalJSONComplete(x Complete) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldResult []byte
	fieldResult, err = r._marshalJSONstring(x.Result)
	if err != nil {
		return nil, fmt.Errorf("example: Complete._marshalJSONComplete: field name Result; %w", err)
	}
	partial["Result"] = fieldResult
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Complete._marshalJSONComplete: struct; %w", err)
	}
	return result, nil
}
func (r *Complete) _marshalJSONstring(x string) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Complete._marshalJSONstring:; %w", err)
	}
	return result, nil
}
func (r *Complete) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONComplete(data)
	if err != nil {
		return fmt.Errorf("example: Complete.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Complete) _unmarshalJSONComplete(data []byte) (Complete, error) {
	result := Complete{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Complete._unmarshalJSONComplete: native struct unwrap; %w", err)
	}
	if fieldResult, ok := partial["Result"]; ok {
		result.Result, err = r._unmarshalJSONstring(fieldResult)
		if err != nil {
			return result, fmt.Errorf("example: Complete._unmarshalJSONComplete: field Result; %w", err)
		}
	}
	return result, nil
}
func (r *Complete) _unmarshalJSONstring(data []byte) (string, error) {
	var result string
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Complete._unmarshalJSONstring: native primitive unwrap; %w", err)
	}
	return result, nil
}
