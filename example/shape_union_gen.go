// Code generated by mkunion. DO NOT EDIT.
package example

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type ShapeVisitor interface {
	VisitCircle(v *Circle) any
	VisitRectangle(v *Rectangle) any
	VisitSquare(v *Square) any
}

type Shape interface {
	AcceptShape(g ShapeVisitor) any
}

var (
	_ Shape = (*Circle)(nil)
	_ Shape = (*Rectangle)(nil)
	_ Shape = (*Square)(nil)
)

func (r *Circle) AcceptShape(v ShapeVisitor) any    { return v.VisitCircle(r) }
func (r *Rectangle) AcceptShape(v ShapeVisitor) any { return v.VisitRectangle(r) }
func (r *Square) AcceptShape(v ShapeVisitor) any    { return v.VisitSquare(r) }

func MatchShapeR3[T0, T1, T2 any](
	x Shape,
	f1 func(x *Circle) (T0, T1, T2),
	f2 func(x *Rectangle) (T0, T1, T2),
	f3 func(x *Square) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *Circle:
		return f1(v)
	case *Rectangle:
		return f2(v)
	case *Square:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchShapeR2[T0, T1 any](
	x Shape,
	f1 func(x *Circle) (T0, T1),
	f2 func(x *Rectangle) (T0, T1),
	f3 func(x *Square) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *Circle:
		return f1(v)
	case *Rectangle:
		return f2(v)
	case *Square:
		return f3(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchShapeR1[T0 any](
	x Shape,
	f1 func(x *Circle) T0,
	f2 func(x *Rectangle) T0,
	f3 func(x *Square) T0,
) T0 {
	switch v := x.(type) {
	case *Circle:
		return f1(v)
	case *Rectangle:
		return f2(v)
	case *Square:
		return f3(v)
	}
	var result1 T0
	return result1
}

func MatchShapeR0(
	x Shape,
	f1 func(x *Circle),
	f2 func(x *Rectangle),
	f3 func(x *Square),
) {
	switch v := x.(type) {
	case *Circle:
		f1(v)
	case *Rectangle:
		f2(v)
	case *Square:
		f3(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Circle", CircleFromJSON, CircleToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Rectangle", RectangleFromJSON, RectangleToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Shape", ShapeFromJSON, ShapeToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example.Square", SquareFromJSON, SquareToJSON)
}

type ShapeUnionJSON struct {
	Type      string          `json:"$type,omitempty"`
	Circle    json.RawMessage `json:"example.Circle,omitempty"`
	Rectangle json.RawMessage `json:"example.Rectangle,omitempty"`
	Square    json.RawMessage `json:"example.Square,omitempty"`
}

func ShapeFromJSON(x []byte) (Shape, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data ShapeUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("example.ShapeFromJSON: %w", err)
	}

	switch data.Type {
	case "example.Circle":
		return CircleFromJSON(data.Circle)
	case "example.Rectangle":
		return RectangleFromJSON(data.Rectangle)
	case "example.Square":
		return SquareFromJSON(data.Square)
	}

	if data.Circle != nil {
		return CircleFromJSON(data.Circle)
	} else if data.Rectangle != nil {
		return RectangleFromJSON(data.Rectangle)
	} else if data.Square != nil {
		return SquareFromJSON(data.Square)
	}
	return nil, fmt.Errorf("example.ShapeFromJSON: unknown type: %s", data.Type)
}

func ShapeToJSON(x Shape) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchShapeR2(
		x,
		func(y *Circle) ([]byte, error) {
			body, err := CircleToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.ShapeToJSON: %w", err)
			}
			return json.Marshal(ShapeUnionJSON{
				Type:   "example.Circle",
				Circle: body,
			})
		},
		func(y *Rectangle) ([]byte, error) {
			body, err := RectangleToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.ShapeToJSON: %w", err)
			}
			return json.Marshal(ShapeUnionJSON{
				Type:      "example.Rectangle",
				Rectangle: body,
			})
		},
		func(y *Square) ([]byte, error) {
			body, err := SquareToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("example.ShapeToJSON: %w", err)
			}
			return json.Marshal(ShapeUnionJSON{
				Type:   "example.Square",
				Square: body,
			})
		},
	)
}

func CircleFromJSON(x []byte) (*Circle, error) {
	result := new(Circle)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.CircleFromJSON: %w", err)
	}
	return result, nil
}

func CircleToJSON(x *Circle) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Circle)(nil)
	_ json.Marshaler   = (*Circle)(nil)
)

func (r *Circle) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCircle(*r)
}
func (r *Circle) _marshalJSONCircle(x Circle) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldRadius []byte
	fieldRadius, err = r._marshalJSONfloat64(x.Radius)
	if err != nil {
		return nil, fmt.Errorf("example: Circle._marshalJSONCircle: field name Radius; %w", err)
	}
	partial["Radius"] = fieldRadius
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Circle._marshalJSONCircle: struct; %w", err)
	}
	return result, nil
}
func (r *Circle) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Circle._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *Circle) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCircle(data)
	if err != nil {
		return fmt.Errorf("example: Circle.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Circle) _unmarshalJSONCircle(data []byte) (Circle, error) {
	result := Circle{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Circle._unmarshalJSONCircle: native struct unwrap; %w", err)
	}
	if fieldRadius, ok := partial["Radius"]; ok {
		result.Radius, err = r._unmarshalJSONfloat64(fieldRadius)
		if err != nil {
			return result, fmt.Errorf("example: Circle._unmarshalJSONCircle: field Radius; %w", err)
		}
	}
	return result, nil
}
func (r *Circle) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Circle._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func RectangleFromJSON(x []byte) (*Rectangle, error) {
	result := new(Rectangle)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.RectangleFromJSON: %w", err)
	}
	return result, nil
}

func RectangleToJSON(x *Rectangle) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Rectangle)(nil)
	_ json.Marshaler   = (*Rectangle)(nil)
)

func (r *Rectangle) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONRectangle(*r)
}
func (r *Rectangle) _marshalJSONRectangle(x Rectangle) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldWidth []byte
	fieldWidth, err = r._marshalJSONfloat64(x.Width)
	if err != nil {
		return nil, fmt.Errorf("example: Rectangle._marshalJSONRectangle: field name Width; %w", err)
	}
	partial["Width"] = fieldWidth
	var fieldHeight []byte
	fieldHeight, err = r._marshalJSONfloat64(x.Height)
	if err != nil {
		return nil, fmt.Errorf("example: Rectangle._marshalJSONRectangle: field name Height; %w", err)
	}
	partial["Height"] = fieldHeight
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Rectangle._marshalJSONRectangle: struct; %w", err)
	}
	return result, nil
}
func (r *Rectangle) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Rectangle._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *Rectangle) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONRectangle(data)
	if err != nil {
		return fmt.Errorf("example: Rectangle.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Rectangle) _unmarshalJSONRectangle(data []byte) (Rectangle, error) {
	result := Rectangle{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Rectangle._unmarshalJSONRectangle: native struct unwrap; %w", err)
	}
	if fieldWidth, ok := partial["Width"]; ok {
		result.Width, err = r._unmarshalJSONfloat64(fieldWidth)
		if err != nil {
			return result, fmt.Errorf("example: Rectangle._unmarshalJSONRectangle: field Width; %w", err)
		}
	}
	if fieldHeight, ok := partial["Height"]; ok {
		result.Height, err = r._unmarshalJSONfloat64(fieldHeight)
		if err != nil {
			return result, fmt.Errorf("example: Rectangle._unmarshalJSONRectangle: field Height; %w", err)
		}
	}
	return result, nil
}
func (r *Rectangle) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Rectangle._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}

func SquareFromJSON(x []byte) (*Square, error) {
	result := new(Square)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("example.SquareFromJSON: %w", err)
	}
	return result, nil
}

func SquareToJSON(x *Square) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*Square)(nil)
	_ json.Marshaler   = (*Square)(nil)
)

func (r *Square) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONSquare(*r)
}
func (r *Square) _marshalJSONSquare(x Square) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldSide []byte
	fieldSide, err = r._marshalJSONfloat64(x.Side)
	if err != nil {
		return nil, fmt.Errorf("example: Square._marshalJSONSquare: field name Side; %w", err)
	}
	partial["Side"] = fieldSide
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("example: Square._marshalJSONSquare: struct; %w", err)
	}
	return result, nil
}
func (r *Square) _marshalJSONfloat64(x float64) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("example: Square._marshalJSONfloat64:; %w", err)
	}
	return result, nil
}
func (r *Square) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONSquare(data)
	if err != nil {
		return fmt.Errorf("example: Square.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *Square) _unmarshalJSONSquare(data []byte) (Square, error) {
	result := Square{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("example: Square._unmarshalJSONSquare: native struct unwrap; %w", err)
	}
	if fieldSide, ok := partial["Side"]; ok {
		result.Side, err = r._unmarshalJSONfloat64(fieldSide)
		if err != nil {
			return result, fmt.Errorf("example: Square._unmarshalJSONSquare: field Side; %w", err)
		}
	}
	return result, nil
}
func (r *Square) _unmarshalJSONfloat64(data []byte) (float64, error) {
	var result float64
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("example: Square._unmarshalJSONfloat64: native primitive unwrap; %w", err)
	}
	return result, nil
}
