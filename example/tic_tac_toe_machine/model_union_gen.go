// Code generated by mkunion. DO NOT EDIT.
package tictacstatemachine

import (
	"encoding/json"
	"fmt"
	"github.com/widmogrod/mkunion/x/shared"
)

type CommandVisitor interface {
	VisitCreateGameCMD(v *CreateGameCMD) any
	VisitJoinGameCMD(v *JoinGameCMD) any
	VisitStartGameCMD(v *StartGameCMD) any
	VisitMoveCMD(v *MoveCMD) any
	VisitGiveUpCMD(v *GiveUpCMD) any
}

type Command interface {
	AcceptCommand(g CommandVisitor) any
}

var (
	_ Command = (*CreateGameCMD)(nil)
	_ Command = (*JoinGameCMD)(nil)
	_ Command = (*StartGameCMD)(nil)
	_ Command = (*MoveCMD)(nil)
	_ Command = (*GiveUpCMD)(nil)
)

func (r *CreateGameCMD) AcceptCommand(v CommandVisitor) any { return v.VisitCreateGameCMD(r) }
func (r *JoinGameCMD) AcceptCommand(v CommandVisitor) any   { return v.VisitJoinGameCMD(r) }
func (r *StartGameCMD) AcceptCommand(v CommandVisitor) any  { return v.VisitStartGameCMD(r) }
func (r *MoveCMD) AcceptCommand(v CommandVisitor) any       { return v.VisitMoveCMD(r) }
func (r *GiveUpCMD) AcceptCommand(v CommandVisitor) any     { return v.VisitGiveUpCMD(r) }

func MatchCommandR3[T0, T1, T2 any](
	x Command,
	f1 func(x *CreateGameCMD) (T0, T1, T2),
	f2 func(x *JoinGameCMD) (T0, T1, T2),
	f3 func(x *StartGameCMD) (T0, T1, T2),
	f4 func(x *MoveCMD) (T0, T1, T2),
	f5 func(x *GiveUpCMD) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *CreateGameCMD:
		return f1(v)
	case *JoinGameCMD:
		return f2(v)
	case *StartGameCMD:
		return f3(v)
	case *MoveCMD:
		return f4(v)
	case *GiveUpCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchCommandR2[T0, T1 any](
	x Command,
	f1 func(x *CreateGameCMD) (T0, T1),
	f2 func(x *JoinGameCMD) (T0, T1),
	f3 func(x *StartGameCMD) (T0, T1),
	f4 func(x *MoveCMD) (T0, T1),
	f5 func(x *GiveUpCMD) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *CreateGameCMD:
		return f1(v)
	case *JoinGameCMD:
		return f2(v)
	case *StartGameCMD:
		return f3(v)
	case *MoveCMD:
		return f4(v)
	case *GiveUpCMD:
		return f5(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchCommandR1[T0 any](
	x Command,
	f1 func(x *CreateGameCMD) T0,
	f2 func(x *JoinGameCMD) T0,
	f3 func(x *StartGameCMD) T0,
	f4 func(x *MoveCMD) T0,
	f5 func(x *GiveUpCMD) T0,
) T0 {
	switch v := x.(type) {
	case *CreateGameCMD:
		return f1(v)
	case *JoinGameCMD:
		return f2(v)
	case *StartGameCMD:
		return f3(v)
	case *MoveCMD:
		return f4(v)
	case *GiveUpCMD:
		return f5(v)
	}
	var result1 T0
	return result1
}

func MatchCommandR0(
	x Command,
	f1 func(x *CreateGameCMD),
	f2 func(x *JoinGameCMD),
	f3 func(x *StartGameCMD),
	f4 func(x *MoveCMD),
	f5 func(x *GiveUpCMD),
) {
	switch v := x.(type) {
	case *CreateGameCMD:
		f1(v)
	case *JoinGameCMD:
		f2(v)
	case *StartGameCMD:
		f3(v)
	case *MoveCMD:
		f4(v)
	case *GiveUpCMD:
		f5(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.Command", CommandFromJSON, CommandToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.CreateGameCMD", CreateGameCMDFromJSON, CreateGameCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.GiveUpCMD", GiveUpCMDFromJSON, GiveUpCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.JoinGameCMD", JoinGameCMDFromJSON, JoinGameCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.MoveCMD", MoveCMDFromJSON, MoveCMDToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.StartGameCMD", StartGameCMDFromJSON, StartGameCMDToJSON)
}

type CommandUnionJSON struct {
	Type          string          `json:"$type,omitempty"`
	CreateGameCMD json.RawMessage `json:"tictacstatemachine.CreateGameCMD,omitempty"`
	JoinGameCMD   json.RawMessage `json:"tictacstatemachine.JoinGameCMD,omitempty"`
	StartGameCMD  json.RawMessage `json:"tictacstatemachine.StartGameCMD,omitempty"`
	MoveCMD       json.RawMessage `json:"tictacstatemachine.MoveCMD,omitempty"`
	GiveUpCMD     json.RawMessage `json:"tictacstatemachine.GiveUpCMD,omitempty"`
}

func CommandFromJSON(x []byte) (Command, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data CommandUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.CommandFromJSON: %w", err)
	}

	switch data.Type {
	case "tictacstatemachine.CreateGameCMD":
		return CreateGameCMDFromJSON(data.CreateGameCMD)
	case "tictacstatemachine.JoinGameCMD":
		return JoinGameCMDFromJSON(data.JoinGameCMD)
	case "tictacstatemachine.StartGameCMD":
		return StartGameCMDFromJSON(data.StartGameCMD)
	case "tictacstatemachine.MoveCMD":
		return MoveCMDFromJSON(data.MoveCMD)
	case "tictacstatemachine.GiveUpCMD":
		return GiveUpCMDFromJSON(data.GiveUpCMD)
	}

	if data.CreateGameCMD != nil {
		return CreateGameCMDFromJSON(data.CreateGameCMD)
	} else if data.JoinGameCMD != nil {
		return JoinGameCMDFromJSON(data.JoinGameCMD)
	} else if data.StartGameCMD != nil {
		return StartGameCMDFromJSON(data.StartGameCMD)
	} else if data.MoveCMD != nil {
		return MoveCMDFromJSON(data.MoveCMD)
	} else if data.GiveUpCMD != nil {
		return GiveUpCMDFromJSON(data.GiveUpCMD)
	}
	return nil, fmt.Errorf("tictacstatemachine.CommandFromJSON: unknown type: %s", data.Type)
}

func CommandToJSON(x Command) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchCommandR2(
		x,
		func(y *CreateGameCMD) ([]byte, error) {
			body, err := CreateGameCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:          "tictacstatemachine.CreateGameCMD",
				CreateGameCMD: body,
			})
		},
		func(y *JoinGameCMD) ([]byte, error) {
			body, err := JoinGameCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:        "tictacstatemachine.JoinGameCMD",
				JoinGameCMD: body,
			})
		},
		func(y *StartGameCMD) ([]byte, error) {
			body, err := StartGameCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:         "tictacstatemachine.StartGameCMD",
				StartGameCMD: body,
			})
		},
		func(y *MoveCMD) ([]byte, error) {
			body, err := MoveCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:    "tictacstatemachine.MoveCMD",
				MoveCMD: body,
			})
		},
		func(y *GiveUpCMD) ([]byte, error) {
			body, err := GiveUpCMDToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.CommandToJSON: %w", err)
			}
			return json.Marshal(CommandUnionJSON{
				Type:      "tictacstatemachine.GiveUpCMD",
				GiveUpCMD: body,
			})
		},
	)
}

func CreateGameCMDFromJSON(x []byte) (*CreateGameCMD, error) {
	result := new(CreateGameCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.CreateGameCMDFromJSON: %w", err)
	}
	return result, nil
}

func CreateGameCMDToJSON(x *CreateGameCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*CreateGameCMD)(nil)
	_ json.Marshaler   = (*CreateGameCMD)(nil)
)

func (r *CreateGameCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONCreateGameCMD(*r)
}
func (r *CreateGameCMD) _marshalJSONCreateGameCMD(x CreateGameCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldFirstPlayerID []byte
	fieldFirstPlayerID, err = r._marshalJSONPlayerID(x.FirstPlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONCreateGameCMD: field name FirstPlayerID; %w", err)
	}
	partial["FirstPlayerID"] = fieldFirstPlayerID
	var fieldBoardRows []byte
	fieldBoardRows, err = r._marshalJSONint(x.BoardRows)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONCreateGameCMD: field name BoardRows; %w", err)
	}
	partial["BoardRows"] = fieldBoardRows
	var fieldBoardCols []byte
	fieldBoardCols, err = r._marshalJSONint(x.BoardCols)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONCreateGameCMD: field name BoardCols; %w", err)
	}
	partial["BoardCols"] = fieldBoardCols
	var fieldWinningLength []byte
	fieldWinningLength, err = r._marshalJSONint(x.WinningLength)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONCreateGameCMD: field name WinningLength; %w", err)
	}
	partial["WinningLength"] = fieldWinningLength
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONCreateGameCMD: struct; %w", err)
	}
	return result, nil
}
func (r *CreateGameCMD) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *CreateGameCMD) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: CreateGameCMD._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *CreateGameCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONCreateGameCMD(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: CreateGameCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *CreateGameCMD) _unmarshalJSONCreateGameCMD(data []byte) (CreateGameCMD, error) {
	result := CreateGameCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONCreateGameCMD: native struct unwrap; %w", err)
	}
	if fieldFirstPlayerID, ok := partial["FirstPlayerID"]; ok {
		result.FirstPlayerID, err = r._unmarshalJSONPlayerID(fieldFirstPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONCreateGameCMD: field FirstPlayerID; %w", err)
		}
	}
	if fieldBoardRows, ok := partial["BoardRows"]; ok {
		result.BoardRows, err = r._unmarshalJSONint(fieldBoardRows)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONCreateGameCMD: field BoardRows; %w", err)
		}
	}
	if fieldBoardCols, ok := partial["BoardCols"]; ok {
		result.BoardCols, err = r._unmarshalJSONint(fieldBoardCols)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONCreateGameCMD: field BoardCols; %w", err)
		}
	}
	if fieldWinningLength, ok := partial["WinningLength"]; ok {
		result.WinningLength, err = r._unmarshalJSONint(fieldWinningLength)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONCreateGameCMD: field WinningLength; %w", err)
		}
	}
	return result, nil
}
func (r *CreateGameCMD) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *CreateGameCMD) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: CreateGameCMD._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}

func JoinGameCMDFromJSON(x []byte) (*JoinGameCMD, error) {
	result := new(JoinGameCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.JoinGameCMDFromJSON: %w", err)
	}
	return result, nil
}

func JoinGameCMDToJSON(x *JoinGameCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*JoinGameCMD)(nil)
	_ json.Marshaler   = (*JoinGameCMD)(nil)
)

func (r *JoinGameCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONJoinGameCMD(*r)
}
func (r *JoinGameCMD) _marshalJSONJoinGameCMD(x JoinGameCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldSecondPlayerID []byte
	fieldSecondPlayerID, err = r._marshalJSONPlayerID(x.SecondPlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: JoinGameCMD._marshalJSONJoinGameCMD: field name SecondPlayerID; %w", err)
	}
	partial["SecondPlayerID"] = fieldSecondPlayerID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: JoinGameCMD._marshalJSONJoinGameCMD: struct; %w", err)
	}
	return result, nil
}
func (r *JoinGameCMD) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: JoinGameCMD._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *JoinGameCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONJoinGameCMD(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: JoinGameCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *JoinGameCMD) _unmarshalJSONJoinGameCMD(data []byte) (JoinGameCMD, error) {
	result := JoinGameCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: JoinGameCMD._unmarshalJSONJoinGameCMD: native struct unwrap; %w", err)
	}
	if fieldSecondPlayerID, ok := partial["SecondPlayerID"]; ok {
		result.SecondPlayerID, err = r._unmarshalJSONPlayerID(fieldSecondPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: JoinGameCMD._unmarshalJSONJoinGameCMD: field SecondPlayerID; %w", err)
		}
	}
	return result, nil
}
func (r *JoinGameCMD) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: JoinGameCMD._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}

func StartGameCMDFromJSON(x []byte) (*StartGameCMD, error) {
	result := new(StartGameCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.StartGameCMDFromJSON: %w", err)
	}
	return result, nil
}

func StartGameCMDToJSON(x *StartGameCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*StartGameCMD)(nil)
	_ json.Marshaler   = (*StartGameCMD)(nil)
)

func (r *StartGameCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONStartGameCMD(*r)
}
func (r *StartGameCMD) _marshalJSONStartGameCMD(x StartGameCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldFirstPlayerID []byte
	fieldFirstPlayerID, err = r._marshalJSONPlayerID(x.FirstPlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: field name FirstPlayerID; %w", err)
	}
	partial["FirstPlayerID"] = fieldFirstPlayerID
	var fieldSecondPlayerID []byte
	fieldSecondPlayerID, err = r._marshalJSONPlayerID(x.SecondPlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: field name SecondPlayerID; %w", err)
	}
	partial["SecondPlayerID"] = fieldSecondPlayerID
	var fieldBoardRows []byte
	fieldBoardRows, err = r._marshalJSONint(x.BoardRows)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: field name BoardRows; %w", err)
	}
	partial["BoardRows"] = fieldBoardRows
	var fieldBoardCols []byte
	fieldBoardCols, err = r._marshalJSONint(x.BoardCols)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: field name BoardCols; %w", err)
	}
	partial["BoardCols"] = fieldBoardCols
	var fieldWinningLength []byte
	fieldWinningLength, err = r._marshalJSONint(x.WinningLength)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: field name WinningLength; %w", err)
	}
	partial["WinningLength"] = fieldWinningLength
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONStartGameCMD: struct; %w", err)
	}
	return result, nil
}
func (r *StartGameCMD) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *StartGameCMD) _marshalJSONint(x int) ([]byte, error) {
	result, err := json.Marshal(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: StartGameCMD._marshalJSONint:; %w", err)
	}
	return result, nil
}
func (r *StartGameCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONStartGameCMD(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: StartGameCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *StartGameCMD) _unmarshalJSONStartGameCMD(data []byte) (StartGameCMD, error) {
	result := StartGameCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: native struct unwrap; %w", err)
	}
	if fieldFirstPlayerID, ok := partial["FirstPlayerID"]; ok {
		result.FirstPlayerID, err = r._unmarshalJSONPlayerID(fieldFirstPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: field FirstPlayerID; %w", err)
		}
	}
	if fieldSecondPlayerID, ok := partial["SecondPlayerID"]; ok {
		result.SecondPlayerID, err = r._unmarshalJSONPlayerID(fieldSecondPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: field SecondPlayerID; %w", err)
		}
	}
	if fieldBoardRows, ok := partial["BoardRows"]; ok {
		result.BoardRows, err = r._unmarshalJSONint(fieldBoardRows)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: field BoardRows; %w", err)
		}
	}
	if fieldBoardCols, ok := partial["BoardCols"]; ok {
		result.BoardCols, err = r._unmarshalJSONint(fieldBoardCols)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: field BoardCols; %w", err)
		}
	}
	if fieldWinningLength, ok := partial["WinningLength"]; ok {
		result.WinningLength, err = r._unmarshalJSONint(fieldWinningLength)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONStartGameCMD: field WinningLength; %w", err)
		}
	}
	return result, nil
}
func (r *StartGameCMD) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *StartGameCMD) _unmarshalJSONint(data []byte) (int, error) {
	var result int
	err := json.Unmarshal(data, &result)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: StartGameCMD._unmarshalJSONint: native primitive unwrap; %w", err)
	}
	return result, nil
}

func MoveCMDFromJSON(x []byte) (*MoveCMD, error) {
	result := new(MoveCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.MoveCMDFromJSON: %w", err)
	}
	return result, nil
}

func MoveCMDToJSON(x *MoveCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*MoveCMD)(nil)
	_ json.Marshaler   = (*MoveCMD)(nil)
)

func (r *MoveCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONMoveCMD(*r)
}
func (r *MoveCMD) _marshalJSONMoveCMD(x MoveCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldPlayerID []byte
	fieldPlayerID, err = r._marshalJSONPlayerID(x.PlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: MoveCMD._marshalJSONMoveCMD: field name PlayerID; %w", err)
	}
	partial["PlayerID"] = fieldPlayerID
	var fieldPosition []byte
	fieldPosition, err = r._marshalJSONMove(x.Position)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: MoveCMD._marshalJSONMoveCMD: field name Position; %w", err)
	}
	partial["Position"] = fieldPosition
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: MoveCMD._marshalJSONMoveCMD: struct; %w", err)
	}
	return result, nil
}
func (r *MoveCMD) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: MoveCMD._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *MoveCMD) _marshalJSONMove(x Move) ([]byte, error) {
	result, err := shared.JSONMarshal[Move](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: MoveCMD._marshalJSONMove:; %w", err)
	}
	return result, nil
}
func (r *MoveCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONMoveCMD(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: MoveCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *MoveCMD) _unmarshalJSONMoveCMD(data []byte) (MoveCMD, error) {
	result := MoveCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: MoveCMD._unmarshalJSONMoveCMD: native struct unwrap; %w", err)
	}
	if fieldPlayerID, ok := partial["PlayerID"]; ok {
		result.PlayerID, err = r._unmarshalJSONPlayerID(fieldPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: MoveCMD._unmarshalJSONMoveCMD: field PlayerID; %w", err)
		}
	}
	if fieldPosition, ok := partial["Position"]; ok {
		result.Position, err = r._unmarshalJSONMove(fieldPosition)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: MoveCMD._unmarshalJSONMoveCMD: field Position; %w", err)
		}
	}
	return result, nil
}
func (r *MoveCMD) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: MoveCMD._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *MoveCMD) _unmarshalJSONMove(data []byte) (Move, error) {
	result, err := shared.JSONUnmarshal[Move](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: MoveCMD._unmarshalJSONMove: native ref unwrap; %w", err)
	}
	return result, nil
}

func GiveUpCMDFromJSON(x []byte) (*GiveUpCMD, error) {
	result := new(GiveUpCMD)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.GiveUpCMDFromJSON: %w", err)
	}
	return result, nil
}

func GiveUpCMDToJSON(x *GiveUpCMD) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GiveUpCMD)(nil)
	_ json.Marshaler   = (*GiveUpCMD)(nil)
)

func (r *GiveUpCMD) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGiveUpCMD(*r)
}
func (r *GiveUpCMD) _marshalJSONGiveUpCMD(x GiveUpCMD) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldPlayerID []byte
	fieldPlayerID, err = r._marshalJSONPlayerID(x.PlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GiveUpCMD._marshalJSONGiveUpCMD: field name PlayerID; %w", err)
	}
	partial["PlayerID"] = fieldPlayerID
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GiveUpCMD._marshalJSONGiveUpCMD: struct; %w", err)
	}
	return result, nil
}
func (r *GiveUpCMD) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GiveUpCMD._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GiveUpCMD) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGiveUpCMD(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: GiveUpCMD.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GiveUpCMD) _unmarshalJSONGiveUpCMD(data []byte) (GiveUpCMD, error) {
	result := GiveUpCMD{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GiveUpCMD._unmarshalJSONGiveUpCMD: native struct unwrap; %w", err)
	}
	if fieldPlayerID, ok := partial["PlayerID"]; ok {
		result.PlayerID, err = r._unmarshalJSONPlayerID(fieldPlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GiveUpCMD._unmarshalJSONGiveUpCMD: field PlayerID; %w", err)
		}
	}
	return result, nil
}
func (r *GiveUpCMD) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GiveUpCMD._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}

type StateVisitor interface {
	VisitGameWaitingForPlayer(v *GameWaitingForPlayer) any
	VisitGameProgress(v *GameProgress) any
	VisitGameEndWithWin(v *GameEndWithWin) any
	VisitGameEndWithDraw(v *GameEndWithDraw) any
}

type State interface {
	AcceptState(g StateVisitor) any
}

var (
	_ State = (*GameWaitingForPlayer)(nil)
	_ State = (*GameProgress)(nil)
	_ State = (*GameEndWithWin)(nil)
	_ State = (*GameEndWithDraw)(nil)
)

func (r *GameWaitingForPlayer) AcceptState(v StateVisitor) any { return v.VisitGameWaitingForPlayer(r) }
func (r *GameProgress) AcceptState(v StateVisitor) any         { return v.VisitGameProgress(r) }
func (r *GameEndWithWin) AcceptState(v StateVisitor) any       { return v.VisitGameEndWithWin(r) }
func (r *GameEndWithDraw) AcceptState(v StateVisitor) any      { return v.VisitGameEndWithDraw(r) }

func MatchStateR3[T0, T1, T2 any](
	x State,
	f1 func(x *GameWaitingForPlayer) (T0, T1, T2),
	f2 func(x *GameProgress) (T0, T1, T2),
	f3 func(x *GameEndWithWin) (T0, T1, T2),
	f4 func(x *GameEndWithDraw) (T0, T1, T2),
) (T0, T1, T2) {
	switch v := x.(type) {
	case *GameWaitingForPlayer:
		return f1(v)
	case *GameProgress:
		return f2(v)
	case *GameEndWithWin:
		return f3(v)
	case *GameEndWithDraw:
		return f4(v)
	}
	var result1 T0
	var result2 T1
	var result3 T2
	return result1, result2, result3
}

func MatchStateR2[T0, T1 any](
	x State,
	f1 func(x *GameWaitingForPlayer) (T0, T1),
	f2 func(x *GameProgress) (T0, T1),
	f3 func(x *GameEndWithWin) (T0, T1),
	f4 func(x *GameEndWithDraw) (T0, T1),
) (T0, T1) {
	switch v := x.(type) {
	case *GameWaitingForPlayer:
		return f1(v)
	case *GameProgress:
		return f2(v)
	case *GameEndWithWin:
		return f3(v)
	case *GameEndWithDraw:
		return f4(v)
	}
	var result1 T0
	var result2 T1
	return result1, result2
}

func MatchStateR1[T0 any](
	x State,
	f1 func(x *GameWaitingForPlayer) T0,
	f2 func(x *GameProgress) T0,
	f3 func(x *GameEndWithWin) T0,
	f4 func(x *GameEndWithDraw) T0,
) T0 {
	switch v := x.(type) {
	case *GameWaitingForPlayer:
		return f1(v)
	case *GameProgress:
		return f2(v)
	case *GameEndWithWin:
		return f3(v)
	case *GameEndWithDraw:
		return f4(v)
	}
	var result1 T0
	return result1
}

func MatchStateR0(
	x State,
	f1 func(x *GameWaitingForPlayer),
	f2 func(x *GameProgress),
	f3 func(x *GameEndWithWin),
	f4 func(x *GameEndWithDraw),
) {
	switch v := x.(type) {
	case *GameWaitingForPlayer:
		f1(v)
	case *GameProgress:
		f2(v)
	case *GameEndWithWin:
		f3(v)
	case *GameEndWithDraw:
		f4(v)
	}
}
func init() {
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.GameEndWithDraw", GameEndWithDrawFromJSON, GameEndWithDrawToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.GameEndWithWin", GameEndWithWinFromJSON, GameEndWithWinToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.GameProgress", GameProgressFromJSON, GameProgressToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.GameWaitingForPlayer", GameWaitingForPlayerFromJSON, GameWaitingForPlayerToJSON)
	shared.JSONMarshallerRegister("github.com/widmogrod/mkunion/example/tic_tac_toe_machine.State", StateFromJSON, StateToJSON)
}

type StateUnionJSON struct {
	Type                 string          `json:"$type,omitempty"`
	GameWaitingForPlayer json.RawMessage `json:"tictacstatemachine.GameWaitingForPlayer,omitempty"`
	GameProgress         json.RawMessage `json:"tictacstatemachine.GameProgress,omitempty"`
	GameEndWithWin       json.RawMessage `json:"tictacstatemachine.GameEndWithWin,omitempty"`
	GameEndWithDraw      json.RawMessage `json:"tictacstatemachine.GameEndWithDraw,omitempty"`
}

func StateFromJSON(x []byte) (State, error) {
	if x == nil || len(x) == 0 {
		return nil, nil
	}
	if string(x[:4]) == "null" {
		return nil, nil
	}
	var data StateUnionJSON
	err := json.Unmarshal(x, &data)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.StateFromJSON: %w", err)
	}

	switch data.Type {
	case "tictacstatemachine.GameWaitingForPlayer":
		return GameWaitingForPlayerFromJSON(data.GameWaitingForPlayer)
	case "tictacstatemachine.GameProgress":
		return GameProgressFromJSON(data.GameProgress)
	case "tictacstatemachine.GameEndWithWin":
		return GameEndWithWinFromJSON(data.GameEndWithWin)
	case "tictacstatemachine.GameEndWithDraw":
		return GameEndWithDrawFromJSON(data.GameEndWithDraw)
	}

	if data.GameWaitingForPlayer != nil {
		return GameWaitingForPlayerFromJSON(data.GameWaitingForPlayer)
	} else if data.GameProgress != nil {
		return GameProgressFromJSON(data.GameProgress)
	} else if data.GameEndWithWin != nil {
		return GameEndWithWinFromJSON(data.GameEndWithWin)
	} else if data.GameEndWithDraw != nil {
		return GameEndWithDrawFromJSON(data.GameEndWithDraw)
	}
	return nil, fmt.Errorf("tictacstatemachine.StateFromJSON: unknown type: %s", data.Type)
}

func StateToJSON(x State) ([]byte, error) {
	if x == nil {
		return []byte(`null`), nil
	}
	return MatchStateR2(
		x,
		func(y *GameWaitingForPlayer) ([]byte, error) {
			body, err := GameWaitingForPlayerToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:                 "tictacstatemachine.GameWaitingForPlayer",
				GameWaitingForPlayer: body,
			})
		},
		func(y *GameProgress) ([]byte, error) {
			body, err := GameProgressToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:         "tictacstatemachine.GameProgress",
				GameProgress: body,
			})
		},
		func(y *GameEndWithWin) ([]byte, error) {
			body, err := GameEndWithWinToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:           "tictacstatemachine.GameEndWithWin",
				GameEndWithWin: body,
			})
		},
		func(y *GameEndWithDraw) ([]byte, error) {
			body, err := GameEndWithDrawToJSON(y)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine.StateToJSON: %w", err)
			}
			return json.Marshal(StateUnionJSON{
				Type:            "tictacstatemachine.GameEndWithDraw",
				GameEndWithDraw: body,
			})
		},
	)
}

func GameWaitingForPlayerFromJSON(x []byte) (*GameWaitingForPlayer, error) {
	result := new(GameWaitingForPlayer)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.GameWaitingForPlayerFromJSON: %w", err)
	}
	return result, nil
}

func GameWaitingForPlayerToJSON(x *GameWaitingForPlayer) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GameWaitingForPlayer)(nil)
	_ json.Marshaler   = (*GameWaitingForPlayer)(nil)
)

func (r *GameWaitingForPlayer) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGameWaitingForPlayer(*r)
}
func (r *GameWaitingForPlayer) _marshalJSONGameWaitingForPlayer(x GameWaitingForPlayer) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTicTacToeBaseState []byte
	fieldTicTacToeBaseState, err = r._marshalJSONTicTacToeBaseState(x.TicTacToeBaseState)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._marshalJSONGameWaitingForPlayer: field name TicTacToeBaseState; %w", err)
	}
	partial["TicTacToeBaseState"] = fieldTicTacToeBaseState
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._marshalJSONGameWaitingForPlayer: struct; %w", err)
	}
	return result, nil
}
func (r *GameWaitingForPlayer) _marshalJSONTicTacToeBaseState(x TicTacToeBaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[TicTacToeBaseState](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._marshalJSONTicTacToeBaseState:; %w", err)
	}
	return result, nil
}
func (r *GameWaitingForPlayer) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGameWaitingForPlayer(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: GameWaitingForPlayer.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GameWaitingForPlayer) _unmarshalJSONGameWaitingForPlayer(data []byte) (GameWaitingForPlayer, error) {
	result := GameWaitingForPlayer{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._unmarshalJSONGameWaitingForPlayer: native struct unwrap; %w", err)
	}
	if fieldTicTacToeBaseState, ok := partial["TicTacToeBaseState"]; ok {
		result.TicTacToeBaseState, err = r._unmarshalJSONTicTacToeBaseState(fieldTicTacToeBaseState)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._unmarshalJSONGameWaitingForPlayer: field TicTacToeBaseState; %w", err)
		}
	}
	return result, nil
}
func (r *GameWaitingForPlayer) _unmarshalJSONTicTacToeBaseState(data []byte) (TicTacToeBaseState, error) {
	result, err := shared.JSONUnmarshal[TicTacToeBaseState](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameWaitingForPlayer._unmarshalJSONTicTacToeBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}

func GameProgressFromJSON(x []byte) (*GameProgress, error) {
	result := new(GameProgress)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.GameProgressFromJSON: %w", err)
	}
	return result, nil
}

func GameProgressToJSON(x *GameProgress) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GameProgress)(nil)
	_ json.Marshaler   = (*GameProgress)(nil)
)

func (r *GameProgress) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGameProgress(*r)
}
func (r *GameProgress) _marshalJSONGameProgress(x GameProgress) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTicTacToeBaseState []byte
	fieldTicTacToeBaseState, err = r._marshalJSONTicTacToeBaseState(x.TicTacToeBaseState)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONGameProgress: field name TicTacToeBaseState; %w", err)
	}
	partial["TicTacToeBaseState"] = fieldTicTacToeBaseState
	var fieldNextMovePlayerID []byte
	fieldNextMovePlayerID, err = r._marshalJSONMove(x.NextMovePlayerID)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONGameProgress: field name NextMovePlayerID; %w", err)
	}
	partial["NextMovePlayerID"] = fieldNextMovePlayerID
	var fieldMovesTaken []byte
	fieldMovesTaken, err = r._marshalJSONmapLb_Move_bLPlayerID(x.MovesTaken)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONGameProgress: field name MovesTaken; %w", err)
	}
	partial["MovesTaken"] = fieldMovesTaken
	var fieldMovesOrder []byte
	fieldMovesOrder, err = r._marshalJSONSliceMove(x.MovesOrder)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONGameProgress: field name MovesOrder; %w", err)
	}
	partial["MovesOrder"] = fieldMovesOrder
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONGameProgress: struct; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _marshalJSONTicTacToeBaseState(x TicTacToeBaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[TicTacToeBaseState](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONTicTacToeBaseState:; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _marshalJSONMove(x Move) ([]byte, error) {
	result, err := shared.JSONMarshal[Move](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONMove:; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _marshalJSONmapLb_Move_bLPlayerID(x map[Move]PlayerID) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range x {
		var key []byte
		if isString {
			key = []byte(any(k).(string))
		} else {
			key, err = r._marshalJSONMove(k)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._marshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONmapLb_Move_bLPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _marshalJSONSliceMove(x []Move) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONMove(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONSliceMove: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._marshalJSONSliceMove:; %w", err)
	}
	return result, nil
}
func (r *GameProgress) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGameProgress(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: GameProgress.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GameProgress) _unmarshalJSONGameProgress(data []byte) (GameProgress, error) {
	result := GameProgress{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONGameProgress: native struct unwrap; %w", err)
	}
	if fieldTicTacToeBaseState, ok := partial["TicTacToeBaseState"]; ok {
		result.TicTacToeBaseState, err = r._unmarshalJSONTicTacToeBaseState(fieldTicTacToeBaseState)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONGameProgress: field TicTacToeBaseState; %w", err)
		}
	}
	if fieldNextMovePlayerID, ok := partial["NextMovePlayerID"]; ok {
		result.NextMovePlayerID, err = r._unmarshalJSONMove(fieldNextMovePlayerID)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONGameProgress: field NextMovePlayerID; %w", err)
		}
	}
	if fieldMovesTaken, ok := partial["MovesTaken"]; ok {
		result.MovesTaken, err = r._unmarshalJSONmapLb_Move_bLPlayerID(fieldMovesTaken)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONGameProgress: field MovesTaken; %w", err)
		}
	}
	if fieldMovesOrder, ok := partial["MovesOrder"]; ok {
		result.MovesOrder, err = r._unmarshalJSONSliceMove(fieldMovesOrder)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONGameProgress: field MovesOrder; %w", err)
		}
	}
	return result, nil
}
func (r *GameProgress) _unmarshalJSONTicTacToeBaseState(data []byte) (TicTacToeBaseState, error) {
	result, err := shared.JSONUnmarshal[TicTacToeBaseState](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONTicTacToeBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _unmarshalJSONMove(data []byte) (Move, error) {
	result, err := shared.JSONUnmarshal[Move](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONMove: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _unmarshalJSONmapLb_Move_bLPlayerID(data []byte) (map[Move]PlayerID, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONmapLb_Move_bLPlayerID: native map unwrap; %w", err)
	}
	result := make(map[Move]PlayerID)
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range partial {
		var key Move
		if isString {
			key = any(k).(Move)
		} else {
			key, err = r._unmarshalJSONMove([]byte(k))
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._unmarshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *GameProgress) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameProgress) _unmarshalJSONSliceMove(data []byte) ([]Move, error) {
	result := make([]Move, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONSliceMove: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONMove(v)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameProgress._unmarshalJSONSliceMove: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}

func GameEndWithWinFromJSON(x []byte) (*GameEndWithWin, error) {
	result := new(GameEndWithWin)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.GameEndWithWinFromJSON: %w", err)
	}
	return result, nil
}

func GameEndWithWinToJSON(x *GameEndWithWin) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GameEndWithWin)(nil)
	_ json.Marshaler   = (*GameEndWithWin)(nil)
)

func (r *GameEndWithWin) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGameEndWithWin(*r)
}
func (r *GameEndWithWin) _marshalJSONGameEndWithWin(x GameEndWithWin) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTicTacToeBaseState []byte
	fieldTicTacToeBaseState, err = r._marshalJSONTicTacToeBaseState(x.TicTacToeBaseState)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONGameEndWithWin: field name TicTacToeBaseState; %w", err)
	}
	partial["TicTacToeBaseState"] = fieldTicTacToeBaseState
	var fieldWinner []byte
	fieldWinner, err = r._marshalJSONPlayerID(x.Winner)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONGameEndWithWin: field name Winner; %w", err)
	}
	partial["Winner"] = fieldWinner
	var fieldWiningSequence []byte
	fieldWiningSequence, err = r._marshalJSONSliceMove(x.WiningSequence)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONGameEndWithWin: field name WiningSequence; %w", err)
	}
	partial["WiningSequence"] = fieldWiningSequence
	var fieldMovesTaken []byte
	fieldMovesTaken, err = r._marshalJSONmapLb_Move_bLPlayerID(x.MovesTaken)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONGameEndWithWin: field name MovesTaken; %w", err)
	}
	partial["MovesTaken"] = fieldMovesTaken
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONGameEndWithWin: struct; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _marshalJSONTicTacToeBaseState(x TicTacToeBaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[TicTacToeBaseState](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONTicTacToeBaseState:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _marshalJSONSliceMove(x []Move) ([]byte, error) {
	partial := make([]json.RawMessage, len(x))
	for i, v := range x {
		item, err := r._marshalJSONMove(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONSliceMove: at index %d; %w", i, err)
		}
		partial[i] = item
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONSliceMove:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _marshalJSONMove(x Move) ([]byte, error) {
	result, err := shared.JSONMarshal[Move](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONMove:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _marshalJSONmapLb_Move_bLPlayerID(x map[Move]PlayerID) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range x {
		var key []byte
		if isString {
			key = []byte(any(k).(string))
		} else {
			key, err = r._marshalJSONMove(k)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._marshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._marshalJSONmapLb_Move_bLPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGameEndWithWin(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: GameEndWithWin.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GameEndWithWin) _unmarshalJSONGameEndWithWin(data []byte) (GameEndWithWin, error) {
	result := GameEndWithWin{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONGameEndWithWin: native struct unwrap; %w", err)
	}
	if fieldTicTacToeBaseState, ok := partial["TicTacToeBaseState"]; ok {
		result.TicTacToeBaseState, err = r._unmarshalJSONTicTacToeBaseState(fieldTicTacToeBaseState)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONGameEndWithWin: field TicTacToeBaseState; %w", err)
		}
	}
	if fieldWinner, ok := partial["Winner"]; ok {
		result.Winner, err = r._unmarshalJSONPlayerID(fieldWinner)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONGameEndWithWin: field Winner; %w", err)
		}
	}
	if fieldWiningSequence, ok := partial["WiningSequence"]; ok {
		result.WiningSequence, err = r._unmarshalJSONSliceMove(fieldWiningSequence)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONGameEndWithWin: field WiningSequence; %w", err)
		}
	}
	if fieldMovesTaken, ok := partial["MovesTaken"]; ok {
		result.MovesTaken, err = r._unmarshalJSONmapLb_Move_bLPlayerID(fieldMovesTaken)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONGameEndWithWin: field MovesTaken; %w", err)
		}
	}
	return result, nil
}
func (r *GameEndWithWin) _unmarshalJSONTicTacToeBaseState(data []byte) (TicTacToeBaseState, error) {
	result, err := shared.JSONUnmarshal[TicTacToeBaseState](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONTicTacToeBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _unmarshalJSONSliceMove(data []byte) ([]Move, error) {
	result := make([]Move, 0)
	var partial []json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONSliceMove: native list unwrap; %w", err)
	}
	for i, v := range partial {
		item, err := r._unmarshalJSONMove(v)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONSliceMove: at index %d; %w", i, err)
		}
		result = append(result, item)
	}
	return result, nil
}
func (r *GameEndWithWin) _unmarshalJSONMove(data []byte) (Move, error) {
	result, err := shared.JSONUnmarshal[Move](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONMove: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameEndWithWin) _unmarshalJSONmapLb_Move_bLPlayerID(data []byte) (map[Move]PlayerID, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONmapLb_Move_bLPlayerID: native map unwrap; %w", err)
	}
	result := make(map[Move]PlayerID)
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range partial {
		var key Move
		if isString {
			key = any(k).(Move)
		} else {
			key, err = r._unmarshalJSONMove([]byte(k))
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._unmarshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameEndWithWin._unmarshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}

func GameEndWithDrawFromJSON(x []byte) (*GameEndWithDraw, error) {
	result := new(GameEndWithDraw)
	err := result.UnmarshalJSON(x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine.GameEndWithDrawFromJSON: %w", err)
	}
	return result, nil
}

func GameEndWithDrawToJSON(x *GameEndWithDraw) ([]byte, error) {
	return x.MarshalJSON()
}

var (
	_ json.Unmarshaler = (*GameEndWithDraw)(nil)
	_ json.Marshaler   = (*GameEndWithDraw)(nil)
)

func (r *GameEndWithDraw) MarshalJSON() ([]byte, error) {
	if r == nil {
		return nil, nil
	}
	return r._marshalJSONGameEndWithDraw(*r)
}
func (r *GameEndWithDraw) _marshalJSONGameEndWithDraw(x GameEndWithDraw) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var fieldTicTacToeBaseState []byte
	fieldTicTacToeBaseState, err = r._marshalJSONTicTacToeBaseState(x.TicTacToeBaseState)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONGameEndWithDraw: field name TicTacToeBaseState; %w", err)
	}
	partial["TicTacToeBaseState"] = fieldTicTacToeBaseState
	var fieldMovesTaken []byte
	fieldMovesTaken, err = r._marshalJSONmapLb_Move_bLPlayerID(x.MovesTaken)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONGameEndWithDraw: field name MovesTaken; %w", err)
	}
	partial["MovesTaken"] = fieldMovesTaken
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONGameEndWithDraw: struct; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _marshalJSONTicTacToeBaseState(x TicTacToeBaseState) ([]byte, error) {
	result, err := shared.JSONMarshal[TicTacToeBaseState](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONTicTacToeBaseState:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _marshalJSONmapLb_Move_bLPlayerID(x map[Move]PlayerID) ([]byte, error) {
	partial := make(map[string]json.RawMessage)
	var err error
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range x {
		var key []byte
		if isString {
			key = []byte(any(k).(string))
		} else {
			key, err = r._marshalJSONMove(k)
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._marshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		partial[string(key)] = value
	}
	result, err := json.Marshal(partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONmapLb_Move_bLPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _marshalJSONMove(x Move) ([]byte, error) {
	result, err := shared.JSONMarshal[Move](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONMove:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _marshalJSONPlayerID(x PlayerID) ([]byte, error) {
	result, err := shared.JSONMarshal[PlayerID](x)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._marshalJSONPlayerID:; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) UnmarshalJSON(data []byte) error {
	result, err := r._unmarshalJSONGameEndWithDraw(data)
	if err != nil {
		return fmt.Errorf("tictacstatemachine: GameEndWithDraw.UnmarshalJSON: %w", err)
	}
	*r = result
	return nil
}
func (r *GameEndWithDraw) _unmarshalJSONGameEndWithDraw(data []byte) (GameEndWithDraw, error) {
	result := GameEndWithDraw{}
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONGameEndWithDraw: native struct unwrap; %w", err)
	}
	if fieldTicTacToeBaseState, ok := partial["TicTacToeBaseState"]; ok {
		result.TicTacToeBaseState, err = r._unmarshalJSONTicTacToeBaseState(fieldTicTacToeBaseState)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONGameEndWithDraw: field TicTacToeBaseState; %w", err)
		}
	}
	if fieldMovesTaken, ok := partial["MovesTaken"]; ok {
		result.MovesTaken, err = r._unmarshalJSONmapLb_Move_bLPlayerID(fieldMovesTaken)
		if err != nil {
			return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONGameEndWithDraw: field MovesTaken; %w", err)
		}
	}
	return result, nil
}
func (r *GameEndWithDraw) _unmarshalJSONTicTacToeBaseState(data []byte) (TicTacToeBaseState, error) {
	result, err := shared.JSONUnmarshal[TicTacToeBaseState](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONTicTacToeBaseState: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _unmarshalJSONmapLb_Move_bLPlayerID(data []byte) (map[Move]PlayerID, error) {
	var partial map[string]json.RawMessage
	err := json.Unmarshal(data, &partial)
	if err != nil {
		return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONmapLb_Move_bLPlayerID: native map unwrap; %w", err)
	}
	result := make(map[Move]PlayerID)
	var keyType Move
	_, isString := any(keyType).(string)
	for k, v := range partial {
		var key Move
		if isString {
			key = any(k).(Move)
		} else {
			key, err = r._unmarshalJSONMove([]byte(k))
			if err != nil {
				return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONmapLb_Move_bLPlayerID: key; %w", err)
			}
		}
		value, err := r._unmarshalJSONPlayerID(v)
		if err != nil {
			return nil, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONmapLb_Move_bLPlayerID: value; %w", err)
		}
		result[key] = value
	}
	return result, nil
}
func (r *GameEndWithDraw) _unmarshalJSONMove(data []byte) (Move, error) {
	result, err := shared.JSONUnmarshal[Move](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONMove: native ref unwrap; %w", err)
	}
	return result, nil
}
func (r *GameEndWithDraw) _unmarshalJSONPlayerID(data []byte) (PlayerID, error) {
	result, err := shared.JSONUnmarshal[PlayerID](data)
	if err != nil {
		return result, fmt.Errorf("tictacstatemachine: GameEndWithDraw._unmarshalJSONPlayerID: native ref unwrap; %w", err)
	}
	return result, nil
}
